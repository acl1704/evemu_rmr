
#include "XMLPacketGen.h"
#include "../common/logsys.h"
#include <string>
#include <map>
#include <errno.h>
#include <string.h>
#include <stdio.h>
#include "HeaderGenerator.h"
#include "ImplGenerator.h"

static const char *GenFileComment = 
"/*  EVEmu: EVE Online Server Emulator\n"
"  \n"
"  **************************************************************\n"
"  This file is automatically generated, DO NOT EDIT IT DIRECTLY.\n"
"  **************************************************************\n"
"  \n"
"  (If you need to customize an object, you must copy that object\n"
"  into another source file, and give up the ability to generate it)\n"
"  \n"
"  \n"
"  This program is free software; you can redistribute it and/or modify\n"
"  it under the terms of the GNU General Public License as published by\n"
"  the Free Software Foundation; version 2 of the License.\n"
"  \n"
"  This program is distributed in the hope that it will be useful,\n"
"  but WITHOUT ANY WARRANTY except by those people which sell it, which\n"
"  are required to give you total support for your newly bought product;\n"
"  without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n"
"  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n"
"  \n"
"  You should have received a copy of the GNU General Public License\n"
"  along with this program; if not, write to the Free Software\n"
"  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
"*/\n"
;

static std::string FNameToDef(const char *buf) {
	char *obuf = new char[strlen(buf)+10];
	char *ptr = obuf;
	const char *bptr = buf;
	*ptr = '_'; ++ptr;
	*ptr = '_'; ++ptr;
	while(*bptr != '\0') {
		if(*bptr == '/' || *bptr == ':' || *bptr == '\\' || *bptr == '.' || *bptr == '-')
			*ptr = '_';
		else
			*ptr = *bptr;
		++ptr;
		++bptr;
	}
	*ptr = '_'; ++ptr;
	*ptr = '_'; ++ptr;
	*ptr = '\0';
	std::string b(obuf);
	delete[] obuf;
	return(b);
}

XMLPacketGen::XMLPacketGen() {
}

XMLPacketGen::~XMLPacketGen() {
}

bool XMLPacketGen::GenPackets(
	const char *xml_file, 
	const char *out_h, 
	const char *out_cpp)
{
	TiXmlDocument doc( xml_file );
	if(!doc.LoadFile()) {
		_log(COMMON__ERROR, "Failed to parse XML file '%s' line %d: %s", xml_file, doc.ErrorRow(), doc.ErrorDesc());
		return(false);
	}
	
	TiXmlElement *root = doc.RootElement ();
	if(root == NULL) {
		_log(COMMON__ERROR, "Unable to find root 'Elements' in %s", xml_file);
		return(false);
	}

	FILE *h = fopen(out_h, "w");
	if(h == NULL) {
		_log(COMMON__ERROR, "Unable to open output file %s: %s", out_h, strerror(errno));
		return(false);
	}
	FILE *cpp = fopen(out_cpp, "w");
	if(cpp == NULL) {
		_log(COMMON__ERROR, "Unable to open output file %s: %s", out_cpp, strerror(errno));
		fclose(h);
		return(false);
	}

	std::string def = FNameToDef(out_h);

	
	/*
     * Generate .h file:
     *
     *
    */
	//header:
	fprintf(h, 
		"%s\n"
		"#ifndef %s\n"
		"#define %s\n"
		"\n"
		"#include <string>\n"
		"#include <vector>\n"
		"#include <map>\n"
		"#include \"../common/common.h\"\n"
		"#include \"../common/logsys.h\"\n"
		"#include \"../common/PyRep.h\"\n"
		"\n"
		"\n"
		"",
		GenFileComment, def.c_str(), def.c_str()
	);
	//body:
	ClassHeaderGenerator h_gen;
	h_gen.Generate(h, root);
	//footer:
	fprintf(h,
		"\n\n"
		"#endif\n\n\n"
	);
	
	/*
     * Generate .cpp file:
     *
     *
    */
	//header:
	fprintf(cpp, 
		"%s\n"
		"\n"
		"#include <string>\n"
		"#include \"%s\"\n"
		"#include \"../common/PyRep.h\"\n"
		"\n"
		"\n"
		"\n",
		GenFileComment, out_h
	);
	//body:
	ClassImplementationGenerator cpp_gen;
	cpp_gen.Generate(cpp, root);
	//footer:
	fprintf(cpp,
		"\n\n"
	);
	
	
	return(true);
}








