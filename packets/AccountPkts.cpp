/*  EVEmu: EVE Online Server Emulator
  
  **************************************************************
  This file is automatically generated, DO NOT EDIT IT DIRECTLY.
  **************************************************************
  
  (If you need to customize an object, you must copy that object
  into another source file, and give up the ability to generate it)
  
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY except by those people which sell it, which
  are required to give you total support for your newly bought product;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/


#include <string>
#include "../packets/AccountPkts.h"
#include "../common/PyRep.h"




AuthenticationReq::AuthenticationReq() {
	/*  0: clientinfo  */
	project_version = "";
	code_version = 0;
	build_version = 0;
	languageID = "";
	/* <IDEntry key="os.hashid">
	<int name="os_hashid" />
   </IDEntry> */
	affiliate = 0;
	version_number = 0.0;
	/*  1  */
	login = "";
	/*  2  */
	password = "";
	/*  potential optional field address...  */
}

AuthenticationReq::~AuthenticationReq() {
	/*  0: clientinfo  */
	/* <IDEntry key="os.hashid">
	<int name="os_hashid" />
   </IDEntry> */
	/*  1  */
	/*  2  */
	/*  potential optional field address...  */
}

void AuthenticationReq::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sAuthenticationReq", pfx);
	/*  0: clientinfo  */
	_log(l_type, "%sproject_version='%s'", pfx, project_version.c_str());
	_log(l_type, "%scode_version=%lu", pfx, code_version);
	_log(l_type, "%sbuild_version=%lu", pfx, build_version);
	_log(l_type, "%slanguageID='%s'", pfx, languageID.c_str());
	/* <IDEntry key="os.hashid">
	<int name="os_hashid" />
   </IDEntry> */
	_log(l_type, "%saffiliate=%lu", pfx, affiliate);
	_log(l_type, "%sversion_number=%.13f", pfx, version_number);
	/*  1  */
	_log(l_type, "%slogin='%s'", pfx, login.c_str());
	/*  2  */
	_log(l_type, "%spassword='%s'", pfx, password.c_str());
	/*  potential optional field address...  */
}

PyRepTuple *AuthenticationReq::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(3);
	/*  0: clientinfo  */
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	dict1_0 = new PyRepString(project_version);
	dict1->items[
		new PyRepString("version.project")
	] = dict1_0;
	PyRep *dict1_1;
	dict1_1 = new PyRepInteger(code_version);
	dict1->items[
		new PyRepString("code.version")
	] = dict1_1;
	PyRep *dict1_2;
	dict1_2 = new PyRepInteger(build_version);
	dict1->items[
		new PyRepString("version.build")
	] = dict1_2;
	PyRep *dict1_3;
	dict1_3 = new PyRepString(languageID);
	dict1->items[
		new PyRepString("languageID")
	] = dict1_3;
	/* <IDEntry key="os.hashid">
	<int name="os_hashid" />
   </IDEntry> */
	PyRep *dict1_4;
	dict1_4 = new PyRepInteger(affiliate);
	dict1->items[
		new PyRepString("affiliate.ID")
	] = dict1_4;
	PyRep *dict1_5;
	dict1_5 = new PyRepReal(version_number);
	dict1->items[
		new PyRepString("version.number")
	] = dict1_5;
	tuple0->items[0] = dict1;
	
	/*  1  */
	tuple0->items[1] = new PyRepString(login);
	/*  2  */
	tuple0->items[2] = new PyRepString(password);
	/*  potential optional field address...  */
	res = tuple0;
	

	return(res);
}

PyRepTuple *AuthenticationReq::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(3);
	/*  0: clientinfo  */
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	dict1_0 = new PyRepString(project_version);
	dict1->items[
		new PyRepString("version.project")
	] = dict1_0;
	PyRep *dict1_1;
	dict1_1 = new PyRepInteger(code_version);
	dict1->items[
		new PyRepString("code.version")
	] = dict1_1;
	PyRep *dict1_2;
	dict1_2 = new PyRepInteger(build_version);
	dict1->items[
		new PyRepString("version.build")
	] = dict1_2;
	PyRep *dict1_3;
	dict1_3 = new PyRepString(languageID);
	dict1->items[
		new PyRepString("languageID")
	] = dict1_3;
	/* <IDEntry key="os.hashid">
	<int name="os_hashid" />
   </IDEntry> */
	PyRep *dict1_4;
	dict1_4 = new PyRepInteger(affiliate);
	dict1->items[
		new PyRepString("affiliate.ID")
	] = dict1_4;
	PyRep *dict1_5;
	dict1_5 = new PyRepReal(version_number);
	dict1->items[
		new PyRepString("version.number")
	] = dict1_5;
	tuple0->items[0] = dict1;
	
	/*  1  */
	tuple0->items[1] = new PyRepString(login);
	/*  2  */
	tuple0->items[2] = new PyRepString(password);
	/*  potential optional field address...  */
	res = tuple0;
	

	return(res);
}

bool AuthenticationReq::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool AuthenticationReq::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 3) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: tuple0 is the wrong size: expected 3, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	/*  0: clientinfo  */
	if(!tuple0->items[0]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: dict1 is the wrong type: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	bool dict1_project_version = false;
	bool dict1_code_version = false;
	bool dict1_build_version = false;
	bool dict1_languageID = false;
	bool dict1_affiliate = false;
	bool dict1_version_number = false;
	PyRepDict *dict1 = (PyRepDict *) tuple0->items[0];
	
	PyRepDict::iterator dict1_cur, dict1_end;
	dict1_cur = dict1->items.begin();
	dict1_end = dict1->items.end();
	for(; dict1_cur != dict1_end; dict1_cur++) {
		PyRep *key__ = dict1_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: a key in dict1 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "version.project") {
			dict1_project_version = true;
	if(!dict1_cur->second->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: project_version is not a string: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_2 = (PyRepString *) dict1_cur->second;
	project_version = string_2->value;
		} else
		if(key_string__->value == "code.version") {
			dict1_code_version = true;
	if(!dict1_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: code_version is not an int: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_3 = (PyRepInteger *) dict1_cur->second;
	if(int_3->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode AuthenticationReq: truncating 64 bit into into 32 bit int for field code_version");
	}
	code_version = int_3->value;
		} else
		if(key_string__->value == "version.build") {
			dict1_build_version = true;
	if(!dict1_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: build_version is not an int: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_4 = (PyRepInteger *) dict1_cur->second;
	if(int_4->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode AuthenticationReq: truncating 64 bit into into 32 bit int for field build_version");
	}
	build_version = int_4->value;
		} else
		if(key_string__->value == "languageID") {
			dict1_languageID = true;
	if(!dict1_cur->second->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: languageID is not a string: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_5 = (PyRepString *) dict1_cur->second;
	languageID = string_5->value;
		} else
	/* <IDEntry key="os.hashid">
	<int name="os_hashid" />
   </IDEntry> */
		if(key_string__->value == "affiliate.ID") {
			dict1_affiliate = true;
	if(!dict1_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: affiliate is not an int: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_6 = (PyRepInteger *) dict1_cur->second;
	if(int_6->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode AuthenticationReq: truncating 64 bit into into 32 bit int for field affiliate");
	}
	affiliate = int_6->value;
		} else
		if(key_string__->value == "version.number") {
			dict1_version_number = true;
	if(!dict1_cur->second->CheckType(PyRep::Real)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: version_number is not a real: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepReal *real_7 = (PyRepReal *) dict1_cur->second;
	version_number = real_7->value;
		} else
		{ /* do nothing, soft dict */ }
	}
	
	if(!dict1_project_version) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: Missing dict entry for 'project_version' in dict1");
		delete packet;
		return(false);
	}
	
	if(!dict1_code_version) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: Missing dict entry for 'code_version' in dict1");
		delete packet;
		return(false);
	}
	
	if(!dict1_build_version) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: Missing dict entry for 'build_version' in dict1");
		delete packet;
		return(false);
	}
	
	if(!dict1_languageID) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: Missing dict entry for 'languageID' in dict1");
		delete packet;
		return(false);
	}
	
	if(!dict1_affiliate) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: Missing dict entry for 'affiliate' in dict1");
		delete packet;
		return(false);
	}
	
	if(!dict1_version_number) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: Missing dict entry for 'version_number' in dict1");
		delete packet;
		return(false);
	}
	
	/*  1  */
	if(!tuple0->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: login is not a string: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_8 = (PyRepString *) tuple0->items[1];
	login = string_8->value;
	/*  2  */
	if(!tuple0->items[2]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationReq failed: password is not a string: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_9 = (PyRepString *) tuple0->items[2];
	password = string_9->value;
	/*  potential optional field address...  */

	delete packet;
	return(true);
}

AuthenticationReq *AuthenticationReq::Clone() const {
	AuthenticationReq *res = new AuthenticationReq;
	res->CloneFrom(this);
	return(res);
}

void AuthenticationReq::CloneFrom(const AuthenticationReq *from) {
	/*  0: clientinfo  */
	project_version = from->project_version;
	code_version = from->code_version;
	build_version = from->build_version;
	languageID = from->languageID;
	/* <IDEntry key="os.hashid">
	<int name="os_hashid" />
   </IDEntry> */
	affiliate = from->affiliate;
	version_number = from->version_number;
	/*  1  */
	login = from->login;
	/*  2  */
	password = from->password;
	/*  potential optional field address...  */
	
}


AuthenticationRsp::AuthenticationRsp() {
	/*  0: serverinfo  */
	project_version = "";
	build_version = 0;
	version_number = 0.0;
	/*  1: userID  */
	accountID = 0;
	/*  2  */
	role = 0;
	/*  3  */
	/*  4: proxyNodeID  */
	proxyNodeID = 0;
}

AuthenticationRsp::~AuthenticationRsp() {
	/*  0: serverinfo  */
	/*  1: userID  */
	/*  2  */
	/*  3  */
	/*  4: proxyNodeID  */
}

void AuthenticationRsp::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sAuthenticationRsp", pfx);
	/*  0: serverinfo  */
	_log(l_type, "%sproject_version='%s'", pfx, project_version.c_str());
	_log(l_type, "%sbuild_version=%lu", pfx, build_version);
	_log(l_type, "%sversion_number=%.13f", pfx, version_number);
	/*  1: userID  */
	_log(l_type, "%saccountID=%lu", pfx, accountID);
	/*  2  */
	_log(l_type, "%srole=" I64u, pfx, role);
	/*  3  */
	_log(l_type, "%scachables: ", pfx);
	std::string cachables_n(pfx);
	cachables_n += "    ";
	cachables.Dump(l_type, cachables_n.c_str());
	_log(l_type, "%sservices: ", pfx);
	std::string services_n(pfx);
	services_n += "    ";
	services.Dump(l_type, services_n.c_str());
	/*  4: proxyNodeID  */
	_log(l_type, "%sproxyNodeID=%lu", pfx, proxyNodeID);
}

PyRepTuple *AuthenticationRsp::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(5);
	/*  0: serverinfo  */
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	dict1_0 = new PyRepString(project_version);
	dict1->items[
		new PyRepString("version.project")
	] = dict1_0;
	PyRep *dict1_1;
	dict1_1 = new PyRepInteger(build_version);
	dict1->items[
		new PyRepString("version.build")
	] = dict1_1;
	PyRep *dict1_2;
	dict1_2 = new PyRepReal(version_number);
	dict1->items[
		new PyRepString("version.number")
	] = dict1_2;
	tuple0->items[0] = dict1;
	
	/*  1: userID  */
	tuple0->items[1] = new PyRepInteger(accountID);
	/*  2  */
	tuple0->items[2] = new PyRepInteger(role);
	/*  3  */
	PyRep *ss_2;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	tuple3->items[0] = cachables.Clone();
	tuple3->items[1] = services.Clone();
	ss_2 = tuple3;
	
	tuple0->items[3] = new PyRepSubStream(ss_2);
	/*  4: proxyNodeID  */
	tuple0->items[4] = new PyRepInteger(proxyNodeID);
	res = tuple0;
	

	return(res);
}

PyRepTuple *AuthenticationRsp::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(5);
	/*  0: serverinfo  */
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	dict1_0 = new PyRepString(project_version);
	dict1->items[
		new PyRepString("version.project")
	] = dict1_0;
	PyRep *dict1_1;
	dict1_1 = new PyRepInteger(build_version);
	dict1->items[
		new PyRepString("version.build")
	] = dict1_1;
	PyRep *dict1_2;
	dict1_2 = new PyRepReal(version_number);
	dict1->items[
		new PyRepString("version.number")
	] = dict1_2;
	tuple0->items[0] = dict1;
	
	/*  1: userID  */
	tuple0->items[1] = new PyRepInteger(accountID);
	/*  2  */
	tuple0->items[2] = new PyRepInteger(role);
	/*  3  */
	PyRep *ss_2;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	
	PyRepDict *dict4 = new PyRepDict();
	dict4->items = cachables.items;
	cachables.items.clear();
	tuple3->items[0] = dict4;
	
	PyRepDict *dict5 = new PyRepDict();
	dict5->items = services.items;
	services.items.clear();
	tuple3->items[1] = dict5;
	ss_2 = tuple3;
	
	tuple0->items[3] = new PyRepSubStream(ss_2);
	/*  4: proxyNodeID  */
	tuple0->items[4] = new PyRepInteger(proxyNodeID);
	res = tuple0;
	

	return(res);
}

bool AuthenticationRsp::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool AuthenticationRsp::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 5) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: tuple0 is the wrong size: expected 5, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	/*  0: serverinfo  */
	if(!tuple0->items[0]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: dict1 is the wrong type: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	bool dict1_project_version = false;
	bool dict1_build_version = false;
	bool dict1_version_number = false;
	PyRepDict *dict1 = (PyRepDict *) tuple0->items[0];
	
	PyRepDict::iterator dict1_cur, dict1_end;
	dict1_cur = dict1->items.begin();
	dict1_end = dict1->items.end();
	for(; dict1_cur != dict1_end; dict1_cur++) {
		PyRep *key__ = dict1_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: a key in dict1 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "version.project") {
			dict1_project_version = true;
	if(!dict1_cur->second->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: project_version is not a string: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_2 = (PyRepString *) dict1_cur->second;
	project_version = string_2->value;
		} else
		if(key_string__->value == "version.build") {
			dict1_build_version = true;
	if(!dict1_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: build_version is not an int: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_3 = (PyRepInteger *) dict1_cur->second;
	if(int_3->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode AuthenticationRsp: truncating 64 bit into into 32 bit int for field build_version");
	}
	build_version = int_3->value;
		} else
		if(key_string__->value == "version.number") {
			dict1_version_number = true;
	if(!dict1_cur->second->CheckType(PyRep::Real)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: version_number is not a real: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepReal *real_4 = (PyRepReal *) dict1_cur->second;
	version_number = real_4->value;
		} else
		{
			_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: Unknown key string '%s' in dict1", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict1_project_version) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: Missing dict entry for 'project_version' in dict1");
		delete packet;
		return(false);
	}
	
	if(!dict1_build_version) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: Missing dict entry for 'build_version' in dict1");
		delete packet;
		return(false);
	}
	
	if(!dict1_version_number) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: Missing dict entry for 'version_number' in dict1");
		delete packet;
		return(false);
	}
	
	/*  1: userID  */
	if(!tuple0->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: accountID is not an int: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_5 = (PyRepInteger *) tuple0->items[1];
	if(int_5->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode AuthenticationRsp: truncating 64 bit into into 32 bit int for field accountID");
	}
	accountID = int_5->value;
	/*  2  */
	if(!tuple0->items[2]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: role is not an int: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_6 = (PyRepInteger *) tuple0->items[2];
	role = int64_6->value;
	/*  3  */
	if(!tuple0->items[3]->CheckType(PyRep::SubStream)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: ss_7 is not a substream: %s", tuple0->items[3]->TypeString());
		delete packet;
		return(false);
	}	
	PyRepSubStream *ss_7 = (PyRepSubStream *) tuple0->items[3];
	//make sure its decoded
	ss_7->DecodeData();
	if(ss_7->decoded == NULL) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: Unable to decode ss_7");
		delete packet;
		return(false);
	}
	
	if(!ss_7->decoded->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: tuple8 is the wrong type: %s", ss_7->decoded->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple8 = (PyRepTuple *) ss_7->decoded;
	if(tuple8->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: tuple8 is the wrong size: expected 2, but got %d", tuple8->items.size());
		delete packet;
		return(false);
	}

	if(!tuple8->items[0]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: cachables is not a dict: %s", tuple8->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepDict *list_cachables = (PyRepDict *) tuple8->items[0];	cachables.items = list_cachables->items;
	list_cachables->items.clear();
	
	if(!tuple8->items[1]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: services is not a dict: %s", tuple8->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepDict *list_services = (PyRepDict *) tuple8->items[1];	services.items = list_services->items;
	list_services->items.clear();
	
	/*  4: proxyNodeID  */
	if(!tuple0->items[4]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode AuthenticationRsp failed: proxyNodeID is not an int: %s", tuple0->items[4]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_9 = (PyRepInteger *) tuple0->items[4];
	if(int_9->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode AuthenticationRsp: truncating 64 bit into into 32 bit int for field proxyNodeID");
	}
	proxyNodeID = int_9->value;

	delete packet;
	return(true);
}

AuthenticationRsp *AuthenticationRsp::Clone() const {
	AuthenticationRsp *res = new AuthenticationRsp;
	res->CloneFrom(this);
	return(res);
}

void AuthenticationRsp::CloneFrom(const AuthenticationRsp *from) {
	/*  0: serverinfo  */
	project_version = from->project_version;
	build_version = from->build_version;
	version_number = from->version_number;
	/*  1: userID  */
	accountID = from->accountID;
	/*  2  */
	role = from->role;
	/*  3  */
	cachables.CloneFrom(&from->cachables);
	services.CloneFrom(&from->services);
	/*  4: proxyNodeID  */
	proxyNodeID = from->proxyNodeID;
	
}


RspPing::RspPing() {
	/*  0  */
	timestamp = 0;
}

RspPing::~RspPing() {
	/*  0  */
}

void RspPing::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sRspPing", pfx);
	/*  0  */
	_log(l_type, "%stimestamp=" I64u, pfx, timestamp);
}

PyRepTuple *RspPing::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(1);
	/*  0  */
	PyRep *ss_1;
	ss_1 = new PyRepInteger(timestamp);
	tuple0->items[0] = new PyRepSubStream(ss_1);
	res = tuple0;
	

	return(res);
}

PyRepTuple *RspPing::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(1);
	/*  0  */
	PyRep *ss_1;
	ss_1 = new PyRepInteger(timestamp);
	tuple0->items[0] = new PyRepSubStream(ss_1);
	res = tuple0;
	

	return(res);
}

bool RspPing::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool RspPing::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode RspPing failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 1) {
		_log(NET__PACKET_ERROR, "Decode RspPing failed: tuple0 is the wrong size: expected 1, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	/*  0  */
	if(!tuple0->items[0]->CheckType(PyRep::SubStream)) {
		_log(NET__PACKET_ERROR, "Decode RspPing failed: ss_1 is not a substream: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}	
	PyRepSubStream *ss_1 = (PyRepSubStream *) tuple0->items[0];
	//make sure its decoded
	ss_1->DecodeData();
	if(ss_1->decoded == NULL) {
		_log(NET__PACKET_ERROR, "Decode RspPing failed: Unable to decode ss_1");
		delete packet;
		return(false);
	}
	
	if(!ss_1->decoded->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode RspPing failed: timestamp is not an int: %s", ss_1->decoded->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_2 = (PyRepInteger *) ss_1->decoded;
	timestamp = int64_2->value;

	delete packet;
	return(true);
}

RspPing *RspPing::Clone() const {
	RspPing *res = new RspPing;
	res->CloneFrom(this);
	return(res);
}

void RspPing::CloneFrom(const RspPing *from) {
	/*  0  */
	timestamp = from->timestamp;
	
}


RspGetPostAuthenticationMessage::RspGetPostAuthenticationMessage() {
	/*  0  */
	/* object of type util.KeyVal */
	message = "";
	showStatusBar = 0;
	center = 0;
	showAddressBar = 0;
	url = "";
	showOptions = 0;
	showButtons = 0;
	showModal = 0;
}

RspGetPostAuthenticationMessage::~RspGetPostAuthenticationMessage() {
	/*  0  */
}

void RspGetPostAuthenticationMessage::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sRspGetPostAuthenticationMessage", pfx);
	/*  0  */
	_log(l_type, "%sObject of type util.KeyVal:", pfx);
	_log(l_type, "%smessage='%s'", pfx, message.c_str());
	_log(l_type, "%sshowStatusBar=%lu", pfx, showStatusBar);
	_log(l_type, "%scenter=%lu", pfx, center);
	_log(l_type, "%sshowAddressBar=%lu", pfx, showAddressBar);
	_log(l_type, "%surl='%s'", pfx, url.c_str());
	_log(l_type, "%sshowOptions=%lu", pfx, showOptions);
	_log(l_type, "%sshowButtons=%lu", pfx, showButtons);
	_log(l_type, "%sshowModal=%lu", pfx, showModal);
}

PyRepTuple *RspGetPostAuthenticationMessage::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(1);
	/*  0  */
	PyRep *ss_1;
	PyRep *args2;
	PyRepDict *dict3 = new PyRepDict();
	PyRep *dict3_0;
	dict3_0 = new PyRepString(message);
	dict3->items[
		new PyRepString("message")
	] = dict3_0;
	PyRep *dict3_1;
	PyRepDict *dict4 = new PyRepDict();
	PyRep *dict4_0;
	dict4_0 = new PyRepInteger(showStatusBar);
	dict4->items[
		new PyRepString("showStatusBar")
	] = dict4_0;
	PyRep *dict4_1;
	dict4_1 = new PyRepInteger(center);
	dict4->items[
		new PyRepString("center")
	] = dict4_1;
	PyRep *dict4_2;
	dict4_2 = new PyRepInteger(showAddressBar);
	dict4->items[
		new PyRepString("showAddressBar")
	] = dict4_2;
	PyRep *dict4_3;
	dict4_3 = new PyRepString(url);
	dict4->items[
		new PyRepString("url")
	] = dict4_3;
	PyRep *dict4_4;
	dict4_4 = new PyRepInteger(showOptions);
	dict4->items[
		new PyRepString("showOptions")
	] = dict4_4;
	PyRep *dict4_5;
	dict4_5 = new PyRepInteger(showButtons);
	dict4->items[
		new PyRepString("showButtons")
	] = dict4_5;
	PyRep *dict4_6;
	dict4_6 = new PyRepInteger(showModal);
	dict4->items[
		new PyRepString("showModal")
	] = dict4_6;
	dict3_1 = dict4;
	
	dict3->items[
		new PyRepString("args")
	] = dict3_1;
	args2 = dict3;
	
	ss_1 = new PyRepObject(
			"util.KeyVal",
			args2
		);
	
	tuple0->items[0] = new PyRepSubStream(ss_1);
	res = tuple0;
	

	return(res);
}

PyRepTuple *RspGetPostAuthenticationMessage::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(1);
	/*  0  */
	PyRep *ss_1;
	PyRep *args2;
	PyRepDict *dict3 = new PyRepDict();
	PyRep *dict3_0;
	dict3_0 = new PyRepString(message);
	dict3->items[
		new PyRepString("message")
	] = dict3_0;
	PyRep *dict3_1;
	PyRepDict *dict4 = new PyRepDict();
	PyRep *dict4_0;
	dict4_0 = new PyRepInteger(showStatusBar);
	dict4->items[
		new PyRepString("showStatusBar")
	] = dict4_0;
	PyRep *dict4_1;
	dict4_1 = new PyRepInteger(center);
	dict4->items[
		new PyRepString("center")
	] = dict4_1;
	PyRep *dict4_2;
	dict4_2 = new PyRepInteger(showAddressBar);
	dict4->items[
		new PyRepString("showAddressBar")
	] = dict4_2;
	PyRep *dict4_3;
	dict4_3 = new PyRepString(url);
	dict4->items[
		new PyRepString("url")
	] = dict4_3;
	PyRep *dict4_4;
	dict4_4 = new PyRepInteger(showOptions);
	dict4->items[
		new PyRepString("showOptions")
	] = dict4_4;
	PyRep *dict4_5;
	dict4_5 = new PyRepInteger(showButtons);
	dict4->items[
		new PyRepString("showButtons")
	] = dict4_5;
	PyRep *dict4_6;
	dict4_6 = new PyRepInteger(showModal);
	dict4->items[
		new PyRepString("showModal")
	] = dict4_6;
	dict3_1 = dict4;
	
	dict3->items[
		new PyRepString("args")
	] = dict3_1;
	args2 = dict3;
	
	ss_1 = new PyRepObject(
			"util.KeyVal",
			args2
		);
	
	tuple0->items[0] = new PyRepSubStream(ss_1);
	res = tuple0;
	

	return(res);
}

bool RspGetPostAuthenticationMessage::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool RspGetPostAuthenticationMessage::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 1) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: tuple0 is the wrong size: expected 1, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	/*  0  */
	if(!tuple0->items[0]->CheckType(PyRep::SubStream)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: ss_1 is not a substream: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}	
	PyRepSubStream *ss_1 = (PyRepSubStream *) tuple0->items[0];
	//make sure its decoded
	ss_1->DecodeData();
	if(ss_1->decoded == NULL) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Unable to decode ss_1");
		delete packet;
		return(false);
	}
	
	if(!ss_1->decoded->CheckType(PyRep::Object)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: obj_2 is the wrong type: %s", ss_1->decoded->TypeString());
		delete packet;
		return(false);
	}
	PyRepObject *obj_2 = (PyRepObject *) ss_1->decoded;
	
	if(obj_2->type != "util.KeyVal") {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: obj_2 is the wrong object type. Expected 'util.KeyVal', got '%s'", obj_2->type.c_str());
		delete packet;
		return(false);
	}
	
	if(!obj_2->arguments->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: dict3 is the wrong type: %s", obj_2->arguments->TypeString());
		delete packet;
		return(false);
	}
	bool dict3_message = false;
	bool dict3_args = false;
	PyRepDict *dict3 = (PyRepDict *) obj_2->arguments;
	
	PyRepDict::iterator dict3_cur, dict3_end;
	dict3_cur = dict3->items.begin();
	dict3_end = dict3->items.end();
	for(; dict3_cur != dict3_end; dict3_cur++) {
		PyRep *key__ = dict3_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: a key in dict3 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "message") {
			dict3_message = true;
	if(!dict3_cur->second->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: message is not a string: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_4 = (PyRepString *) dict3_cur->second;
	message = string_4->value;
		} else
		if(key_string__->value == "args") {
			dict3_args = true;
	if(!dict3_cur->second->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: dict5 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	bool dict5_showStatusBar = false;
	bool dict5_center = false;
	bool dict5_showAddressBar = false;
	bool dict5_url = false;
	bool dict5_showOptions = false;
	bool dict5_showButtons = false;
	bool dict5_showModal = false;
	PyRepDict *dict5 = (PyRepDict *) dict3_cur->second;
	
	PyRepDict::iterator dict5_cur, dict5_end;
	dict5_cur = dict5->items.begin();
	dict5_end = dict5->items.end();
	for(; dict5_cur != dict5_end; dict5_cur++) {
		PyRep *key__ = dict5_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: a key in dict5 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "showStatusBar") {
			dict5_showStatusBar = true;
	if(!dict5_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: showStatusBar is not an int: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_6 = (PyRepInteger *) dict5_cur->second;
	if(int_6->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode RspGetPostAuthenticationMessage: truncating 64 bit into into 32 bit int for field showStatusBar");
	}
	showStatusBar = int_6->value;
		} else
		if(key_string__->value == "center") {
			dict5_center = true;
	if(!dict5_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: center is not an int: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_7 = (PyRepInteger *) dict5_cur->second;
	if(int_7->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode RspGetPostAuthenticationMessage: truncating 64 bit into into 32 bit int for field center");
	}
	center = int_7->value;
		} else
		if(key_string__->value == "showAddressBar") {
			dict5_showAddressBar = true;
	if(!dict5_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: showAddressBar is not an int: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_8 = (PyRepInteger *) dict5_cur->second;
	if(int_8->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode RspGetPostAuthenticationMessage: truncating 64 bit into into 32 bit int for field showAddressBar");
	}
	showAddressBar = int_8->value;
		} else
		if(key_string__->value == "url") {
			dict5_url = true;
	if(!dict5_cur->second->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: url is not a string: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_9 = (PyRepString *) dict5_cur->second;
	url = string_9->value;
		} else
		if(key_string__->value == "showOptions") {
			dict5_showOptions = true;
	if(!dict5_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: showOptions is not an int: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_10 = (PyRepInteger *) dict5_cur->second;
	if(int_10->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode RspGetPostAuthenticationMessage: truncating 64 bit into into 32 bit int for field showOptions");
	}
	showOptions = int_10->value;
		} else
		if(key_string__->value == "showButtons") {
			dict5_showButtons = true;
	if(!dict5_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: showButtons is not an int: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_11 = (PyRepInteger *) dict5_cur->second;
	if(int_11->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode RspGetPostAuthenticationMessage: truncating 64 bit into into 32 bit int for field showButtons");
	}
	showButtons = int_11->value;
		} else
		if(key_string__->value == "showModal") {
			dict5_showModal = true;
	if(!dict5_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: showModal is not an int: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_12 = (PyRepInteger *) dict5_cur->second;
	if(int_12->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode RspGetPostAuthenticationMessage: truncating 64 bit into into 32 bit int for field showModal");
	}
	showModal = int_12->value;
		} else
		{
			_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Unknown key string '%s' in dict5", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict5_showStatusBar) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'showStatusBar' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_center) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'center' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_showAddressBar) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'showAddressBar' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_url) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'url' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_showOptions) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'showOptions' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_showButtons) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'showButtons' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_showModal) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'showModal' in dict5");
		delete packet;
		return(false);
	}
	
		} else
		{
			_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Unknown key string '%s' in dict3", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict3_message) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'message' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_args) {
		_log(NET__PACKET_ERROR, "Decode RspGetPostAuthenticationMessage failed: Missing dict entry for 'args' in dict3");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

RspGetPostAuthenticationMessage *RspGetPostAuthenticationMessage::Clone() const {
	RspGetPostAuthenticationMessage *res = new RspGetPostAuthenticationMessage;
	res->CloneFrom(this);
	return(res);
}

void RspGetPostAuthenticationMessage::CloneFrom(const RspGetPostAuthenticationMessage *from) {
	/*  0  */
	/* object of type util.KeyVal */
	message = from->message;
	showStatusBar = from->showStatusBar;
	center = from->center;
	showAddressBar = from->showAddressBar;
	url = from->url;
	showOptions = from->showOptions;
	showButtons = from->showButtons;
	showModal = from->showModal;
	
}



