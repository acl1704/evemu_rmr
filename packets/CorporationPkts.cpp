/*  EVEmu: EVE Online Server Emulator
  
  **************************************************************
  This file is automatically generated, DO NOT EDIT IT DIRECTLY.
  **************************************************************
  
  (If you need to customize an object, you must copy that object
  into another source file, and give up the ability to generate it)
  
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY except by those people which sell it, which
  are required to give you total support for your newly bought product;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/


#include <string>
#include "../packets/CorporationPkts.h"
#include "../common/PyRep.h"



	/*  this is not being used at the moment, more hrer for completeness  */

GetFactionInfoRsp::GetFactionInfoRsp() {
	/*  0: factionIDbyNPCCorpID: dict: corpID -> factionID     */
	/*  1: factionRegions: dict: factionID -> intlist  */
	/*  2: factionConstellations: dict: factionID -> intlist  */
	/*  3: factionSolarSystems: dict: factionID -> intlist  */
	/*  4: factionRaces: dict: factionID -> intlist  */
	/*  5: factionStationCount: dict: factionID -> count  */
	/*  6: factionSolarSystemCount: dict: factionID -> count  */
	/*  7: npcCorpInfo: dict: corpID -> util.Row  */
	/* 
        corporationName,
        corporationID,mainActivityID,secondaryActivityID,
        size,extent,solarSystemID,investorID1,investorShares1,investorID2,
        investorShares2,investorID3,investorShares3,investorID4,investorShares4,
        friendID,enemyID,publicShares,initialPrice,minSecurity,scattered,
        fringe,corridor,hub,border,factionID,sizeFactor,stationCount,
        stationSystemCount,stationID,ceoID,ceoName
     */
	npcCorpInfo = NULL;
}

GetFactionInfoRsp::~GetFactionInfoRsp() {
	/*  0: factionIDbyNPCCorpID: dict: corpID -> factionID     */
	/*  1: factionRegions: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>::iterator factionRegions_cur, factionRegions_end;
	//free any existing elements first
	factionRegions_cur = factionRegions.begin();
	factionRegions_end = factionRegions.end();
	for(; factionRegions_cur != factionRegions_end; factionRegions_cur++) {
		delete factionRegions_cur->second;
	}
	
	/*  2: factionConstellations: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>::iterator factionConstellations_cur, factionConstellations_end;
	//free any existing elements first
	factionConstellations_cur = factionConstellations.begin();
	factionConstellations_end = factionConstellations.end();
	for(; factionConstellations_cur != factionConstellations_end; factionConstellations_cur++) {
		delete factionConstellations_cur->second;
	}
	
	/*  3: factionSolarSystems: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>::iterator factionSolarSystems_cur, factionSolarSystems_end;
	//free any existing elements first
	factionSolarSystems_cur = factionSolarSystems.begin();
	factionSolarSystems_end = factionSolarSystems.end();
	for(; factionSolarSystems_cur != factionSolarSystems_end; factionSolarSystems_cur++) {
		delete factionSolarSystems_cur->second;
	}
	
	/*  4: factionRaces: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>::iterator factionRaces_cur, factionRaces_end;
	//free any existing elements first
	factionRaces_cur = factionRaces.begin();
	factionRaces_end = factionRaces.end();
	for(; factionRaces_cur != factionRaces_end; factionRaces_cur++) {
		delete factionRaces_cur->second;
	}
	
	/*  5: factionStationCount: dict: factionID -> count  */
	/*  6: factionSolarSystemCount: dict: factionID -> count  */
	/*  7: npcCorpInfo: dict: corpID -> util.Row  */
	/* 
        corporationName,
        corporationID,mainActivityID,secondaryActivityID,
        size,extent,solarSystemID,investorID1,investorShares1,investorID2,
        investorShares2,investorID3,investorShares3,investorID4,investorShares4,
        friendID,enemyID,publicShares,initialPrice,minSecurity,scattered,
        fringe,corridor,hub,border,factionID,sizeFactor,stationCount,
        stationSystemCount,stationID,ceoID,ceoName
     */
	delete npcCorpInfo;
}

void GetFactionInfoRsp::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sGetFactionInfoRsp", pfx);
	/*  0: factionIDbyNPCCorpID: dict: corpID -> factionID     */
	_log(l_type, "%sfactionIDbyNPCCorpID: Dictionaty with %d enetires", pfx, factionIDbyNPCCorpID.size());
	std::map<uint32, uint32>::const_iterator factionIDbyNPCCorpID_cur, factionIDbyNPCCorpID_end;
	factionIDbyNPCCorpID_cur = factionIDbyNPCCorpID.begin();
	factionIDbyNPCCorpID_end = factionIDbyNPCCorpID.end();
	for(; factionIDbyNPCCorpID_cur != factionIDbyNPCCorpID_end; factionIDbyNPCCorpID_cur++) {
		//total crap casting here since we do not know the correct printf format
		_log(l_type, "%s   Key: %lu -> Value: %lu", pfx, uint32(factionIDbyNPCCorpID_cur->first), uint32(factionIDbyNPCCorpID_cur->second));
	}
	
	/*  1: factionRegions: dict: factionID -> intlist  */
	_log(l_type, "%sfactionRegions: Dictionaty with %d enetires", pfx, factionRegions.size());
	std::map<uint32, PyRep *>::const_iterator factionRegions_cur, factionRegions_end;
	factionRegions_cur = factionRegions.begin();
	factionRegions_end = factionRegions.end();
	for(; factionRegions_cur != factionRegions_end; factionRegions_cur++) {
		_log(l_type, "%s   Key: %lu", pfx, factionRegions_cur->first);
		std::string n(pfx);
		n += "        ";
		factionRegions_cur->second->Dump(stdout, n.c_str());
	}
	
	/*  2: factionConstellations: dict: factionID -> intlist  */
	_log(l_type, "%sfactionConstellations: Dictionaty with %d enetires", pfx, factionConstellations.size());
	std::map<uint32, PyRep *>::const_iterator factionConstellations_cur, factionConstellations_end;
	factionConstellations_cur = factionConstellations.begin();
	factionConstellations_end = factionConstellations.end();
	for(; factionConstellations_cur != factionConstellations_end; factionConstellations_cur++) {
		_log(l_type, "%s   Key: %lu", pfx, factionConstellations_cur->first);
		std::string n(pfx);
		n += "        ";
		factionConstellations_cur->second->Dump(stdout, n.c_str());
	}
	
	/*  3: factionSolarSystems: dict: factionID -> intlist  */
	_log(l_type, "%sfactionSolarSystems: Dictionaty with %d enetires", pfx, factionSolarSystems.size());
	std::map<uint32, PyRep *>::const_iterator factionSolarSystems_cur, factionSolarSystems_end;
	factionSolarSystems_cur = factionSolarSystems.begin();
	factionSolarSystems_end = factionSolarSystems.end();
	for(; factionSolarSystems_cur != factionSolarSystems_end; factionSolarSystems_cur++) {
		_log(l_type, "%s   Key: %lu", pfx, factionSolarSystems_cur->first);
		std::string n(pfx);
		n += "        ";
		factionSolarSystems_cur->second->Dump(stdout, n.c_str());
	}
	
	/*  4: factionRaces: dict: factionID -> intlist  */
	_log(l_type, "%sfactionRaces: Dictionaty with %d enetires", pfx, factionRaces.size());
	std::map<uint32, PyRep *>::const_iterator factionRaces_cur, factionRaces_end;
	factionRaces_cur = factionRaces.begin();
	factionRaces_end = factionRaces.end();
	for(; factionRaces_cur != factionRaces_end; factionRaces_cur++) {
		_log(l_type, "%s   Key: %lu", pfx, factionRaces_cur->first);
		std::string n(pfx);
		n += "        ";
		factionRaces_cur->second->Dump(stdout, n.c_str());
	}
	
	/*  5: factionStationCount: dict: factionID -> count  */
	_log(l_type, "%sfactionStationCount: Dictionaty with %d enetires", pfx, factionStationCount.size());
	std::map<uint32, uint32>::const_iterator factionStationCount_cur, factionStationCount_end;
	factionStationCount_cur = factionStationCount.begin();
	factionStationCount_end = factionStationCount.end();
	for(; factionStationCount_cur != factionStationCount_end; factionStationCount_cur++) {
		//total crap casting here since we do not know the correct printf format
		_log(l_type, "%s   Key: %lu -> Value: %lu", pfx, uint32(factionStationCount_cur->first), uint32(factionStationCount_cur->second));
	}
	
	/*  6: factionSolarSystemCount: dict: factionID -> count  */
	_log(l_type, "%sfactionSolarSystemCount: Dictionaty with %d enetires", pfx, factionSolarSystemCount.size());
	std::map<uint32, uint32>::const_iterator factionSolarSystemCount_cur, factionSolarSystemCount_end;
	factionSolarSystemCount_cur = factionSolarSystemCount.begin();
	factionSolarSystemCount_end = factionSolarSystemCount.end();
	for(; factionSolarSystemCount_cur != factionSolarSystemCount_end; factionSolarSystemCount_cur++) {
		//total crap casting here since we do not know the correct printf format
		_log(l_type, "%s   Key: %lu -> Value: %lu", pfx, uint32(factionSolarSystemCount_cur->first), uint32(factionSolarSystemCount_cur->second));
	}
	
	/*  7: npcCorpInfo: dict: corpID -> util.Row  */
	/* 
        corporationName,
        corporationID,mainActivityID,secondaryActivityID,
        size,extent,solarSystemID,investorID1,investorShares1,investorID2,
        investorShares2,investorID3,investorShares3,investorID4,investorShares4,
        friendID,enemyID,publicShares,initialPrice,minSecurity,scattered,
        fringe,corridor,hub,border,factionID,sizeFactor,stationCount,
        stationSystemCount,stationID,ceoID,ceoName
     */
	_log(l_type, "%snpcCorpInfo:", pfx);
	std::string npcCorpInfo_n(pfx);
	npcCorpInfo_n += "    ";
	if(npcCorpInfo == NULL) {
		_log(l_type, "%sERROR: NULL REP!", npcCorpInfo_n.c_str());
	} else {
		npcCorpInfo->Dump(l_type, npcCorpInfo_n.c_str());
	}
}

PyRepTuple *GetFactionInfoRsp::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(8);
	/*  0: factionIDbyNPCCorpID: dict: corpID -> factionID     */
	
	PyRepDict *dict1 = new PyRepDict();
	std::map<uint32, uint32>::iterator factionIDbyNPCCorpID_cur, factionIDbyNPCCorpID_end;
	factionIDbyNPCCorpID_cur = factionIDbyNPCCorpID.begin();
	factionIDbyNPCCorpID_end = factionIDbyNPCCorpID.end();
	for(; factionIDbyNPCCorpID_cur != factionIDbyNPCCorpID_end; factionIDbyNPCCorpID_cur++) {
		dict1->items[
			new PyRepInteger(factionIDbyNPCCorpID_cur->first)
		] = new PyRepInteger(factionIDbyNPCCorpID_cur->second);
	}
	tuple0->items[0] = dict1;
	
	/*  1: factionRegions: dict: factionID -> intlist  */
	
	PyRepDict *dict2 = new PyRepDict();
	std::map<uint32, PyRep *>::iterator factionRegions_cur, factionRegions_end;
	factionRegions_cur = factionRegions.begin();
	factionRegions_end = factionRegions.end();
	for(; factionRegions_cur != factionRegions_end; factionRegions_cur++) {
		dict2->items[
			new PyRepInteger(factionRegions_cur->first)
		] = factionRegions_cur->second->Clone();
	}
	tuple0->items[1] = dict2;
	
	/*  2: factionConstellations: dict: factionID -> intlist  */
	
	PyRepDict *dict3 = new PyRepDict();
	std::map<uint32, PyRep *>::iterator factionConstellations_cur, factionConstellations_end;
	factionConstellations_cur = factionConstellations.begin();
	factionConstellations_end = factionConstellations.end();
	for(; factionConstellations_cur != factionConstellations_end; factionConstellations_cur++) {
		dict3->items[
			new PyRepInteger(factionConstellations_cur->first)
		] = factionConstellations_cur->second->Clone();
	}
	tuple0->items[2] = dict3;
	
	/*  3: factionSolarSystems: dict: factionID -> intlist  */
	
	PyRepDict *dict4 = new PyRepDict();
	std::map<uint32, PyRep *>::iterator factionSolarSystems_cur, factionSolarSystems_end;
	factionSolarSystems_cur = factionSolarSystems.begin();
	factionSolarSystems_end = factionSolarSystems.end();
	for(; factionSolarSystems_cur != factionSolarSystems_end; factionSolarSystems_cur++) {
		dict4->items[
			new PyRepInteger(factionSolarSystems_cur->first)
		] = factionSolarSystems_cur->second->Clone();
	}
	tuple0->items[3] = dict4;
	
	/*  4: factionRaces: dict: factionID -> intlist  */
	
	PyRepDict *dict5 = new PyRepDict();
	std::map<uint32, PyRep *>::iterator factionRaces_cur, factionRaces_end;
	factionRaces_cur = factionRaces.begin();
	factionRaces_end = factionRaces.end();
	for(; factionRaces_cur != factionRaces_end; factionRaces_cur++) {
		dict5->items[
			new PyRepInteger(factionRaces_cur->first)
		] = factionRaces_cur->second->Clone();
	}
	tuple0->items[4] = dict5;
	
	/*  5: factionStationCount: dict: factionID -> count  */
	
	PyRepDict *dict6 = new PyRepDict();
	std::map<uint32, uint32>::iterator factionStationCount_cur, factionStationCount_end;
	factionStationCount_cur = factionStationCount.begin();
	factionStationCount_end = factionStationCount.end();
	for(; factionStationCount_cur != factionStationCount_end; factionStationCount_cur++) {
		dict6->items[
			new PyRepInteger(factionStationCount_cur->first)
		] = new PyRepInteger(factionStationCount_cur->second);
	}
	tuple0->items[5] = dict6;
	
	/*  6: factionSolarSystemCount: dict: factionID -> count  */
	
	PyRepDict *dict7 = new PyRepDict();
	std::map<uint32, uint32>::iterator factionSolarSystemCount_cur, factionSolarSystemCount_end;
	factionSolarSystemCount_cur = factionSolarSystemCount.begin();
	factionSolarSystemCount_end = factionSolarSystemCount.end();
	for(; factionSolarSystemCount_cur != factionSolarSystemCount_end; factionSolarSystemCount_cur++) {
		dict7->items[
			new PyRepInteger(factionSolarSystemCount_cur->first)
		] = new PyRepInteger(factionSolarSystemCount_cur->second);
	}
	tuple0->items[6] = dict7;
	
	/*  7: npcCorpInfo: dict: corpID -> util.Row  */
	/* 
        corporationName,
        corporationID,mainActivityID,secondaryActivityID,
        size,extent,solarSystemID,investorID1,investorShares1,investorID2,
        investorShares2,investorID3,investorShares3,investorID4,investorShares4,
        friendID,enemyID,publicShares,initialPrice,minSecurity,scattered,
        fringe,corridor,hub,border,factionID,sizeFactor,stationCount,
        stationSystemCount,stationID,ceoID,ceoName
     */
	if(npcCorpInfo == NULL) {
		_log(NET__PACKET_ERROR, "Encode GetFactionInfoRsp: npcCorpInfo is NULL! hacking in a PyRepNone");
		npcCorpInfo = new PyRepNone();
	}
	tuple0->items[7] = npcCorpInfo->Clone();
	res = tuple0;
	

	return(res);
}

PyRepTuple *GetFactionInfoRsp::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(8);
	/*  0: factionIDbyNPCCorpID: dict: corpID -> factionID     */
	
	PyRepDict *dict1 = new PyRepDict();
	std::map<uint32, uint32>::iterator factionIDbyNPCCorpID_cur, factionIDbyNPCCorpID_end;
	factionIDbyNPCCorpID_cur = factionIDbyNPCCorpID.begin();
	factionIDbyNPCCorpID_end = factionIDbyNPCCorpID.end();
	for(; factionIDbyNPCCorpID_cur != factionIDbyNPCCorpID_end; factionIDbyNPCCorpID_cur++) {
		dict1->items[
			new PyRepInteger(factionIDbyNPCCorpID_cur->first)
		] = new PyRepInteger(factionIDbyNPCCorpID_cur->second);
	}
	tuple0->items[0] = dict1;
	
	/*  1: factionRegions: dict: factionID -> intlist  */
	
	PyRepDict *dict2 = new PyRepDict();
	std::map<uint32, PyRep *>::iterator factionRegions_cur, factionRegions_end;
	factionRegions_cur = factionRegions.begin();
	factionRegions_end = factionRegions.end();
	for(; factionRegions_cur != factionRegions_end; factionRegions_cur++) {
		dict2->items[
			new PyRepInteger(factionRegions_cur->first)
		] = factionRegions_cur->second;
	}
	factionRegions.clear();
	tuple0->items[1] = dict2;
	
	/*  2: factionConstellations: dict: factionID -> intlist  */
	
	PyRepDict *dict3 = new PyRepDict();
	std::map<uint32, PyRep *>::iterator factionConstellations_cur, factionConstellations_end;
	factionConstellations_cur = factionConstellations.begin();
	factionConstellations_end = factionConstellations.end();
	for(; factionConstellations_cur != factionConstellations_end; factionConstellations_cur++) {
		dict3->items[
			new PyRepInteger(factionConstellations_cur->first)
		] = factionConstellations_cur->second;
	}
	factionConstellations.clear();
	tuple0->items[2] = dict3;
	
	/*  3: factionSolarSystems: dict: factionID -> intlist  */
	
	PyRepDict *dict4 = new PyRepDict();
	std::map<uint32, PyRep *>::iterator factionSolarSystems_cur, factionSolarSystems_end;
	factionSolarSystems_cur = factionSolarSystems.begin();
	factionSolarSystems_end = factionSolarSystems.end();
	for(; factionSolarSystems_cur != factionSolarSystems_end; factionSolarSystems_cur++) {
		dict4->items[
			new PyRepInteger(factionSolarSystems_cur->first)
		] = factionSolarSystems_cur->second;
	}
	factionSolarSystems.clear();
	tuple0->items[3] = dict4;
	
	/*  4: factionRaces: dict: factionID -> intlist  */
	
	PyRepDict *dict5 = new PyRepDict();
	std::map<uint32, PyRep *>::iterator factionRaces_cur, factionRaces_end;
	factionRaces_cur = factionRaces.begin();
	factionRaces_end = factionRaces.end();
	for(; factionRaces_cur != factionRaces_end; factionRaces_cur++) {
		dict5->items[
			new PyRepInteger(factionRaces_cur->first)
		] = factionRaces_cur->second;
	}
	factionRaces.clear();
	tuple0->items[4] = dict5;
	
	/*  5: factionStationCount: dict: factionID -> count  */
	
	PyRepDict *dict6 = new PyRepDict();
	std::map<uint32, uint32>::iterator factionStationCount_cur, factionStationCount_end;
	factionStationCount_cur = factionStationCount.begin();
	factionStationCount_end = factionStationCount.end();
	for(; factionStationCount_cur != factionStationCount_end; factionStationCount_cur++) {
		dict6->items[
			new PyRepInteger(factionStationCount_cur->first)
		] = new PyRepInteger(factionStationCount_cur->second);
	}
	tuple0->items[5] = dict6;
	
	/*  6: factionSolarSystemCount: dict: factionID -> count  */
	
	PyRepDict *dict7 = new PyRepDict();
	std::map<uint32, uint32>::iterator factionSolarSystemCount_cur, factionSolarSystemCount_end;
	factionSolarSystemCount_cur = factionSolarSystemCount.begin();
	factionSolarSystemCount_end = factionSolarSystemCount.end();
	for(; factionSolarSystemCount_cur != factionSolarSystemCount_end; factionSolarSystemCount_cur++) {
		dict7->items[
			new PyRepInteger(factionSolarSystemCount_cur->first)
		] = new PyRepInteger(factionSolarSystemCount_cur->second);
	}
	tuple0->items[6] = dict7;
	
	/*  7: npcCorpInfo: dict: corpID -> util.Row  */
	/* 
        corporationName,
        corporationID,mainActivityID,secondaryActivityID,
        size,extent,solarSystemID,investorID1,investorShares1,investorID2,
        investorShares2,investorID3,investorShares3,investorID4,investorShares4,
        friendID,enemyID,publicShares,initialPrice,minSecurity,scattered,
        fringe,corridor,hub,border,factionID,sizeFactor,stationCount,
        stationSystemCount,stationID,ceoID,ceoName
     */
	if(npcCorpInfo == NULL) {
		_log(NET__PACKET_ERROR, "Encode GetFactionInfoRsp: npcCorpInfo is NULL! hacking in a PyRepNone");
		npcCorpInfo = new PyRepNone();
	}
	tuple0->items[7] = npcCorpInfo;
	npcCorpInfo = NULL;
	res = tuple0;
	

	return(res);
}

bool GetFactionInfoRsp::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool GetFactionInfoRsp::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 8) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: tuple0 is the wrong size: expected 8, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	/*  0: factionIDbyNPCCorpID: dict: corpID -> factionID     */
	if(!tuple0->items[0]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: factionIDbyNPCCorpID is not a dict: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	factionIDbyNPCCorpID.clear();
	PyRepDict *dict_1 = (PyRepDict *) tuple0->items[0];
	PyRepDict::iterator factionIDbyNPCCorpID_cur, factionIDbyNPCCorpID_end;
	factionIDbyNPCCorpID_cur = dict_1->items.begin();
	factionIDbyNPCCorpID_end = dict_1->items.end();
	int factionIDbyNPCCorpID_index;
	for(factionIDbyNPCCorpID_index = 0; factionIDbyNPCCorpID_cur != factionIDbyNPCCorpID_end; factionIDbyNPCCorpID_cur++, factionIDbyNPCCorpID_index++) {
		if(!factionIDbyNPCCorpID_cur->first->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Key %d in dict factionIDbyNPCCorpID is not Integer: %s", factionIDbyNPCCorpID_index, factionIDbyNPCCorpID_cur->first->TypeString());
			delete packet;
			return(false);
		}
		if(!factionIDbyNPCCorpID_cur->second->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Value %d in dict factionIDbyNPCCorpID is not Integer: %s", factionIDbyNPCCorpID_index, factionIDbyNPCCorpID_cur->second->TypeString());
			delete packet;
			return(false);
		}
		PyRepInteger *k = (PyRepInteger *) factionIDbyNPCCorpID_cur->first;
		PyRepInteger *v = (PyRepInteger *) factionIDbyNPCCorpID_cur->second;
		factionIDbyNPCCorpID[k->value] = v->value;
	}
	
	/*  1: factionRegions: dict: factionID -> intlist  */
	if(!tuple0->items[1]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: factionRegions is not a dict: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	factionRegions.clear();
	PyRepDict *dict_2 = (PyRepDict *) tuple0->items[1];
	PyRepDict::iterator factionRegions_cur, factionRegions_end;
	factionRegions_cur = dict_2->items.begin();
	factionRegions_end = dict_2->items.end();
	int factionRegions_index;
	for(factionRegions_index = 0; factionRegions_cur != factionRegions_end; factionRegions_cur++, factionRegions_index++) {
		if(!factionRegions_cur->first->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Key %d in dict factionRegions is not an integer: %s", factionRegions_index, factionRegions_cur->first->TypeString());
			delete packet;
			return(false);
		}
		PyRepInteger *k = (PyRepInteger *) factionRegions_cur->first;
		if(k->value > 0xFFFFFFFFLL) {
			_log(NET__PACKET_WARNING, "Decode GetFactionInfoRsp: truncating 64 bit into into 32 bit int in key of entry %d in field factionRegions", factionRegions_index);
		}
		factionRegions[k->value] = factionRegions_cur->second->Clone();
	}
	
	/*  2: factionConstellations: dict: factionID -> intlist  */
	if(!tuple0->items[2]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: factionConstellations is not a dict: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	factionConstellations.clear();
	PyRepDict *dict_3 = (PyRepDict *) tuple0->items[2];
	PyRepDict::iterator factionConstellations_cur, factionConstellations_end;
	factionConstellations_cur = dict_3->items.begin();
	factionConstellations_end = dict_3->items.end();
	int factionConstellations_index;
	for(factionConstellations_index = 0; factionConstellations_cur != factionConstellations_end; factionConstellations_cur++, factionConstellations_index++) {
		if(!factionConstellations_cur->first->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Key %d in dict factionConstellations is not an integer: %s", factionConstellations_index, factionConstellations_cur->first->TypeString());
			delete packet;
			return(false);
		}
		PyRepInteger *k = (PyRepInteger *) factionConstellations_cur->first;
		if(k->value > 0xFFFFFFFFLL) {
			_log(NET__PACKET_WARNING, "Decode GetFactionInfoRsp: truncating 64 bit into into 32 bit int in key of entry %d in field factionConstellations", factionConstellations_index);
		}
		factionConstellations[k->value] = factionConstellations_cur->second->Clone();
	}
	
	/*  3: factionSolarSystems: dict: factionID -> intlist  */
	if(!tuple0->items[3]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: factionSolarSystems is not a dict: %s", tuple0->items[3]->TypeString());
		delete packet;
		return(false);
	}
	factionSolarSystems.clear();
	PyRepDict *dict_4 = (PyRepDict *) tuple0->items[3];
	PyRepDict::iterator factionSolarSystems_cur, factionSolarSystems_end;
	factionSolarSystems_cur = dict_4->items.begin();
	factionSolarSystems_end = dict_4->items.end();
	int factionSolarSystems_index;
	for(factionSolarSystems_index = 0; factionSolarSystems_cur != factionSolarSystems_end; factionSolarSystems_cur++, factionSolarSystems_index++) {
		if(!factionSolarSystems_cur->first->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Key %d in dict factionSolarSystems is not an integer: %s", factionSolarSystems_index, factionSolarSystems_cur->first->TypeString());
			delete packet;
			return(false);
		}
		PyRepInteger *k = (PyRepInteger *) factionSolarSystems_cur->first;
		if(k->value > 0xFFFFFFFFLL) {
			_log(NET__PACKET_WARNING, "Decode GetFactionInfoRsp: truncating 64 bit into into 32 bit int in key of entry %d in field factionSolarSystems", factionSolarSystems_index);
		}
		factionSolarSystems[k->value] = factionSolarSystems_cur->second->Clone();
	}
	
	/*  4: factionRaces: dict: factionID -> intlist  */
	if(!tuple0->items[4]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: factionRaces is not a dict: %s", tuple0->items[4]->TypeString());
		delete packet;
		return(false);
	}
	factionRaces.clear();
	PyRepDict *dict_5 = (PyRepDict *) tuple0->items[4];
	PyRepDict::iterator factionRaces_cur, factionRaces_end;
	factionRaces_cur = dict_5->items.begin();
	factionRaces_end = dict_5->items.end();
	int factionRaces_index;
	for(factionRaces_index = 0; factionRaces_cur != factionRaces_end; factionRaces_cur++, factionRaces_index++) {
		if(!factionRaces_cur->first->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Key %d in dict factionRaces is not an integer: %s", factionRaces_index, factionRaces_cur->first->TypeString());
			delete packet;
			return(false);
		}
		PyRepInteger *k = (PyRepInteger *) factionRaces_cur->first;
		if(k->value > 0xFFFFFFFFLL) {
			_log(NET__PACKET_WARNING, "Decode GetFactionInfoRsp: truncating 64 bit into into 32 bit int in key of entry %d in field factionRaces", factionRaces_index);
		}
		factionRaces[k->value] = factionRaces_cur->second->Clone();
	}
	
	/*  5: factionStationCount: dict: factionID -> count  */
	if(!tuple0->items[5]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: factionStationCount is not a dict: %s", tuple0->items[5]->TypeString());
		delete packet;
		return(false);
	}
	factionStationCount.clear();
	PyRepDict *dict_6 = (PyRepDict *) tuple0->items[5];
	PyRepDict::iterator factionStationCount_cur, factionStationCount_end;
	factionStationCount_cur = dict_6->items.begin();
	factionStationCount_end = dict_6->items.end();
	int factionStationCount_index;
	for(factionStationCount_index = 0; factionStationCount_cur != factionStationCount_end; factionStationCount_cur++, factionStationCount_index++) {
		if(!factionStationCount_cur->first->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Key %d in dict factionStationCount is not Integer: %s", factionStationCount_index, factionStationCount_cur->first->TypeString());
			delete packet;
			return(false);
		}
		if(!factionStationCount_cur->second->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Value %d in dict factionStationCount is not Integer: %s", factionStationCount_index, factionStationCount_cur->second->TypeString());
			delete packet;
			return(false);
		}
		PyRepInteger *k = (PyRepInteger *) factionStationCount_cur->first;
		PyRepInteger *v = (PyRepInteger *) factionStationCount_cur->second;
		factionStationCount[k->value] = v->value;
	}
	
	/*  6: factionSolarSystemCount: dict: factionID -> count  */
	if(!tuple0->items[6]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: factionSolarSystemCount is not a dict: %s", tuple0->items[6]->TypeString());
		delete packet;
		return(false);
	}
	factionSolarSystemCount.clear();
	PyRepDict *dict_7 = (PyRepDict *) tuple0->items[6];
	PyRepDict::iterator factionSolarSystemCount_cur, factionSolarSystemCount_end;
	factionSolarSystemCount_cur = dict_7->items.begin();
	factionSolarSystemCount_end = dict_7->items.end();
	int factionSolarSystemCount_index;
	for(factionSolarSystemCount_index = 0; factionSolarSystemCount_cur != factionSolarSystemCount_end; factionSolarSystemCount_cur++, factionSolarSystemCount_index++) {
		if(!factionSolarSystemCount_cur->first->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Key %d in dict factionSolarSystemCount is not Integer: %s", factionSolarSystemCount_index, factionSolarSystemCount_cur->first->TypeString());
			delete packet;
			return(false);
		}
		if(!factionSolarSystemCount_cur->second->CheckType(PyRep::Integer)) {
			_log(NET__PACKET_ERROR, "Decode GetFactionInfoRsp failed: Value %d in dict factionSolarSystemCount is not Integer: %s", factionSolarSystemCount_index, factionSolarSystemCount_cur->second->TypeString());
			delete packet;
			return(false);
		}
		PyRepInteger *k = (PyRepInteger *) factionSolarSystemCount_cur->first;
		PyRepInteger *v = (PyRepInteger *) factionSolarSystemCount_cur->second;
		factionSolarSystemCount[k->value] = v->value;
	}
	
	/*  7: npcCorpInfo: dict: corpID -> util.Row  */
	/* 
        corporationName,
        corporationID,mainActivityID,secondaryActivityID,
        size,extent,solarSystemID,investorID1,investorShares1,investorID2,
        investorShares2,investorID3,investorShares3,investorID4,investorShares4,
        friendID,enemyID,publicShares,initialPrice,minSecurity,scattered,
        fringe,corridor,hub,border,factionID,sizeFactor,stationCount,
        stationSystemCount,stationID,ceoID,ceoName
     */
	delete npcCorpInfo;
	npcCorpInfo = tuple0->items[7];
	tuple0->items[7] = NULL;
	

	delete packet;
	return(true);
}

GetFactionInfoRsp *GetFactionInfoRsp::Clone() const {
	GetFactionInfoRsp *res = new GetFactionInfoRsp;
	res->CloneFrom(this);
	return(res);
}

void GetFactionInfoRsp::CloneFrom(const GetFactionInfoRsp *from) {
	/*  0: factionIDbyNPCCorpID: dict: corpID -> factionID     */
	factionIDbyNPCCorpID = from->factionIDbyNPCCorpID;
	/*  1: factionRegions: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>::const_iterator factionRegions_cur, factionRegions_end;
	//free any existing elements first
	factionRegions_cur = factionRegions.begin();
	factionRegions_end = factionRegions.end();
	for(; factionRegions_cur != factionRegions_end; factionRegions_cur++) {
		delete factionRegions_cur->second;
	}
	factionRegions.clear();
	//now we can copy in the new ones...
	factionRegions_cur = from->factionRegions.begin();
	factionRegions_end = from->factionRegions.end();
	for(; factionRegions_cur != factionRegions_end; factionRegions_cur++) {
		factionRegions[factionRegions_cur->first] = factionRegions_cur->second->Clone();
	}
	
	/*  2: factionConstellations: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>::const_iterator factionConstellations_cur, factionConstellations_end;
	//free any existing elements first
	factionConstellations_cur = factionConstellations.begin();
	factionConstellations_end = factionConstellations.end();
	for(; factionConstellations_cur != factionConstellations_end; factionConstellations_cur++) {
		delete factionConstellations_cur->second;
	}
	factionConstellations.clear();
	//now we can copy in the new ones...
	factionConstellations_cur = from->factionConstellations.begin();
	factionConstellations_end = from->factionConstellations.end();
	for(; factionConstellations_cur != factionConstellations_end; factionConstellations_cur++) {
		factionConstellations[factionConstellations_cur->first] = factionConstellations_cur->second->Clone();
	}
	
	/*  3: factionSolarSystems: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>::const_iterator factionSolarSystems_cur, factionSolarSystems_end;
	//free any existing elements first
	factionSolarSystems_cur = factionSolarSystems.begin();
	factionSolarSystems_end = factionSolarSystems.end();
	for(; factionSolarSystems_cur != factionSolarSystems_end; factionSolarSystems_cur++) {
		delete factionSolarSystems_cur->second;
	}
	factionSolarSystems.clear();
	//now we can copy in the new ones...
	factionSolarSystems_cur = from->factionSolarSystems.begin();
	factionSolarSystems_end = from->factionSolarSystems.end();
	for(; factionSolarSystems_cur != factionSolarSystems_end; factionSolarSystems_cur++) {
		factionSolarSystems[factionSolarSystems_cur->first] = factionSolarSystems_cur->second->Clone();
	}
	
	/*  4: factionRaces: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>::const_iterator factionRaces_cur, factionRaces_end;
	//free any existing elements first
	factionRaces_cur = factionRaces.begin();
	factionRaces_end = factionRaces.end();
	for(; factionRaces_cur != factionRaces_end; factionRaces_cur++) {
		delete factionRaces_cur->second;
	}
	factionRaces.clear();
	//now we can copy in the new ones...
	factionRaces_cur = from->factionRaces.begin();
	factionRaces_end = from->factionRaces.end();
	for(; factionRaces_cur != factionRaces_end; factionRaces_cur++) {
		factionRaces[factionRaces_cur->first] = factionRaces_cur->second->Clone();
	}
	
	/*  5: factionStationCount: dict: factionID -> count  */
	factionStationCount = from->factionStationCount;
	/*  6: factionSolarSystemCount: dict: factionID -> count  */
	factionSolarSystemCount = from->factionSolarSystemCount;
	/*  7: npcCorpInfo: dict: corpID -> util.Row  */
	/* 
        corporationName,
        corporationID,mainActivityID,secondaryActivityID,
        size,extent,solarSystemID,investorID1,investorShares1,investorID2,
        investorShares2,investorID3,investorShares3,investorID4,investorShares4,
        friendID,enemyID,publicShares,initialPrice,minSecurity,scattered,
        fringe,corridor,hub,border,factionID,sizeFactor,stationCount,
        stationSystemCount,stationID,ceoID,ceoName
     */
	delete npcCorpInfo;
	if(from->npcCorpInfo == NULL) {
		npcCorpInfo = NULL;
	} else {
		npcCorpInfo = from->npcCorpInfo->Clone();
	}
	
}


Call_AddCorporation::Call_AddCorporation() {
	corpName = "";
	corpTicker = "";
	description = "";
	url = "";
	taxRate = 0.0;
	shape1 = NULL;
	shape2 = NULL;
	shape3 = NULL;
	color1 = NULL;
	color2 = NULL;
	color3 = NULL;
	unknown = NULL;
}

Call_AddCorporation::~Call_AddCorporation() {
	delete shape1;
	delete shape2;
	delete shape3;
	delete color1;
	delete color2;
	delete color3;
	delete unknown;
}

void Call_AddCorporation::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sCall_AddCorporation", pfx);
	_log(l_type, "%scorpName='%s'", pfx, corpName.c_str());
	_log(l_type, "%scorpTicker='%s'", pfx, corpTicker.c_str());
	_log(l_type, "%sdescription='%s'", pfx, description.c_str());
	_log(l_type, "%surl='%s'", pfx, url.c_str());
	_log(l_type, "%staxRate=%.13f", pfx, taxRate);
	_log(l_type, "%sshape1:", pfx);
	std::string shape1_n(pfx);
	shape1_n += "    ";
	if(shape1 == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape1_n.c_str());
	} else {
		shape1->Dump(l_type, shape1_n.c_str());
	}
	_log(l_type, "%sshape2:", pfx);
	std::string shape2_n(pfx);
	shape2_n += "    ";
	if(shape2 == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape2_n.c_str());
	} else {
		shape2->Dump(l_type, shape2_n.c_str());
	}
	_log(l_type, "%sshape3:", pfx);
	std::string shape3_n(pfx);
	shape3_n += "    ";
	if(shape3 == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape3_n.c_str());
	} else {
		shape3->Dump(l_type, shape3_n.c_str());
	}
	_log(l_type, "%scolor1:", pfx);
	std::string color1_n(pfx);
	color1_n += "    ";
	if(color1 == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color1_n.c_str());
	} else {
		color1->Dump(l_type, color1_n.c_str());
	}
	_log(l_type, "%scolor2:", pfx);
	std::string color2_n(pfx);
	color2_n += "    ";
	if(color2 == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color2_n.c_str());
	} else {
		color2->Dump(l_type, color2_n.c_str());
	}
	_log(l_type, "%scolor3:", pfx);
	std::string color3_n(pfx);
	color3_n += "    ";
	if(color3 == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color3_n.c_str());
	} else {
		color3->Dump(l_type, color3_n.c_str());
	}
	_log(l_type, "%sunknown:", pfx);
	std::string unknown_n(pfx);
	unknown_n += "    ";
	if(unknown == NULL) {
		_log(l_type, "%sERROR: NULL REP!", unknown_n.c_str());
	} else {
		unknown->Dump(l_type, unknown_n.c_str());
	}
}

PyRepTuple *Call_AddCorporation::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(12);
	tuple0->items[0] = new PyRepString(corpName);
	tuple0->items[1] = new PyRepString(corpTicker);
	tuple0->items[2] = new PyRepString(description);
	tuple0->items[3] = new PyRepString(url);
	tuple0->items[4] = new PyRepReal(taxRate);
	if(shape1 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: shape1 is NULL! hacking in a PyRepNone");
		shape1 = new PyRepNone();
	}
	tuple0->items[5] = shape1->Clone();
	if(shape2 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: shape2 is NULL! hacking in a PyRepNone");
		shape2 = new PyRepNone();
	}
	tuple0->items[6] = shape2->Clone();
	if(shape3 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: shape3 is NULL! hacking in a PyRepNone");
		shape3 = new PyRepNone();
	}
	tuple0->items[7] = shape3->Clone();
	if(color1 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: color1 is NULL! hacking in a PyRepNone");
		color1 = new PyRepNone();
	}
	tuple0->items[8] = color1->Clone();
	if(color2 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: color2 is NULL! hacking in a PyRepNone");
		color2 = new PyRepNone();
	}
	tuple0->items[9] = color2->Clone();
	if(color3 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: color3 is NULL! hacking in a PyRepNone");
		color3 = new PyRepNone();
	}
	tuple0->items[10] = color3->Clone();
	if(unknown == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: unknown is NULL! hacking in a PyRepNone");
		unknown = new PyRepNone();
	}
	tuple0->items[11] = unknown->Clone();
	res = tuple0;
	

	return(res);
}

PyRepTuple *Call_AddCorporation::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(12);
	tuple0->items[0] = new PyRepString(corpName);
	tuple0->items[1] = new PyRepString(corpTicker);
	tuple0->items[2] = new PyRepString(description);
	tuple0->items[3] = new PyRepString(url);
	tuple0->items[4] = new PyRepReal(taxRate);
	if(shape1 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: shape1 is NULL! hacking in a PyRepNone");
		shape1 = new PyRepNone();
	}
	tuple0->items[5] = shape1;
	shape1 = NULL;
	if(shape2 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: shape2 is NULL! hacking in a PyRepNone");
		shape2 = new PyRepNone();
	}
	tuple0->items[6] = shape2;
	shape2 = NULL;
	if(shape3 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: shape3 is NULL! hacking in a PyRepNone");
		shape3 = new PyRepNone();
	}
	tuple0->items[7] = shape3;
	shape3 = NULL;
	if(color1 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: color1 is NULL! hacking in a PyRepNone");
		color1 = new PyRepNone();
	}
	tuple0->items[8] = color1;
	color1 = NULL;
	if(color2 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: color2 is NULL! hacking in a PyRepNone");
		color2 = new PyRepNone();
	}
	tuple0->items[9] = color2;
	color2 = NULL;
	if(color3 == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: color3 is NULL! hacking in a PyRepNone");
		color3 = new PyRepNone();
	}
	tuple0->items[10] = color3;
	color3 = NULL;
	if(unknown == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_AddCorporation: unknown is NULL! hacking in a PyRepNone");
		unknown = new PyRepNone();
	}
	tuple0->items[11] = unknown;
	unknown = NULL;
	res = tuple0;
	

	return(res);
}

bool Call_AddCorporation::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Call_AddCorporation::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Call_AddCorporation failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 12) {
		_log(NET__PACKET_ERROR, "Decode Call_AddCorporation failed: tuple0 is the wrong size: expected 12, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Call_AddCorporation failed: corpName is not a string: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_1 = (PyRepString *) tuple0->items[0];
	corpName = string_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Call_AddCorporation failed: corpTicker is not a string: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_2 = (PyRepString *) tuple0->items[1];
	corpTicker = string_2->value;
	if(!tuple0->items[2]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Call_AddCorporation failed: description is not a string: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_3 = (PyRepString *) tuple0->items[2];
	description = string_3->value;
	if(!tuple0->items[3]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Call_AddCorporation failed: url is not a string: %s", tuple0->items[3]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_4 = (PyRepString *) tuple0->items[3];
	url = string_4->value;
	if(!tuple0->items[4]->CheckType(PyRep::Real)) {
		_log(NET__PACKET_ERROR, "Decode Call_AddCorporation failed: taxRate is not a real: %s", tuple0->items[4]->TypeString());
		delete packet;
		return(false);
	}
	PyRepReal *real_5 = (PyRepReal *) tuple0->items[4];
	taxRate = real_5->value;
	delete shape1;
	shape1 = tuple0->items[5];
	tuple0->items[5] = NULL;
	
	delete shape2;
	shape2 = tuple0->items[6];
	tuple0->items[6] = NULL;
	
	delete shape3;
	shape3 = tuple0->items[7];
	tuple0->items[7] = NULL;
	
	delete color1;
	color1 = tuple0->items[8];
	tuple0->items[8] = NULL;
	
	delete color2;
	color2 = tuple0->items[9];
	tuple0->items[9] = NULL;
	
	delete color3;
	color3 = tuple0->items[10];
	tuple0->items[10] = NULL;
	
	delete unknown;
	unknown = tuple0->items[11];
	tuple0->items[11] = NULL;
	

	delete packet;
	return(true);
}

Call_AddCorporation *Call_AddCorporation::Clone() const {
	Call_AddCorporation *res = new Call_AddCorporation;
	res->CloneFrom(this);
	return(res);
}

void Call_AddCorporation::CloneFrom(const Call_AddCorporation *from) {
	corpName = from->corpName;
	corpTicker = from->corpTicker;
	description = from->description;
	url = from->url;
	taxRate = from->taxRate;
	delete shape1;
	if(from->shape1 == NULL) {
		shape1 = NULL;
	} else {
		shape1 = from->shape1->Clone();
	}
	delete shape2;
	if(from->shape2 == NULL) {
		shape2 = NULL;
	} else {
		shape2 = from->shape2->Clone();
	}
	delete shape3;
	if(from->shape3 == NULL) {
		shape3 = NULL;
	} else {
		shape3 = from->shape3->Clone();
	}
	delete color1;
	if(from->color1 == NULL) {
		color1 = NULL;
	} else {
		color1 = from->color1->Clone();
	}
	delete color2;
	if(from->color2 == NULL) {
		color2 = NULL;
	} else {
		color2 = from->color2->Clone();
	}
	delete color3;
	if(from->color3 == NULL) {
		color3 = NULL;
	} else {
		color3 = from->color3->Clone();
	}
	delete unknown;
	if(from->unknown == NULL) {
		unknown = NULL;
	} else {
		unknown = from->unknown->Clone();
	}
	
}


Item_GetSuggestedTickerNames::Item_GetSuggestedTickerNames() {
	/* object of type util.KeyVal */
	tN = "";
}

Item_GetSuggestedTickerNames::~Item_GetSuggestedTickerNames() {
}

void Item_GetSuggestedTickerNames::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sItem_GetSuggestedTickerNames", pfx);
	_log(l_type, "%sObject of type util.KeyVal:", pfx);
	_log(l_type, "%stN='%s'", pfx, tN.c_str());
}

PyRepObject *Item_GetSuggestedTickerNames::Encode() {
	PyRepObject *res = NULL;
	PyRep *args0;
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	dict1_0 = new PyRepString(tN);
	dict1->items[
		new PyRepString("tickerName")
	] = dict1_0;
	args0 = dict1;
	
	res = new PyRepObject(
			"util.KeyVal",
			args0
		);
	

	return(res);
}

PyRepObject *Item_GetSuggestedTickerNames::FastEncode() {
	PyRepObject *res = NULL;
	PyRep *args0;
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	dict1_0 = new PyRepString(tN);
	dict1->items[
		new PyRepString("tickerName")
	] = dict1_0;
	args0 = dict1;
	
	res = new PyRepObject(
			"util.KeyVal",
			args0
		);
	

	return(res);
}

bool Item_GetSuggestedTickerNames::Decode(PyRepObject **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Item_GetSuggestedTickerNames::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Object)) {
		_log(NET__PACKET_ERROR, "Decode Item_GetSuggestedTickerNames failed: obj_0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepObject *obj_0 = (PyRepObject *) packet;
	
	if(obj_0->type != "util.KeyVal") {
		_log(NET__PACKET_ERROR, "Decode Item_GetSuggestedTickerNames failed: obj_0 is the wrong object type. Expected 'util.KeyVal', got '%s'", obj_0->type.c_str());
		delete packet;
		return(false);
	}
	
	if(!obj_0->arguments->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Item_GetSuggestedTickerNames failed: dict1 is the wrong type: %s", obj_0->arguments->TypeString());
		delete packet;
		return(false);
	}
	bool dict1_tN = false;
	PyRepDict *dict1 = (PyRepDict *) obj_0->arguments;
	
	PyRepDict::iterator dict1_cur, dict1_end;
	dict1_cur = dict1->items.begin();
	dict1_end = dict1->items.end();
	for(; dict1_cur != dict1_end; dict1_cur++) {
		PyRep *key__ = dict1_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Item_GetSuggestedTickerNames failed: a key in dict1 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "tickerName") {
			dict1_tN = true;
	if(!dict1_cur->second->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Item_GetSuggestedTickerNames failed: tN is not a string: %s", dict1_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_2 = (PyRepString *) dict1_cur->second;
	tN = string_2->value;
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Item_GetSuggestedTickerNames failed: Unknown key string '%s' in dict1", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict1_tN) {
		_log(NET__PACKET_ERROR, "Decode Item_GetSuggestedTickerNames failed: Missing dict entry for 'tN' in dict1");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

Item_GetSuggestedTickerNames *Item_GetSuggestedTickerNames::Clone() const {
	Item_GetSuggestedTickerNames *res = new Item_GetSuggestedTickerNames;
	res->CloneFrom(this);
	return(res);
}

void Item_GetSuggestedTickerNames::CloneFrom(const Item_GetSuggestedTickerNames *from) {
	/* object of type util.KeyVal */
	tN = from->tN;
	
}


Notify_OnCorporaionChanged::Notify_OnCorporaionChanged() {
	corpID = 0;
	corporationIDOld = NULL;
	corporationIDNew = 0;
	corporationNameOld = NULL;
	corporationNameNew = "";
	descriptionOld = NULL;
	descriptionNew = "";
	tickerNameOld = NULL;
	tickerNameNew = "";
	urlOld = NULL;
	urlNew = "";
	taxRateOld = NULL;
	taxRateNew = 0.0;
	minimumJoinStandingOld = NULL;
	minimumJoinStandingNew = 0.0;
	corporationTypeOld = NULL;
	corporationTypeNew = 0;
	hasPlayerPersonnelManagerOld = NULL;
	hasPlayerPersonnelManagerNew = 0;
	sendCharTerminationMessageOld = NULL;
	sendCharTerminationMessageNew = 0;
	creatorIDOld = NULL;
	creatorIDNew = 0;
	stationIDOld = NULL;
	stationIDNew = 0;
	raceIDOld = NULL;
	raceIDNew = NULL;
	allianceIDOld = NULL;
	allianceIDNew = NULL;
	sharesOld = NULL;
	sharesNew = 0;
	memberCountOld = NULL;
	memberCountNew = 0;
	memberLimitOld = NULL;
	memberLimitNew = 0;
	allowedMemberRaceIDsOld = NULL;
	allowedMemberRaceIDsNew = 0;
	graphicIDOld = NULL;
	graphicIDNew = 0;
	shape1Old = NULL;
	shape1New = NULL;
	shape2Old = NULL;
	shape2New = NULL;
	shape3Old = NULL;
	shape3New = NULL;
	color1Old = NULL;
	color1New = NULL;
	color2Old = NULL;
	color2New = NULL;
	color3Old = NULL;
	color3New = NULL;
	typefaceOld = NULL;
	typefaceNew = NULL;
	division1Old = NULL;
	division1New = NULL;
	division2Old = NULL;
	division2New = NULL;
	division3Old = NULL;
	division3New = NULL;
	division4Old = NULL;
	division4New = NULL;
	division5Old = NULL;
	division5New = NULL;
	division6Old = NULL;
	division6New = NULL;
	division7Old = NULL;
	division7New = NULL;
	deletedOld = NULL;
	deletedNew = 0;
	ceoIDOld = NULL;
	ceoIDNew = 0;
}

Notify_OnCorporaionChanged::~Notify_OnCorporaionChanged() {
	delete corporationIDOld;
	delete corporationNameOld;
	delete descriptionOld;
	delete tickerNameOld;
	delete urlOld;
	delete taxRateOld;
	delete minimumJoinStandingOld;
	delete corporationTypeOld;
	delete hasPlayerPersonnelManagerOld;
	delete sendCharTerminationMessageOld;
	delete creatorIDOld;
	delete stationIDOld;
	delete raceIDOld;
	delete raceIDNew;
	delete allianceIDOld;
	delete allianceIDNew;
	delete sharesOld;
	delete memberCountOld;
	delete memberLimitOld;
	delete allowedMemberRaceIDsOld;
	delete graphicIDOld;
	delete shape1Old;
	delete shape1New;
	delete shape2Old;
	delete shape2New;
	delete shape3Old;
	delete shape3New;
	delete color1Old;
	delete color1New;
	delete color2Old;
	delete color2New;
	delete color3Old;
	delete color3New;
	delete typefaceOld;
	delete typefaceNew;
	delete division1Old;
	delete division1New;
	delete division2Old;
	delete division2New;
	delete division3Old;
	delete division3New;
	delete division4Old;
	delete division4New;
	delete division5Old;
	delete division5New;
	delete division6Old;
	delete division6New;
	delete division7Old;
	delete division7New;
	delete deletedOld;
	delete ceoIDOld;
}

void Notify_OnCorporaionChanged::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_OnCorporaionChanged", pfx);
	_log(l_type, "%scorpID=%lu", pfx, corpID);
	_log(l_type, "%scorporationIDOld:", pfx);
	std::string corporationIDOld_n(pfx);
	corporationIDOld_n += "    ";
	if(corporationIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", corporationIDOld_n.c_str());
	} else {
		corporationIDOld->Dump(l_type, corporationIDOld_n.c_str());
	}
	_log(l_type, "%scorporationIDNew=%lu", pfx, corporationIDNew);
	_log(l_type, "%scorporationNameOld:", pfx);
	std::string corporationNameOld_n(pfx);
	corporationNameOld_n += "    ";
	if(corporationNameOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", corporationNameOld_n.c_str());
	} else {
		corporationNameOld->Dump(l_type, corporationNameOld_n.c_str());
	}
	_log(l_type, "%scorporationNameNew='%s'", pfx, corporationNameNew.c_str());
	_log(l_type, "%sdescriptionOld:", pfx);
	std::string descriptionOld_n(pfx);
	descriptionOld_n += "    ";
	if(descriptionOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", descriptionOld_n.c_str());
	} else {
		descriptionOld->Dump(l_type, descriptionOld_n.c_str());
	}
	_log(l_type, "%sdescriptionNew='%s'", pfx, descriptionNew.c_str());
	_log(l_type, "%stickerNameOld:", pfx);
	std::string tickerNameOld_n(pfx);
	tickerNameOld_n += "    ";
	if(tickerNameOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", tickerNameOld_n.c_str());
	} else {
		tickerNameOld->Dump(l_type, tickerNameOld_n.c_str());
	}
	_log(l_type, "%stickerNameNew='%s'", pfx, tickerNameNew.c_str());
	_log(l_type, "%surlOld:", pfx);
	std::string urlOld_n(pfx);
	urlOld_n += "    ";
	if(urlOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", urlOld_n.c_str());
	} else {
		urlOld->Dump(l_type, urlOld_n.c_str());
	}
	_log(l_type, "%surlNew='%s'", pfx, urlNew.c_str());
	_log(l_type, "%staxRateOld:", pfx);
	std::string taxRateOld_n(pfx);
	taxRateOld_n += "    ";
	if(taxRateOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", taxRateOld_n.c_str());
	} else {
		taxRateOld->Dump(l_type, taxRateOld_n.c_str());
	}
	_log(l_type, "%staxRateNew=%.13f", pfx, taxRateNew);
	_log(l_type, "%sminimumJoinStandingOld:", pfx);
	std::string minimumJoinStandingOld_n(pfx);
	minimumJoinStandingOld_n += "    ";
	if(minimumJoinStandingOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", minimumJoinStandingOld_n.c_str());
	} else {
		minimumJoinStandingOld->Dump(l_type, minimumJoinStandingOld_n.c_str());
	}
	_log(l_type, "%sminimumJoinStandingNew=%.13f", pfx, minimumJoinStandingNew);
	_log(l_type, "%scorporationTypeOld:", pfx);
	std::string corporationTypeOld_n(pfx);
	corporationTypeOld_n += "    ";
	if(corporationTypeOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", corporationTypeOld_n.c_str());
	} else {
		corporationTypeOld->Dump(l_type, corporationTypeOld_n.c_str());
	}
	_log(l_type, "%scorporationTypeNew=%lu", pfx, corporationTypeNew);
	_log(l_type, "%shasPlayerPersonnelManagerOld:", pfx);
	std::string hasPlayerPersonnelManagerOld_n(pfx);
	hasPlayerPersonnelManagerOld_n += "    ";
	if(hasPlayerPersonnelManagerOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", hasPlayerPersonnelManagerOld_n.c_str());
	} else {
		hasPlayerPersonnelManagerOld->Dump(l_type, hasPlayerPersonnelManagerOld_n.c_str());
	}
	_log(l_type, "%shasPlayerPersonnelManagerNew=%lu", pfx, hasPlayerPersonnelManagerNew);
	_log(l_type, "%ssendCharTerminationMessageOld:", pfx);
	std::string sendCharTerminationMessageOld_n(pfx);
	sendCharTerminationMessageOld_n += "    ";
	if(sendCharTerminationMessageOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", sendCharTerminationMessageOld_n.c_str());
	} else {
		sendCharTerminationMessageOld->Dump(l_type, sendCharTerminationMessageOld_n.c_str());
	}
	_log(l_type, "%ssendCharTerminationMessageNew=%lu", pfx, sendCharTerminationMessageNew);
	_log(l_type, "%screatorIDOld:", pfx);
	std::string creatorIDOld_n(pfx);
	creatorIDOld_n += "    ";
	if(creatorIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", creatorIDOld_n.c_str());
	} else {
		creatorIDOld->Dump(l_type, creatorIDOld_n.c_str());
	}
	_log(l_type, "%screatorIDNew=%lu", pfx, creatorIDNew);
	_log(l_type, "%sstationIDOld:", pfx);
	std::string stationIDOld_n(pfx);
	stationIDOld_n += "    ";
	if(stationIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", stationIDOld_n.c_str());
	} else {
		stationIDOld->Dump(l_type, stationIDOld_n.c_str());
	}
	_log(l_type, "%sstationIDNew=%lu", pfx, stationIDNew);
	_log(l_type, "%sraceIDOld:", pfx);
	std::string raceIDOld_n(pfx);
	raceIDOld_n += "    ";
	if(raceIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", raceIDOld_n.c_str());
	} else {
		raceIDOld->Dump(l_type, raceIDOld_n.c_str());
	}
	_log(l_type, "%sraceIDNew:", pfx);
	std::string raceIDNew_n(pfx);
	raceIDNew_n += "    ";
	if(raceIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", raceIDNew_n.c_str());
	} else {
		raceIDNew->Dump(l_type, raceIDNew_n.c_str());
	}
	_log(l_type, "%sallianceIDOld:", pfx);
	std::string allianceIDOld_n(pfx);
	allianceIDOld_n += "    ";
	if(allianceIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", allianceIDOld_n.c_str());
	} else {
		allianceIDOld->Dump(l_type, allianceIDOld_n.c_str());
	}
	_log(l_type, "%sallianceIDNew:", pfx);
	std::string allianceIDNew_n(pfx);
	allianceIDNew_n += "    ";
	if(allianceIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", allianceIDNew_n.c_str());
	} else {
		allianceIDNew->Dump(l_type, allianceIDNew_n.c_str());
	}
	_log(l_type, "%ssharesOld:", pfx);
	std::string sharesOld_n(pfx);
	sharesOld_n += "    ";
	if(sharesOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", sharesOld_n.c_str());
	} else {
		sharesOld->Dump(l_type, sharesOld_n.c_str());
	}
	_log(l_type, "%ssharesNew=" I64u, pfx, sharesNew);
	_log(l_type, "%smemberCountOld:", pfx);
	std::string memberCountOld_n(pfx);
	memberCountOld_n += "    ";
	if(memberCountOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", memberCountOld_n.c_str());
	} else {
		memberCountOld->Dump(l_type, memberCountOld_n.c_str());
	}
	_log(l_type, "%smemberCountNew=%lu", pfx, memberCountNew);
	_log(l_type, "%smemberLimitOld:", pfx);
	std::string memberLimitOld_n(pfx);
	memberLimitOld_n += "    ";
	if(memberLimitOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", memberLimitOld_n.c_str());
	} else {
		memberLimitOld->Dump(l_type, memberLimitOld_n.c_str());
	}
	_log(l_type, "%smemberLimitNew=%lu", pfx, memberLimitNew);
	_log(l_type, "%sallowedMemberRaceIDsOld:", pfx);
	std::string allowedMemberRaceIDsOld_n(pfx);
	allowedMemberRaceIDsOld_n += "    ";
	if(allowedMemberRaceIDsOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", allowedMemberRaceIDsOld_n.c_str());
	} else {
		allowedMemberRaceIDsOld->Dump(l_type, allowedMemberRaceIDsOld_n.c_str());
	}
	_log(l_type, "%sallowedMemberRaceIDsNew=%lu", pfx, allowedMemberRaceIDsNew);
	_log(l_type, "%sgraphicIDOld:", pfx);
	std::string graphicIDOld_n(pfx);
	graphicIDOld_n += "    ";
	if(graphicIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", graphicIDOld_n.c_str());
	} else {
		graphicIDOld->Dump(l_type, graphicIDOld_n.c_str());
	}
	_log(l_type, "%sgraphicIDNew=%lu", pfx, graphicIDNew);
	_log(l_type, "%sshape1Old:", pfx);
	std::string shape1Old_n(pfx);
	shape1Old_n += "    ";
	if(shape1Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape1Old_n.c_str());
	} else {
		shape1Old->Dump(l_type, shape1Old_n.c_str());
	}
	_log(l_type, "%sshape1New:", pfx);
	std::string shape1New_n(pfx);
	shape1New_n += "    ";
	if(shape1New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape1New_n.c_str());
	} else {
		shape1New->Dump(l_type, shape1New_n.c_str());
	}
	_log(l_type, "%sshape2Old:", pfx);
	std::string shape2Old_n(pfx);
	shape2Old_n += "    ";
	if(shape2Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape2Old_n.c_str());
	} else {
		shape2Old->Dump(l_type, shape2Old_n.c_str());
	}
	_log(l_type, "%sshape2New:", pfx);
	std::string shape2New_n(pfx);
	shape2New_n += "    ";
	if(shape2New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape2New_n.c_str());
	} else {
		shape2New->Dump(l_type, shape2New_n.c_str());
	}
	_log(l_type, "%sshape3Old:", pfx);
	std::string shape3Old_n(pfx);
	shape3Old_n += "    ";
	if(shape3Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape3Old_n.c_str());
	} else {
		shape3Old->Dump(l_type, shape3Old_n.c_str());
	}
	_log(l_type, "%sshape3New:", pfx);
	std::string shape3New_n(pfx);
	shape3New_n += "    ";
	if(shape3New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", shape3New_n.c_str());
	} else {
		shape3New->Dump(l_type, shape3New_n.c_str());
	}
	_log(l_type, "%scolor1Old:", pfx);
	std::string color1Old_n(pfx);
	color1Old_n += "    ";
	if(color1Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color1Old_n.c_str());
	} else {
		color1Old->Dump(l_type, color1Old_n.c_str());
	}
	_log(l_type, "%scolor1New:", pfx);
	std::string color1New_n(pfx);
	color1New_n += "    ";
	if(color1New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color1New_n.c_str());
	} else {
		color1New->Dump(l_type, color1New_n.c_str());
	}
	_log(l_type, "%scolor2Old:", pfx);
	std::string color2Old_n(pfx);
	color2Old_n += "    ";
	if(color2Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color2Old_n.c_str());
	} else {
		color2Old->Dump(l_type, color2Old_n.c_str());
	}
	_log(l_type, "%scolor2New:", pfx);
	std::string color2New_n(pfx);
	color2New_n += "    ";
	if(color2New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color2New_n.c_str());
	} else {
		color2New->Dump(l_type, color2New_n.c_str());
	}
	_log(l_type, "%scolor3Old:", pfx);
	std::string color3Old_n(pfx);
	color3Old_n += "    ";
	if(color3Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color3Old_n.c_str());
	} else {
		color3Old->Dump(l_type, color3Old_n.c_str());
	}
	_log(l_type, "%scolor3New:", pfx);
	std::string color3New_n(pfx);
	color3New_n += "    ";
	if(color3New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", color3New_n.c_str());
	} else {
		color3New->Dump(l_type, color3New_n.c_str());
	}
	_log(l_type, "%stypefaceOld:", pfx);
	std::string typefaceOld_n(pfx);
	typefaceOld_n += "    ";
	if(typefaceOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", typefaceOld_n.c_str());
	} else {
		typefaceOld->Dump(l_type, typefaceOld_n.c_str());
	}
	_log(l_type, "%stypefaceNew:", pfx);
	std::string typefaceNew_n(pfx);
	typefaceNew_n += "    ";
	if(typefaceNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", typefaceNew_n.c_str());
	} else {
		typefaceNew->Dump(l_type, typefaceNew_n.c_str());
	}
	_log(l_type, "%sdivision1Old:", pfx);
	std::string division1Old_n(pfx);
	division1Old_n += "    ";
	if(division1Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division1Old_n.c_str());
	} else {
		division1Old->Dump(l_type, division1Old_n.c_str());
	}
	_log(l_type, "%sdivision1New:", pfx);
	std::string division1New_n(pfx);
	division1New_n += "    ";
	if(division1New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division1New_n.c_str());
	} else {
		division1New->Dump(l_type, division1New_n.c_str());
	}
	_log(l_type, "%sdivision2Old:", pfx);
	std::string division2Old_n(pfx);
	division2Old_n += "    ";
	if(division2Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division2Old_n.c_str());
	} else {
		division2Old->Dump(l_type, division2Old_n.c_str());
	}
	_log(l_type, "%sdivision2New:", pfx);
	std::string division2New_n(pfx);
	division2New_n += "    ";
	if(division2New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division2New_n.c_str());
	} else {
		division2New->Dump(l_type, division2New_n.c_str());
	}
	_log(l_type, "%sdivision3Old:", pfx);
	std::string division3Old_n(pfx);
	division3Old_n += "    ";
	if(division3Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division3Old_n.c_str());
	} else {
		division3Old->Dump(l_type, division3Old_n.c_str());
	}
	_log(l_type, "%sdivision3New:", pfx);
	std::string division3New_n(pfx);
	division3New_n += "    ";
	if(division3New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division3New_n.c_str());
	} else {
		division3New->Dump(l_type, division3New_n.c_str());
	}
	_log(l_type, "%sdivision4Old:", pfx);
	std::string division4Old_n(pfx);
	division4Old_n += "    ";
	if(division4Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division4Old_n.c_str());
	} else {
		division4Old->Dump(l_type, division4Old_n.c_str());
	}
	_log(l_type, "%sdivision4New:", pfx);
	std::string division4New_n(pfx);
	division4New_n += "    ";
	if(division4New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division4New_n.c_str());
	} else {
		division4New->Dump(l_type, division4New_n.c_str());
	}
	_log(l_type, "%sdivision5Old:", pfx);
	std::string division5Old_n(pfx);
	division5Old_n += "    ";
	if(division5Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division5Old_n.c_str());
	} else {
		division5Old->Dump(l_type, division5Old_n.c_str());
	}
	_log(l_type, "%sdivision5New:", pfx);
	std::string division5New_n(pfx);
	division5New_n += "    ";
	if(division5New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division5New_n.c_str());
	} else {
		division5New->Dump(l_type, division5New_n.c_str());
	}
	_log(l_type, "%sdivision6Old:", pfx);
	std::string division6Old_n(pfx);
	division6Old_n += "    ";
	if(division6Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division6Old_n.c_str());
	} else {
		division6Old->Dump(l_type, division6Old_n.c_str());
	}
	_log(l_type, "%sdivision6New:", pfx);
	std::string division6New_n(pfx);
	division6New_n += "    ";
	if(division6New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division6New_n.c_str());
	} else {
		division6New->Dump(l_type, division6New_n.c_str());
	}
	_log(l_type, "%sdivision7Old:", pfx);
	std::string division7Old_n(pfx);
	division7Old_n += "    ";
	if(division7Old == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division7Old_n.c_str());
	} else {
		division7Old->Dump(l_type, division7Old_n.c_str());
	}
	_log(l_type, "%sdivision7New:", pfx);
	std::string division7New_n(pfx);
	division7New_n += "    ";
	if(division7New == NULL) {
		_log(l_type, "%sERROR: NULL REP!", division7New_n.c_str());
	} else {
		division7New->Dump(l_type, division7New_n.c_str());
	}
	_log(l_type, "%sdeletedOld:", pfx);
	std::string deletedOld_n(pfx);
	deletedOld_n += "    ";
	if(deletedOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", deletedOld_n.c_str());
	} else {
		deletedOld->Dump(l_type, deletedOld_n.c_str());
	}
	_log(l_type, "%sdeletedNew=%lu", pfx, deletedNew);
	_log(l_type, "%sceoIDOld:", pfx);
	std::string ceoIDOld_n(pfx);
	ceoIDOld_n += "    ";
	if(ceoIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", ceoIDOld_n.c_str());
	} else {
		ceoIDOld->Dump(l_type, ceoIDOld_n.c_str());
	}
	_log(l_type, "%sceoIDNew=%lu", pfx, ceoIDNew);
}

PyRepTuple *Notify_OnCorporaionChanged::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	tuple0->items[0] = new PyRepInteger(corpID);
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	if(corporationIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: corporationIDOld is NULL! hacking in a PyRepNone");
		corporationIDOld = new PyRepNone();
	}
	tuple2->items[0] = corporationIDOld->Clone();
	tuple2->items[1] = new PyRepInteger(corporationIDNew);
	dict1_0 = tuple2;
	
	dict1->items[
		new PyRepString("corporationID")
	] = dict1_0;
	PyRep *dict1_1;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	if(corporationNameOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: corporationNameOld is NULL! hacking in a PyRepNone");
		corporationNameOld = new PyRepNone();
	}
	tuple3->items[0] = corporationNameOld->Clone();
	tuple3->items[1] = new PyRepString(corporationNameNew);
	dict1_1 = tuple3;
	
	dict1->items[
		new PyRepString("corporationName")
	] = dict1_1;
	PyRep *dict1_2;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	if(descriptionOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: descriptionOld is NULL! hacking in a PyRepNone");
		descriptionOld = new PyRepNone();
	}
	tuple4->items[0] = descriptionOld->Clone();
	tuple4->items[1] = new PyRepString(descriptionNew);
	dict1_2 = tuple4;
	
	dict1->items[
		new PyRepString("description")
	] = dict1_2;
	PyRep *dict1_3;
	PyRepTuple *tuple5 = new PyRepTuple(2);
	if(tickerNameOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: tickerNameOld is NULL! hacking in a PyRepNone");
		tickerNameOld = new PyRepNone();
	}
	tuple5->items[0] = tickerNameOld->Clone();
	tuple5->items[1] = new PyRepString(tickerNameNew);
	dict1_3 = tuple5;
	
	dict1->items[
		new PyRepString("tickerName")
	] = dict1_3;
	PyRep *dict1_4;
	PyRepTuple *tuple6 = new PyRepTuple(2);
	if(urlOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: urlOld is NULL! hacking in a PyRepNone");
		urlOld = new PyRepNone();
	}
	tuple6->items[0] = urlOld->Clone();
	tuple6->items[1] = new PyRepString(urlNew);
	dict1_4 = tuple6;
	
	dict1->items[
		new PyRepString("url")
	] = dict1_4;
	PyRep *dict1_5;
	PyRepTuple *tuple7 = new PyRepTuple(2);
	if(taxRateOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: taxRateOld is NULL! hacking in a PyRepNone");
		taxRateOld = new PyRepNone();
	}
	tuple7->items[0] = taxRateOld->Clone();
	tuple7->items[1] = new PyRepReal(taxRateNew);
	dict1_5 = tuple7;
	
	dict1->items[
		new PyRepString("taxRate")
	] = dict1_5;
	PyRep *dict1_6;
	PyRepTuple *tuple8 = new PyRepTuple(2);
	if(minimumJoinStandingOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: minimumJoinStandingOld is NULL! hacking in a PyRepNone");
		minimumJoinStandingOld = new PyRepNone();
	}
	tuple8->items[0] = minimumJoinStandingOld->Clone();
	tuple8->items[1] = new PyRepReal(minimumJoinStandingNew);
	dict1_6 = tuple8;
	
	dict1->items[
		new PyRepString("minimumJoinStanding")
	] = dict1_6;
	PyRep *dict1_7;
	PyRepTuple *tuple9 = new PyRepTuple(2);
	if(corporationTypeOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: corporationTypeOld is NULL! hacking in a PyRepNone");
		corporationTypeOld = new PyRepNone();
	}
	tuple9->items[0] = corporationTypeOld->Clone();
	tuple9->items[1] = new PyRepInteger(corporationTypeNew);
	dict1_7 = tuple9;
	
	dict1->items[
		new PyRepString("corporationType")
	] = dict1_7;
	PyRep *dict1_8;
	PyRepTuple *tuple10 = new PyRepTuple(2);
	if(hasPlayerPersonnelManagerOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: hasPlayerPersonnelManagerOld is NULL! hacking in a PyRepNone");
		hasPlayerPersonnelManagerOld = new PyRepNone();
	}
	tuple10->items[0] = hasPlayerPersonnelManagerOld->Clone();
	tuple10->items[1] = new PyRepInteger(hasPlayerPersonnelManagerNew);
	dict1_8 = tuple10;
	
	dict1->items[
		new PyRepString("hasPlayerPersonnelManager")
	] = dict1_8;
	PyRep *dict1_9;
	PyRepTuple *tuple11 = new PyRepTuple(2);
	if(sendCharTerminationMessageOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: sendCharTerminationMessageOld is NULL! hacking in a PyRepNone");
		sendCharTerminationMessageOld = new PyRepNone();
	}
	tuple11->items[0] = sendCharTerminationMessageOld->Clone();
	tuple11->items[1] = new PyRepInteger(sendCharTerminationMessageNew);
	dict1_9 = tuple11;
	
	dict1->items[
		new PyRepString("sendCharTerminationMessage")
	] = dict1_9;
	PyRep *dict1_10;
	PyRepTuple *tuple12 = new PyRepTuple(2);
	if(creatorIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: creatorIDOld is NULL! hacking in a PyRepNone");
		creatorIDOld = new PyRepNone();
	}
	tuple12->items[0] = creatorIDOld->Clone();
	tuple12->items[1] = new PyRepInteger(creatorIDNew);
	dict1_10 = tuple12;
	
	dict1->items[
		new PyRepString("creatorID")
	] = dict1_10;
	PyRep *dict1_11;
	PyRepTuple *tuple13 = new PyRepTuple(2);
	if(stationIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: stationIDOld is NULL! hacking in a PyRepNone");
		stationIDOld = new PyRepNone();
	}
	tuple13->items[0] = stationIDOld->Clone();
	tuple13->items[1] = new PyRepInteger(stationIDNew);
	dict1_11 = tuple13;
	
	dict1->items[
		new PyRepString("stationID")
	] = dict1_11;
	PyRep *dict1_12;
	PyRepTuple *tuple14 = new PyRepTuple(2);
	if(raceIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: raceIDOld is NULL! hacking in a PyRepNone");
		raceIDOld = new PyRepNone();
	}
	tuple14->items[0] = raceIDOld->Clone();
	if(raceIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: raceIDNew is NULL! hacking in a PyRepNone");
		raceIDNew = new PyRepNone();
	}
	tuple14->items[1] = raceIDNew->Clone();
	dict1_12 = tuple14;
	
	dict1->items[
		new PyRepString("raceID")
	] = dict1_12;
	PyRep *dict1_13;
	PyRepTuple *tuple15 = new PyRepTuple(2);
	if(allianceIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: allianceIDOld is NULL! hacking in a PyRepNone");
		allianceIDOld = new PyRepNone();
	}
	tuple15->items[0] = allianceIDOld->Clone();
	if(allianceIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: allianceIDNew is NULL! hacking in a PyRepNone");
		allianceIDNew = new PyRepNone();
	}
	tuple15->items[1] = allianceIDNew->Clone();
	dict1_13 = tuple15;
	
	dict1->items[
		new PyRepString("allianceID")
	] = dict1_13;
	PyRep *dict1_14;
	PyRepTuple *tuple16 = new PyRepTuple(2);
	if(sharesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: sharesOld is NULL! hacking in a PyRepNone");
		sharesOld = new PyRepNone();
	}
	tuple16->items[0] = sharesOld->Clone();
	tuple16->items[1] = new PyRepInteger(sharesNew);
	dict1_14 = tuple16;
	
	dict1->items[
		new PyRepString("shares")
	] = dict1_14;
	PyRep *dict1_15;
	PyRepTuple *tuple17 = new PyRepTuple(2);
	if(memberCountOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: memberCountOld is NULL! hacking in a PyRepNone");
		memberCountOld = new PyRepNone();
	}
	tuple17->items[0] = memberCountOld->Clone();
	tuple17->items[1] = new PyRepInteger(memberCountNew);
	dict1_15 = tuple17;
	
	dict1->items[
		new PyRepString("memberCount")
	] = dict1_15;
	PyRep *dict1_16;
	PyRepTuple *tuple18 = new PyRepTuple(2);
	if(memberLimitOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: memberLimitOld is NULL! hacking in a PyRepNone");
		memberLimitOld = new PyRepNone();
	}
	tuple18->items[0] = memberLimitOld->Clone();
	tuple18->items[1] = new PyRepInteger(memberLimitNew);
	dict1_16 = tuple18;
	
	dict1->items[
		new PyRepString("memberLimit")
	] = dict1_16;
	PyRep *dict1_17;
	PyRepTuple *tuple19 = new PyRepTuple(2);
	if(allowedMemberRaceIDsOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: allowedMemberRaceIDsOld is NULL! hacking in a PyRepNone");
		allowedMemberRaceIDsOld = new PyRepNone();
	}
	tuple19->items[0] = allowedMemberRaceIDsOld->Clone();
	tuple19->items[1] = new PyRepInteger(allowedMemberRaceIDsNew);
	dict1_17 = tuple19;
	
	dict1->items[
		new PyRepString("allowedMemberRaceIDs")
	] = dict1_17;
	PyRep *dict1_18;
	PyRepTuple *tuple20 = new PyRepTuple(2);
	if(graphicIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: graphicIDOld is NULL! hacking in a PyRepNone");
		graphicIDOld = new PyRepNone();
	}
	tuple20->items[0] = graphicIDOld->Clone();
	tuple20->items[1] = new PyRepInteger(graphicIDNew);
	dict1_18 = tuple20;
	
	dict1->items[
		new PyRepString("graphicID")
	] = dict1_18;
	PyRep *dict1_19;
	PyRepTuple *tuple21 = new PyRepTuple(2);
	if(shape1Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape1Old is NULL! hacking in a PyRepNone");
		shape1Old = new PyRepNone();
	}
	tuple21->items[0] = shape1Old->Clone();
	if(shape1New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape1New is NULL! hacking in a PyRepNone");
		shape1New = new PyRepNone();
	}
	tuple21->items[1] = shape1New->Clone();
	dict1_19 = tuple21;
	
	dict1->items[
		new PyRepString("shape1")
	] = dict1_19;
	PyRep *dict1_20;
	PyRepTuple *tuple22 = new PyRepTuple(2);
	if(shape2Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape2Old is NULL! hacking in a PyRepNone");
		shape2Old = new PyRepNone();
	}
	tuple22->items[0] = shape2Old->Clone();
	if(shape2New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape2New is NULL! hacking in a PyRepNone");
		shape2New = new PyRepNone();
	}
	tuple22->items[1] = shape2New->Clone();
	dict1_20 = tuple22;
	
	dict1->items[
		new PyRepString("shape2")
	] = dict1_20;
	PyRep *dict1_21;
	PyRepTuple *tuple23 = new PyRepTuple(2);
	if(shape3Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape3Old is NULL! hacking in a PyRepNone");
		shape3Old = new PyRepNone();
	}
	tuple23->items[0] = shape3Old->Clone();
	if(shape3New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape3New is NULL! hacking in a PyRepNone");
		shape3New = new PyRepNone();
	}
	tuple23->items[1] = shape3New->Clone();
	dict1_21 = tuple23;
	
	dict1->items[
		new PyRepString("shape3")
	] = dict1_21;
	PyRep *dict1_22;
	PyRepTuple *tuple24 = new PyRepTuple(2);
	if(color1Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color1Old is NULL! hacking in a PyRepNone");
		color1Old = new PyRepNone();
	}
	tuple24->items[0] = color1Old->Clone();
	if(color1New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color1New is NULL! hacking in a PyRepNone");
		color1New = new PyRepNone();
	}
	tuple24->items[1] = color1New->Clone();
	dict1_22 = tuple24;
	
	dict1->items[
		new PyRepString("color1")
	] = dict1_22;
	PyRep *dict1_23;
	PyRepTuple *tuple25 = new PyRepTuple(2);
	if(color2Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color2Old is NULL! hacking in a PyRepNone");
		color2Old = new PyRepNone();
	}
	tuple25->items[0] = color2Old->Clone();
	if(color2New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color2New is NULL! hacking in a PyRepNone");
		color2New = new PyRepNone();
	}
	tuple25->items[1] = color2New->Clone();
	dict1_23 = tuple25;
	
	dict1->items[
		new PyRepString("color2")
	] = dict1_23;
	PyRep *dict1_24;
	PyRepTuple *tuple26 = new PyRepTuple(2);
	if(color3Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color3Old is NULL! hacking in a PyRepNone");
		color3Old = new PyRepNone();
	}
	tuple26->items[0] = color3Old->Clone();
	if(color3New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color3New is NULL! hacking in a PyRepNone");
		color3New = new PyRepNone();
	}
	tuple26->items[1] = color3New->Clone();
	dict1_24 = tuple26;
	
	dict1->items[
		new PyRepString("color3")
	] = dict1_24;
	PyRep *dict1_25;
	PyRepTuple *tuple27 = new PyRepTuple(2);
	if(typefaceOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: typefaceOld is NULL! hacking in a PyRepNone");
		typefaceOld = new PyRepNone();
	}
	tuple27->items[0] = typefaceOld->Clone();
	if(typefaceNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: typefaceNew is NULL! hacking in a PyRepNone");
		typefaceNew = new PyRepNone();
	}
	tuple27->items[1] = typefaceNew->Clone();
	dict1_25 = tuple27;
	
	dict1->items[
		new PyRepString("typeface")
	] = dict1_25;
	PyRep *dict1_26;
	PyRepTuple *tuple28 = new PyRepTuple(2);
	if(division1Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division1Old is NULL! hacking in a PyRepNone");
		division1Old = new PyRepNone();
	}
	tuple28->items[0] = division1Old->Clone();
	if(division1New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division1New is NULL! hacking in a PyRepNone");
		division1New = new PyRepNone();
	}
	tuple28->items[1] = division1New->Clone();
	dict1_26 = tuple28;
	
	dict1->items[
		new PyRepString("division1")
	] = dict1_26;
	PyRep *dict1_27;
	PyRepTuple *tuple29 = new PyRepTuple(2);
	if(division2Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division2Old is NULL! hacking in a PyRepNone");
		division2Old = new PyRepNone();
	}
	tuple29->items[0] = division2Old->Clone();
	if(division2New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division2New is NULL! hacking in a PyRepNone");
		division2New = new PyRepNone();
	}
	tuple29->items[1] = division2New->Clone();
	dict1_27 = tuple29;
	
	dict1->items[
		new PyRepString("division2")
	] = dict1_27;
	PyRep *dict1_28;
	PyRepTuple *tuple30 = new PyRepTuple(2);
	if(division3Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division3Old is NULL! hacking in a PyRepNone");
		division3Old = new PyRepNone();
	}
	tuple30->items[0] = division3Old->Clone();
	if(division3New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division3New is NULL! hacking in a PyRepNone");
		division3New = new PyRepNone();
	}
	tuple30->items[1] = division3New->Clone();
	dict1_28 = tuple30;
	
	dict1->items[
		new PyRepString("division3")
	] = dict1_28;
	PyRep *dict1_29;
	PyRepTuple *tuple31 = new PyRepTuple(2);
	if(division4Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division4Old is NULL! hacking in a PyRepNone");
		division4Old = new PyRepNone();
	}
	tuple31->items[0] = division4Old->Clone();
	if(division4New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division4New is NULL! hacking in a PyRepNone");
		division4New = new PyRepNone();
	}
	tuple31->items[1] = division4New->Clone();
	dict1_29 = tuple31;
	
	dict1->items[
		new PyRepString("division4")
	] = dict1_29;
	PyRep *dict1_30;
	PyRepTuple *tuple32 = new PyRepTuple(2);
	if(division5Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division5Old is NULL! hacking in a PyRepNone");
		division5Old = new PyRepNone();
	}
	tuple32->items[0] = division5Old->Clone();
	if(division5New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division5New is NULL! hacking in a PyRepNone");
		division5New = new PyRepNone();
	}
	tuple32->items[1] = division5New->Clone();
	dict1_30 = tuple32;
	
	dict1->items[
		new PyRepString("division5")
	] = dict1_30;
	PyRep *dict1_31;
	PyRepTuple *tuple33 = new PyRepTuple(2);
	if(division6Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division6Old is NULL! hacking in a PyRepNone");
		division6Old = new PyRepNone();
	}
	tuple33->items[0] = division6Old->Clone();
	if(division6New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division6New is NULL! hacking in a PyRepNone");
		division6New = new PyRepNone();
	}
	tuple33->items[1] = division6New->Clone();
	dict1_31 = tuple33;
	
	dict1->items[
		new PyRepString("division6")
	] = dict1_31;
	PyRep *dict1_32;
	PyRepTuple *tuple34 = new PyRepTuple(2);
	if(division7Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division7Old is NULL! hacking in a PyRepNone");
		division7Old = new PyRepNone();
	}
	tuple34->items[0] = division7Old->Clone();
	if(division7New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division7New is NULL! hacking in a PyRepNone");
		division7New = new PyRepNone();
	}
	tuple34->items[1] = division7New->Clone();
	dict1_32 = tuple34;
	
	dict1->items[
		new PyRepString("division7")
	] = dict1_32;
	PyRep *dict1_33;
	PyRepTuple *tuple35 = new PyRepTuple(2);
	if(deletedOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: deletedOld is NULL! hacking in a PyRepNone");
		deletedOld = new PyRepNone();
	}
	tuple35->items[0] = deletedOld->Clone();
	tuple35->items[1] = new PyRepInteger(deletedNew);
	dict1_33 = tuple35;
	
	dict1->items[
		new PyRepString("deleted")
	] = dict1_33;
	PyRep *dict1_34;
	PyRepTuple *tuple36 = new PyRepTuple(2);
	if(ceoIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: ceoIDOld is NULL! hacking in a PyRepNone");
		ceoIDOld = new PyRepNone();
	}
	tuple36->items[0] = ceoIDOld->Clone();
	tuple36->items[1] = new PyRepInteger(ceoIDNew);
	dict1_34 = tuple36;
	
	dict1->items[
		new PyRepString("ceoID")
	] = dict1_34;
	tuple0->items[1] = dict1;
	
	res = tuple0;
	

	return(res);
}

PyRepTuple *Notify_OnCorporaionChanged::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	tuple0->items[0] = new PyRepInteger(corpID);
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	if(corporationIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: corporationIDOld is NULL! hacking in a PyRepNone");
		corporationIDOld = new PyRepNone();
	}
	tuple2->items[0] = corporationIDOld;
	corporationIDOld = NULL;
	tuple2->items[1] = new PyRepInteger(corporationIDNew);
	dict1_0 = tuple2;
	
	dict1->items[
		new PyRepString("corporationID")
	] = dict1_0;
	PyRep *dict1_1;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	if(corporationNameOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: corporationNameOld is NULL! hacking in a PyRepNone");
		corporationNameOld = new PyRepNone();
	}
	tuple3->items[0] = corporationNameOld;
	corporationNameOld = NULL;
	tuple3->items[1] = new PyRepString(corporationNameNew);
	dict1_1 = tuple3;
	
	dict1->items[
		new PyRepString("corporationName")
	] = dict1_1;
	PyRep *dict1_2;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	if(descriptionOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: descriptionOld is NULL! hacking in a PyRepNone");
		descriptionOld = new PyRepNone();
	}
	tuple4->items[0] = descriptionOld;
	descriptionOld = NULL;
	tuple4->items[1] = new PyRepString(descriptionNew);
	dict1_2 = tuple4;
	
	dict1->items[
		new PyRepString("description")
	] = dict1_2;
	PyRep *dict1_3;
	PyRepTuple *tuple5 = new PyRepTuple(2);
	if(tickerNameOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: tickerNameOld is NULL! hacking in a PyRepNone");
		tickerNameOld = new PyRepNone();
	}
	tuple5->items[0] = tickerNameOld;
	tickerNameOld = NULL;
	tuple5->items[1] = new PyRepString(tickerNameNew);
	dict1_3 = tuple5;
	
	dict1->items[
		new PyRepString("tickerName")
	] = dict1_3;
	PyRep *dict1_4;
	PyRepTuple *tuple6 = new PyRepTuple(2);
	if(urlOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: urlOld is NULL! hacking in a PyRepNone");
		urlOld = new PyRepNone();
	}
	tuple6->items[0] = urlOld;
	urlOld = NULL;
	tuple6->items[1] = new PyRepString(urlNew);
	dict1_4 = tuple6;
	
	dict1->items[
		new PyRepString("url")
	] = dict1_4;
	PyRep *dict1_5;
	PyRepTuple *tuple7 = new PyRepTuple(2);
	if(taxRateOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: taxRateOld is NULL! hacking in a PyRepNone");
		taxRateOld = new PyRepNone();
	}
	tuple7->items[0] = taxRateOld;
	taxRateOld = NULL;
	tuple7->items[1] = new PyRepReal(taxRateNew);
	dict1_5 = tuple7;
	
	dict1->items[
		new PyRepString("taxRate")
	] = dict1_5;
	PyRep *dict1_6;
	PyRepTuple *tuple8 = new PyRepTuple(2);
	if(minimumJoinStandingOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: minimumJoinStandingOld is NULL! hacking in a PyRepNone");
		minimumJoinStandingOld = new PyRepNone();
	}
	tuple8->items[0] = minimumJoinStandingOld;
	minimumJoinStandingOld = NULL;
	tuple8->items[1] = new PyRepReal(minimumJoinStandingNew);
	dict1_6 = tuple8;
	
	dict1->items[
		new PyRepString("minimumJoinStanding")
	] = dict1_6;
	PyRep *dict1_7;
	PyRepTuple *tuple9 = new PyRepTuple(2);
	if(corporationTypeOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: corporationTypeOld is NULL! hacking in a PyRepNone");
		corporationTypeOld = new PyRepNone();
	}
	tuple9->items[0] = corporationTypeOld;
	corporationTypeOld = NULL;
	tuple9->items[1] = new PyRepInteger(corporationTypeNew);
	dict1_7 = tuple9;
	
	dict1->items[
		new PyRepString("corporationType")
	] = dict1_7;
	PyRep *dict1_8;
	PyRepTuple *tuple10 = new PyRepTuple(2);
	if(hasPlayerPersonnelManagerOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: hasPlayerPersonnelManagerOld is NULL! hacking in a PyRepNone");
		hasPlayerPersonnelManagerOld = new PyRepNone();
	}
	tuple10->items[0] = hasPlayerPersonnelManagerOld;
	hasPlayerPersonnelManagerOld = NULL;
	tuple10->items[1] = new PyRepInteger(hasPlayerPersonnelManagerNew);
	dict1_8 = tuple10;
	
	dict1->items[
		new PyRepString("hasPlayerPersonnelManager")
	] = dict1_8;
	PyRep *dict1_9;
	PyRepTuple *tuple11 = new PyRepTuple(2);
	if(sendCharTerminationMessageOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: sendCharTerminationMessageOld is NULL! hacking in a PyRepNone");
		sendCharTerminationMessageOld = new PyRepNone();
	}
	tuple11->items[0] = sendCharTerminationMessageOld;
	sendCharTerminationMessageOld = NULL;
	tuple11->items[1] = new PyRepInteger(sendCharTerminationMessageNew);
	dict1_9 = tuple11;
	
	dict1->items[
		new PyRepString("sendCharTerminationMessage")
	] = dict1_9;
	PyRep *dict1_10;
	PyRepTuple *tuple12 = new PyRepTuple(2);
	if(creatorIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: creatorIDOld is NULL! hacking in a PyRepNone");
		creatorIDOld = new PyRepNone();
	}
	tuple12->items[0] = creatorIDOld;
	creatorIDOld = NULL;
	tuple12->items[1] = new PyRepInteger(creatorIDNew);
	dict1_10 = tuple12;
	
	dict1->items[
		new PyRepString("creatorID")
	] = dict1_10;
	PyRep *dict1_11;
	PyRepTuple *tuple13 = new PyRepTuple(2);
	if(stationIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: stationIDOld is NULL! hacking in a PyRepNone");
		stationIDOld = new PyRepNone();
	}
	tuple13->items[0] = stationIDOld;
	stationIDOld = NULL;
	tuple13->items[1] = new PyRepInteger(stationIDNew);
	dict1_11 = tuple13;
	
	dict1->items[
		new PyRepString("stationID")
	] = dict1_11;
	PyRep *dict1_12;
	PyRepTuple *tuple14 = new PyRepTuple(2);
	if(raceIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: raceIDOld is NULL! hacking in a PyRepNone");
		raceIDOld = new PyRepNone();
	}
	tuple14->items[0] = raceIDOld;
	raceIDOld = NULL;
	if(raceIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: raceIDNew is NULL! hacking in a PyRepNone");
		raceIDNew = new PyRepNone();
	}
	tuple14->items[1] = raceIDNew;
	raceIDNew = NULL;
	dict1_12 = tuple14;
	
	dict1->items[
		new PyRepString("raceID")
	] = dict1_12;
	PyRep *dict1_13;
	PyRepTuple *tuple15 = new PyRepTuple(2);
	if(allianceIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: allianceIDOld is NULL! hacking in a PyRepNone");
		allianceIDOld = new PyRepNone();
	}
	tuple15->items[0] = allianceIDOld;
	allianceIDOld = NULL;
	if(allianceIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: allianceIDNew is NULL! hacking in a PyRepNone");
		allianceIDNew = new PyRepNone();
	}
	tuple15->items[1] = allianceIDNew;
	allianceIDNew = NULL;
	dict1_13 = tuple15;
	
	dict1->items[
		new PyRepString("allianceID")
	] = dict1_13;
	PyRep *dict1_14;
	PyRepTuple *tuple16 = new PyRepTuple(2);
	if(sharesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: sharesOld is NULL! hacking in a PyRepNone");
		sharesOld = new PyRepNone();
	}
	tuple16->items[0] = sharesOld;
	sharesOld = NULL;
	tuple16->items[1] = new PyRepInteger(sharesNew);
	dict1_14 = tuple16;
	
	dict1->items[
		new PyRepString("shares")
	] = dict1_14;
	PyRep *dict1_15;
	PyRepTuple *tuple17 = new PyRepTuple(2);
	if(memberCountOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: memberCountOld is NULL! hacking in a PyRepNone");
		memberCountOld = new PyRepNone();
	}
	tuple17->items[0] = memberCountOld;
	memberCountOld = NULL;
	tuple17->items[1] = new PyRepInteger(memberCountNew);
	dict1_15 = tuple17;
	
	dict1->items[
		new PyRepString("memberCount")
	] = dict1_15;
	PyRep *dict1_16;
	PyRepTuple *tuple18 = new PyRepTuple(2);
	if(memberLimitOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: memberLimitOld is NULL! hacking in a PyRepNone");
		memberLimitOld = new PyRepNone();
	}
	tuple18->items[0] = memberLimitOld;
	memberLimitOld = NULL;
	tuple18->items[1] = new PyRepInteger(memberLimitNew);
	dict1_16 = tuple18;
	
	dict1->items[
		new PyRepString("memberLimit")
	] = dict1_16;
	PyRep *dict1_17;
	PyRepTuple *tuple19 = new PyRepTuple(2);
	if(allowedMemberRaceIDsOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: allowedMemberRaceIDsOld is NULL! hacking in a PyRepNone");
		allowedMemberRaceIDsOld = new PyRepNone();
	}
	tuple19->items[0] = allowedMemberRaceIDsOld;
	allowedMemberRaceIDsOld = NULL;
	tuple19->items[1] = new PyRepInteger(allowedMemberRaceIDsNew);
	dict1_17 = tuple19;
	
	dict1->items[
		new PyRepString("allowedMemberRaceIDs")
	] = dict1_17;
	PyRep *dict1_18;
	PyRepTuple *tuple20 = new PyRepTuple(2);
	if(graphicIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: graphicIDOld is NULL! hacking in a PyRepNone");
		graphicIDOld = new PyRepNone();
	}
	tuple20->items[0] = graphicIDOld;
	graphicIDOld = NULL;
	tuple20->items[1] = new PyRepInteger(graphicIDNew);
	dict1_18 = tuple20;
	
	dict1->items[
		new PyRepString("graphicID")
	] = dict1_18;
	PyRep *dict1_19;
	PyRepTuple *tuple21 = new PyRepTuple(2);
	if(shape1Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape1Old is NULL! hacking in a PyRepNone");
		shape1Old = new PyRepNone();
	}
	tuple21->items[0] = shape1Old;
	shape1Old = NULL;
	if(shape1New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape1New is NULL! hacking in a PyRepNone");
		shape1New = new PyRepNone();
	}
	tuple21->items[1] = shape1New;
	shape1New = NULL;
	dict1_19 = tuple21;
	
	dict1->items[
		new PyRepString("shape1")
	] = dict1_19;
	PyRep *dict1_20;
	PyRepTuple *tuple22 = new PyRepTuple(2);
	if(shape2Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape2Old is NULL! hacking in a PyRepNone");
		shape2Old = new PyRepNone();
	}
	tuple22->items[0] = shape2Old;
	shape2Old = NULL;
	if(shape2New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape2New is NULL! hacking in a PyRepNone");
		shape2New = new PyRepNone();
	}
	tuple22->items[1] = shape2New;
	shape2New = NULL;
	dict1_20 = tuple22;
	
	dict1->items[
		new PyRepString("shape2")
	] = dict1_20;
	PyRep *dict1_21;
	PyRepTuple *tuple23 = new PyRepTuple(2);
	if(shape3Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape3Old is NULL! hacking in a PyRepNone");
		shape3Old = new PyRepNone();
	}
	tuple23->items[0] = shape3Old;
	shape3Old = NULL;
	if(shape3New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: shape3New is NULL! hacking in a PyRepNone");
		shape3New = new PyRepNone();
	}
	tuple23->items[1] = shape3New;
	shape3New = NULL;
	dict1_21 = tuple23;
	
	dict1->items[
		new PyRepString("shape3")
	] = dict1_21;
	PyRep *dict1_22;
	PyRepTuple *tuple24 = new PyRepTuple(2);
	if(color1Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color1Old is NULL! hacking in a PyRepNone");
		color1Old = new PyRepNone();
	}
	tuple24->items[0] = color1Old;
	color1Old = NULL;
	if(color1New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color1New is NULL! hacking in a PyRepNone");
		color1New = new PyRepNone();
	}
	tuple24->items[1] = color1New;
	color1New = NULL;
	dict1_22 = tuple24;
	
	dict1->items[
		new PyRepString("color1")
	] = dict1_22;
	PyRep *dict1_23;
	PyRepTuple *tuple25 = new PyRepTuple(2);
	if(color2Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color2Old is NULL! hacking in a PyRepNone");
		color2Old = new PyRepNone();
	}
	tuple25->items[0] = color2Old;
	color2Old = NULL;
	if(color2New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color2New is NULL! hacking in a PyRepNone");
		color2New = new PyRepNone();
	}
	tuple25->items[1] = color2New;
	color2New = NULL;
	dict1_23 = tuple25;
	
	dict1->items[
		new PyRepString("color2")
	] = dict1_23;
	PyRep *dict1_24;
	PyRepTuple *tuple26 = new PyRepTuple(2);
	if(color3Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color3Old is NULL! hacking in a PyRepNone");
		color3Old = new PyRepNone();
	}
	tuple26->items[0] = color3Old;
	color3Old = NULL;
	if(color3New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: color3New is NULL! hacking in a PyRepNone");
		color3New = new PyRepNone();
	}
	tuple26->items[1] = color3New;
	color3New = NULL;
	dict1_24 = tuple26;
	
	dict1->items[
		new PyRepString("color3")
	] = dict1_24;
	PyRep *dict1_25;
	PyRepTuple *tuple27 = new PyRepTuple(2);
	if(typefaceOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: typefaceOld is NULL! hacking in a PyRepNone");
		typefaceOld = new PyRepNone();
	}
	tuple27->items[0] = typefaceOld;
	typefaceOld = NULL;
	if(typefaceNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: typefaceNew is NULL! hacking in a PyRepNone");
		typefaceNew = new PyRepNone();
	}
	tuple27->items[1] = typefaceNew;
	typefaceNew = NULL;
	dict1_25 = tuple27;
	
	dict1->items[
		new PyRepString("typeface")
	] = dict1_25;
	PyRep *dict1_26;
	PyRepTuple *tuple28 = new PyRepTuple(2);
	if(division1Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division1Old is NULL! hacking in a PyRepNone");
		division1Old = new PyRepNone();
	}
	tuple28->items[0] = division1Old;
	division1Old = NULL;
	if(division1New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division1New is NULL! hacking in a PyRepNone");
		division1New = new PyRepNone();
	}
	tuple28->items[1] = division1New;
	division1New = NULL;
	dict1_26 = tuple28;
	
	dict1->items[
		new PyRepString("division1")
	] = dict1_26;
	PyRep *dict1_27;
	PyRepTuple *tuple29 = new PyRepTuple(2);
	if(division2Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division2Old is NULL! hacking in a PyRepNone");
		division2Old = new PyRepNone();
	}
	tuple29->items[0] = division2Old;
	division2Old = NULL;
	if(division2New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division2New is NULL! hacking in a PyRepNone");
		division2New = new PyRepNone();
	}
	tuple29->items[1] = division2New;
	division2New = NULL;
	dict1_27 = tuple29;
	
	dict1->items[
		new PyRepString("division2")
	] = dict1_27;
	PyRep *dict1_28;
	PyRepTuple *tuple30 = new PyRepTuple(2);
	if(division3Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division3Old is NULL! hacking in a PyRepNone");
		division3Old = new PyRepNone();
	}
	tuple30->items[0] = division3Old;
	division3Old = NULL;
	if(division3New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division3New is NULL! hacking in a PyRepNone");
		division3New = new PyRepNone();
	}
	tuple30->items[1] = division3New;
	division3New = NULL;
	dict1_28 = tuple30;
	
	dict1->items[
		new PyRepString("division3")
	] = dict1_28;
	PyRep *dict1_29;
	PyRepTuple *tuple31 = new PyRepTuple(2);
	if(division4Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division4Old is NULL! hacking in a PyRepNone");
		division4Old = new PyRepNone();
	}
	tuple31->items[0] = division4Old;
	division4Old = NULL;
	if(division4New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division4New is NULL! hacking in a PyRepNone");
		division4New = new PyRepNone();
	}
	tuple31->items[1] = division4New;
	division4New = NULL;
	dict1_29 = tuple31;
	
	dict1->items[
		new PyRepString("division4")
	] = dict1_29;
	PyRep *dict1_30;
	PyRepTuple *tuple32 = new PyRepTuple(2);
	if(division5Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division5Old is NULL! hacking in a PyRepNone");
		division5Old = new PyRepNone();
	}
	tuple32->items[0] = division5Old;
	division5Old = NULL;
	if(division5New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division5New is NULL! hacking in a PyRepNone");
		division5New = new PyRepNone();
	}
	tuple32->items[1] = division5New;
	division5New = NULL;
	dict1_30 = tuple32;
	
	dict1->items[
		new PyRepString("division5")
	] = dict1_30;
	PyRep *dict1_31;
	PyRepTuple *tuple33 = new PyRepTuple(2);
	if(division6Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division6Old is NULL! hacking in a PyRepNone");
		division6Old = new PyRepNone();
	}
	tuple33->items[0] = division6Old;
	division6Old = NULL;
	if(division6New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division6New is NULL! hacking in a PyRepNone");
		division6New = new PyRepNone();
	}
	tuple33->items[1] = division6New;
	division6New = NULL;
	dict1_31 = tuple33;
	
	dict1->items[
		new PyRepString("division6")
	] = dict1_31;
	PyRep *dict1_32;
	PyRepTuple *tuple34 = new PyRepTuple(2);
	if(division7Old == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division7Old is NULL! hacking in a PyRepNone");
		division7Old = new PyRepNone();
	}
	tuple34->items[0] = division7Old;
	division7Old = NULL;
	if(division7New == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: division7New is NULL! hacking in a PyRepNone");
		division7New = new PyRepNone();
	}
	tuple34->items[1] = division7New;
	division7New = NULL;
	dict1_32 = tuple34;
	
	dict1->items[
		new PyRepString("division7")
	] = dict1_32;
	PyRep *dict1_33;
	PyRepTuple *tuple35 = new PyRepTuple(2);
	if(deletedOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: deletedOld is NULL! hacking in a PyRepNone");
		deletedOld = new PyRepNone();
	}
	tuple35->items[0] = deletedOld;
	deletedOld = NULL;
	tuple35->items[1] = new PyRepInteger(deletedNew);
	dict1_33 = tuple35;
	
	dict1->items[
		new PyRepString("deleted")
	] = dict1_33;
	PyRep *dict1_34;
	PyRepTuple *tuple36 = new PyRepTuple(2);
	if(ceoIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporaionChanged: ceoIDOld is NULL! hacking in a PyRepNone");
		ceoIDOld = new PyRepNone();
	}
	tuple36->items[0] = ceoIDOld;
	ceoIDOld = NULL;
	tuple36->items[1] = new PyRepInteger(ceoIDNew);
	dict1_34 = tuple36;
	
	dict1->items[
		new PyRepString("ceoID")
	] = dict1_34;
	tuple0->items[1] = dict1;
	
	res = tuple0;
	

	return(res);
}

bool Notify_OnCorporaionChanged::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_OnCorporaionChanged::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple0 is the wrong size: expected 2, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: corpID is not an int: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_1 = (PyRepInteger *) tuple0->items[0];
	if(int_1->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field corpID");
	}
	corpID = int_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: dict2 is the wrong type: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	bool dict2_ide1 = false;
	bool dict2_ide2 = false;
	bool dict2_ide3 = false;
	bool dict2_ide4 = false;
	bool dict2_ide5 = false;
	bool dict2_ide6 = false;
	bool dict2_ide7 = false;
	bool dict2_ide8 = false;
	bool dict2_ide9 = false;
	bool dict2_ide10 = false;
	bool dict2_ide11 = false;
	bool dict2_ide12 = false;
	bool dict2_ide13 = false;
	bool dict2_ide14 = false;
	bool dict2_ide15 = false;
	bool dict2_ide16 = false;
	bool dict2_ide17 = false;
	bool dict2_ide18 = false;
	bool dict2_ide19 = false;
	bool dict2_ide20 = false;
	bool dict2_ide21 = false;
	bool dict2_ide22 = false;
	bool dict2_ide23 = false;
	bool dict2_ide24 = false;
	bool dict2_ide25 = false;
	bool dict2_ide26 = false;
	bool dict2_ide27 = false;
	bool dict2_ide28 = false;
	bool dict2_ide29 = false;
	bool dict2_ide30 = false;
	bool dict2_ide31 = false;
	bool dict2_ide32 = false;
	bool dict2_ide33 = false;
	bool dict2_ide34 = false;
	bool dict2_ide35 = false;
	PyRepDict *dict2 = (PyRepDict *) tuple0->items[1];
	
	PyRepDict::iterator dict2_cur, dict2_end;
	dict2_cur = dict2->items.begin();
	dict2_end = dict2->items.end();
	for(; dict2_cur != dict2_end; dict2_cur++) {
		PyRep *key__ = dict2_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: a key in dict2 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "corporationID") {
			dict2_ide1 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple3 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple3 = (PyRepTuple *) dict2_cur->second;
	if(tuple3->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple3 is the wrong size: expected 2, but got %d", tuple3->items.size());
		delete packet;
		return(false);
	}

	delete corporationIDOld;
	corporationIDOld = tuple3->items[0];
	tuple3->items[0] = NULL;
	
	if(!tuple3->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: corporationIDNew is not an int: %s", tuple3->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_4 = (PyRepInteger *) tuple3->items[1];
	if(int_4->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field corporationIDNew");
	}
	corporationIDNew = int_4->value;
		} else
		if(key_string__->value == "corporationName") {
			dict2_ide2 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple5 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple5 = (PyRepTuple *) dict2_cur->second;
	if(tuple5->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple5 is the wrong size: expected 2, but got %d", tuple5->items.size());
		delete packet;
		return(false);
	}

	delete corporationNameOld;
	corporationNameOld = tuple5->items[0];
	tuple5->items[0] = NULL;
	
	if(!tuple5->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: corporationNameNew is not a string: %s", tuple5->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_6 = (PyRepString *) tuple5->items[1];
	corporationNameNew = string_6->value;
		} else
		if(key_string__->value == "description") {
			dict2_ide3 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple7 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple7 = (PyRepTuple *) dict2_cur->second;
	if(tuple7->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple7 is the wrong size: expected 2, but got %d", tuple7->items.size());
		delete packet;
		return(false);
	}

	delete descriptionOld;
	descriptionOld = tuple7->items[0];
	tuple7->items[0] = NULL;
	
	if(!tuple7->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: descriptionNew is not a string: %s", tuple7->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_8 = (PyRepString *) tuple7->items[1];
	descriptionNew = string_8->value;
		} else
		if(key_string__->value == "tickerName") {
			dict2_ide4 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple9 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple9 = (PyRepTuple *) dict2_cur->second;
	if(tuple9->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple9 is the wrong size: expected 2, but got %d", tuple9->items.size());
		delete packet;
		return(false);
	}

	delete tickerNameOld;
	tickerNameOld = tuple9->items[0];
	tuple9->items[0] = NULL;
	
	if(!tuple9->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tickerNameNew is not a string: %s", tuple9->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_10 = (PyRepString *) tuple9->items[1];
	tickerNameNew = string_10->value;
		} else
		if(key_string__->value == "url") {
			dict2_ide5 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple11 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple11 = (PyRepTuple *) dict2_cur->second;
	if(tuple11->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple11 is the wrong size: expected 2, but got %d", tuple11->items.size());
		delete packet;
		return(false);
	}

	delete urlOld;
	urlOld = tuple11->items[0];
	tuple11->items[0] = NULL;
	
	if(!tuple11->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: urlNew is not a string: %s", tuple11->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_12 = (PyRepString *) tuple11->items[1];
	urlNew = string_12->value;
		} else
		if(key_string__->value == "taxRate") {
			dict2_ide6 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple13 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple13 = (PyRepTuple *) dict2_cur->second;
	if(tuple13->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple13 is the wrong size: expected 2, but got %d", tuple13->items.size());
		delete packet;
		return(false);
	}

	delete taxRateOld;
	taxRateOld = tuple13->items[0];
	tuple13->items[0] = NULL;
	
	if(!tuple13->items[1]->CheckType(PyRep::Real)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: taxRateNew is not a real: %s", tuple13->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepReal *real_14 = (PyRepReal *) tuple13->items[1];
	taxRateNew = real_14->value;
		} else
		if(key_string__->value == "minimumJoinStanding") {
			dict2_ide7 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple15 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple15 = (PyRepTuple *) dict2_cur->second;
	if(tuple15->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple15 is the wrong size: expected 2, but got %d", tuple15->items.size());
		delete packet;
		return(false);
	}

	delete minimumJoinStandingOld;
	minimumJoinStandingOld = tuple15->items[0];
	tuple15->items[0] = NULL;
	
	if(!tuple15->items[1]->CheckType(PyRep::Real)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: minimumJoinStandingNew is not a real: %s", tuple15->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepReal *real_16 = (PyRepReal *) tuple15->items[1];
	minimumJoinStandingNew = real_16->value;
		} else
		if(key_string__->value == "corporationType") {
			dict2_ide8 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple17 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple17 = (PyRepTuple *) dict2_cur->second;
	if(tuple17->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple17 is the wrong size: expected 2, but got %d", tuple17->items.size());
		delete packet;
		return(false);
	}

	delete corporationTypeOld;
	corporationTypeOld = tuple17->items[0];
	tuple17->items[0] = NULL;
	
	if(!tuple17->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: corporationTypeNew is not an int: %s", tuple17->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_18 = (PyRepInteger *) tuple17->items[1];
	if(int_18->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field corporationTypeNew");
	}
	corporationTypeNew = int_18->value;
		} else
		if(key_string__->value == "hasPlayerPersonnelManager") {
			dict2_ide9 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple19 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple19 = (PyRepTuple *) dict2_cur->second;
	if(tuple19->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple19 is the wrong size: expected 2, but got %d", tuple19->items.size());
		delete packet;
		return(false);
	}

	delete hasPlayerPersonnelManagerOld;
	hasPlayerPersonnelManagerOld = tuple19->items[0];
	tuple19->items[0] = NULL;
	
	if(!tuple19->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: hasPlayerPersonnelManagerNew is not an int: %s", tuple19->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_20 = (PyRepInteger *) tuple19->items[1];
	if(int_20->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field hasPlayerPersonnelManagerNew");
	}
	hasPlayerPersonnelManagerNew = int_20->value;
		} else
		if(key_string__->value == "sendCharTerminationMessage") {
			dict2_ide10 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple21 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple21 = (PyRepTuple *) dict2_cur->second;
	if(tuple21->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple21 is the wrong size: expected 2, but got %d", tuple21->items.size());
		delete packet;
		return(false);
	}

	delete sendCharTerminationMessageOld;
	sendCharTerminationMessageOld = tuple21->items[0];
	tuple21->items[0] = NULL;
	
	if(!tuple21->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: sendCharTerminationMessageNew is not an int: %s", tuple21->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_22 = (PyRepInteger *) tuple21->items[1];
	if(int_22->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field sendCharTerminationMessageNew");
	}
	sendCharTerminationMessageNew = int_22->value;
		} else
		if(key_string__->value == "creatorID") {
			dict2_ide11 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple23 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple23 = (PyRepTuple *) dict2_cur->second;
	if(tuple23->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple23 is the wrong size: expected 2, but got %d", tuple23->items.size());
		delete packet;
		return(false);
	}

	delete creatorIDOld;
	creatorIDOld = tuple23->items[0];
	tuple23->items[0] = NULL;
	
	if(!tuple23->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: creatorIDNew is not an int: %s", tuple23->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_24 = (PyRepInteger *) tuple23->items[1];
	if(int_24->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field creatorIDNew");
	}
	creatorIDNew = int_24->value;
		} else
		if(key_string__->value == "stationID") {
			dict2_ide12 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple25 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple25 = (PyRepTuple *) dict2_cur->second;
	if(tuple25->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple25 is the wrong size: expected 2, but got %d", tuple25->items.size());
		delete packet;
		return(false);
	}

	delete stationIDOld;
	stationIDOld = tuple25->items[0];
	tuple25->items[0] = NULL;
	
	if(!tuple25->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: stationIDNew is not an int: %s", tuple25->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_26 = (PyRepInteger *) tuple25->items[1];
	if(int_26->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field stationIDNew");
	}
	stationIDNew = int_26->value;
		} else
		if(key_string__->value == "raceID") {
			dict2_ide13 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple27 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple27 = (PyRepTuple *) dict2_cur->second;
	if(tuple27->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple27 is the wrong size: expected 2, but got %d", tuple27->items.size());
		delete packet;
		return(false);
	}

	delete raceIDOld;
	raceIDOld = tuple27->items[0];
	tuple27->items[0] = NULL;
	
	delete raceIDNew;
	raceIDNew = tuple27->items[1];
	tuple27->items[1] = NULL;
	
		} else
		if(key_string__->value == "allianceID") {
			dict2_ide14 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple28 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple28 = (PyRepTuple *) dict2_cur->second;
	if(tuple28->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple28 is the wrong size: expected 2, but got %d", tuple28->items.size());
		delete packet;
		return(false);
	}

	delete allianceIDOld;
	allianceIDOld = tuple28->items[0];
	tuple28->items[0] = NULL;
	
	delete allianceIDNew;
	allianceIDNew = tuple28->items[1];
	tuple28->items[1] = NULL;
	
		} else
		if(key_string__->value == "shares") {
			dict2_ide15 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple29 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple29 = (PyRepTuple *) dict2_cur->second;
	if(tuple29->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple29 is the wrong size: expected 2, but got %d", tuple29->items.size());
		delete packet;
		return(false);
	}

	delete sharesOld;
	sharesOld = tuple29->items[0];
	tuple29->items[0] = NULL;
	
	if(!tuple29->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: sharesNew is not an int: %s", tuple29->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_30 = (PyRepInteger *) tuple29->items[1];
	sharesNew = int64_30->value;
		} else
		if(key_string__->value == "memberCount") {
			dict2_ide16 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple31 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple31 = (PyRepTuple *) dict2_cur->second;
	if(tuple31->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple31 is the wrong size: expected 2, but got %d", tuple31->items.size());
		delete packet;
		return(false);
	}

	delete memberCountOld;
	memberCountOld = tuple31->items[0];
	tuple31->items[0] = NULL;
	
	if(!tuple31->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: memberCountNew is not an int: %s", tuple31->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_32 = (PyRepInteger *) tuple31->items[1];
	if(int_32->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field memberCountNew");
	}
	memberCountNew = int_32->value;
		} else
		if(key_string__->value == "memberLimit") {
			dict2_ide17 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple33 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple33 = (PyRepTuple *) dict2_cur->second;
	if(tuple33->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple33 is the wrong size: expected 2, but got %d", tuple33->items.size());
		delete packet;
		return(false);
	}

	delete memberLimitOld;
	memberLimitOld = tuple33->items[0];
	tuple33->items[0] = NULL;
	
	if(!tuple33->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: memberLimitNew is not an int: %s", tuple33->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_34 = (PyRepInteger *) tuple33->items[1];
	if(int_34->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field memberLimitNew");
	}
	memberLimitNew = int_34->value;
		} else
		if(key_string__->value == "allowedMemberRaceIDs") {
			dict2_ide18 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple35 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple35 = (PyRepTuple *) dict2_cur->second;
	if(tuple35->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple35 is the wrong size: expected 2, but got %d", tuple35->items.size());
		delete packet;
		return(false);
	}

	delete allowedMemberRaceIDsOld;
	allowedMemberRaceIDsOld = tuple35->items[0];
	tuple35->items[0] = NULL;
	
	if(!tuple35->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: allowedMemberRaceIDsNew is not an int: %s", tuple35->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_36 = (PyRepInteger *) tuple35->items[1];
	if(int_36->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field allowedMemberRaceIDsNew");
	}
	allowedMemberRaceIDsNew = int_36->value;
		} else
		if(key_string__->value == "graphicID") {
			dict2_ide19 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple37 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple37 = (PyRepTuple *) dict2_cur->second;
	if(tuple37->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple37 is the wrong size: expected 2, but got %d", tuple37->items.size());
		delete packet;
		return(false);
	}

	delete graphicIDOld;
	graphicIDOld = tuple37->items[0];
	tuple37->items[0] = NULL;
	
	if(!tuple37->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: graphicIDNew is not an int: %s", tuple37->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_38 = (PyRepInteger *) tuple37->items[1];
	if(int_38->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field graphicIDNew");
	}
	graphicIDNew = int_38->value;
		} else
		if(key_string__->value == "shape1") {
			dict2_ide20 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple39 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple39 = (PyRepTuple *) dict2_cur->second;
	if(tuple39->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple39 is the wrong size: expected 2, but got %d", tuple39->items.size());
		delete packet;
		return(false);
	}

	delete shape1Old;
	shape1Old = tuple39->items[0];
	tuple39->items[0] = NULL;
	
	delete shape1New;
	shape1New = tuple39->items[1];
	tuple39->items[1] = NULL;
	
		} else
		if(key_string__->value == "shape2") {
			dict2_ide21 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple40 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple40 = (PyRepTuple *) dict2_cur->second;
	if(tuple40->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple40 is the wrong size: expected 2, but got %d", tuple40->items.size());
		delete packet;
		return(false);
	}

	delete shape2Old;
	shape2Old = tuple40->items[0];
	tuple40->items[0] = NULL;
	
	delete shape2New;
	shape2New = tuple40->items[1];
	tuple40->items[1] = NULL;
	
		} else
		if(key_string__->value == "shape3") {
			dict2_ide22 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple41 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple41 = (PyRepTuple *) dict2_cur->second;
	if(tuple41->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple41 is the wrong size: expected 2, but got %d", tuple41->items.size());
		delete packet;
		return(false);
	}

	delete shape3Old;
	shape3Old = tuple41->items[0];
	tuple41->items[0] = NULL;
	
	delete shape3New;
	shape3New = tuple41->items[1];
	tuple41->items[1] = NULL;
	
		} else
		if(key_string__->value == "color1") {
			dict2_ide23 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple42 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple42 = (PyRepTuple *) dict2_cur->second;
	if(tuple42->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple42 is the wrong size: expected 2, but got %d", tuple42->items.size());
		delete packet;
		return(false);
	}

	delete color1Old;
	color1Old = tuple42->items[0];
	tuple42->items[0] = NULL;
	
	delete color1New;
	color1New = tuple42->items[1];
	tuple42->items[1] = NULL;
	
		} else
		if(key_string__->value == "color2") {
			dict2_ide24 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple43 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple43 = (PyRepTuple *) dict2_cur->second;
	if(tuple43->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple43 is the wrong size: expected 2, but got %d", tuple43->items.size());
		delete packet;
		return(false);
	}

	delete color2Old;
	color2Old = tuple43->items[0];
	tuple43->items[0] = NULL;
	
	delete color2New;
	color2New = tuple43->items[1];
	tuple43->items[1] = NULL;
	
		} else
		if(key_string__->value == "color3") {
			dict2_ide25 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple44 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple44 = (PyRepTuple *) dict2_cur->second;
	if(tuple44->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple44 is the wrong size: expected 2, but got %d", tuple44->items.size());
		delete packet;
		return(false);
	}

	delete color3Old;
	color3Old = tuple44->items[0];
	tuple44->items[0] = NULL;
	
	delete color3New;
	color3New = tuple44->items[1];
	tuple44->items[1] = NULL;
	
		} else
		if(key_string__->value == "typeface") {
			dict2_ide26 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple45 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple45 = (PyRepTuple *) dict2_cur->second;
	if(tuple45->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple45 is the wrong size: expected 2, but got %d", tuple45->items.size());
		delete packet;
		return(false);
	}

	delete typefaceOld;
	typefaceOld = tuple45->items[0];
	tuple45->items[0] = NULL;
	
	delete typefaceNew;
	typefaceNew = tuple45->items[1];
	tuple45->items[1] = NULL;
	
		} else
		if(key_string__->value == "division1") {
			dict2_ide27 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple46 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple46 = (PyRepTuple *) dict2_cur->second;
	if(tuple46->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple46 is the wrong size: expected 2, but got %d", tuple46->items.size());
		delete packet;
		return(false);
	}

	delete division1Old;
	division1Old = tuple46->items[0];
	tuple46->items[0] = NULL;
	
	delete division1New;
	division1New = tuple46->items[1];
	tuple46->items[1] = NULL;
	
		} else
		if(key_string__->value == "division2") {
			dict2_ide28 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple47 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple47 = (PyRepTuple *) dict2_cur->second;
	if(tuple47->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple47 is the wrong size: expected 2, but got %d", tuple47->items.size());
		delete packet;
		return(false);
	}

	delete division2Old;
	division2Old = tuple47->items[0];
	tuple47->items[0] = NULL;
	
	delete division2New;
	division2New = tuple47->items[1];
	tuple47->items[1] = NULL;
	
		} else
		if(key_string__->value == "division3") {
			dict2_ide29 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple48 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple48 = (PyRepTuple *) dict2_cur->second;
	if(tuple48->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple48 is the wrong size: expected 2, but got %d", tuple48->items.size());
		delete packet;
		return(false);
	}

	delete division3Old;
	division3Old = tuple48->items[0];
	tuple48->items[0] = NULL;
	
	delete division3New;
	division3New = tuple48->items[1];
	tuple48->items[1] = NULL;
	
		} else
		if(key_string__->value == "division4") {
			dict2_ide30 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple49 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple49 = (PyRepTuple *) dict2_cur->second;
	if(tuple49->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple49 is the wrong size: expected 2, but got %d", tuple49->items.size());
		delete packet;
		return(false);
	}

	delete division4Old;
	division4Old = tuple49->items[0];
	tuple49->items[0] = NULL;
	
	delete division4New;
	division4New = tuple49->items[1];
	tuple49->items[1] = NULL;
	
		} else
		if(key_string__->value == "division5") {
			dict2_ide31 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple50 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple50 = (PyRepTuple *) dict2_cur->second;
	if(tuple50->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple50 is the wrong size: expected 2, but got %d", tuple50->items.size());
		delete packet;
		return(false);
	}

	delete division5Old;
	division5Old = tuple50->items[0];
	tuple50->items[0] = NULL;
	
	delete division5New;
	division5New = tuple50->items[1];
	tuple50->items[1] = NULL;
	
		} else
		if(key_string__->value == "division6") {
			dict2_ide32 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple51 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple51 = (PyRepTuple *) dict2_cur->second;
	if(tuple51->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple51 is the wrong size: expected 2, but got %d", tuple51->items.size());
		delete packet;
		return(false);
	}

	delete division6Old;
	division6Old = tuple51->items[0];
	tuple51->items[0] = NULL;
	
	delete division6New;
	division6New = tuple51->items[1];
	tuple51->items[1] = NULL;
	
		} else
		if(key_string__->value == "division7") {
			dict2_ide33 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple52 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple52 = (PyRepTuple *) dict2_cur->second;
	if(tuple52->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple52 is the wrong size: expected 2, but got %d", tuple52->items.size());
		delete packet;
		return(false);
	}

	delete division7Old;
	division7Old = tuple52->items[0];
	tuple52->items[0] = NULL;
	
	delete division7New;
	division7New = tuple52->items[1];
	tuple52->items[1] = NULL;
	
		} else
		if(key_string__->value == "deleted") {
			dict2_ide34 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple53 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple53 = (PyRepTuple *) dict2_cur->second;
	if(tuple53->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple53 is the wrong size: expected 2, but got %d", tuple53->items.size());
		delete packet;
		return(false);
	}

	delete deletedOld;
	deletedOld = tuple53->items[0];
	tuple53->items[0] = NULL;
	
	if(!tuple53->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: deletedNew is not an int: %s", tuple53->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_54 = (PyRepInteger *) tuple53->items[1];
	if(int_54->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field deletedNew");
	}
	deletedNew = int_54->value;
		} else
		if(key_string__->value == "ceoID") {
			dict2_ide35 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple55 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple55 = (PyRepTuple *) dict2_cur->second;
	if(tuple55->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: tuple55 is the wrong size: expected 2, but got %d", tuple55->items.size());
		delete packet;
		return(false);
	}

	delete ceoIDOld;
	ceoIDOld = tuple55->items[0];
	tuple55->items[0] = NULL;
	
	if(!tuple55->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: ceoIDNew is not an int: %s", tuple55->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_56 = (PyRepInteger *) tuple55->items[1];
	if(int_56->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporaionChanged: truncating 64 bit into into 32 bit int for field ceoIDNew");
	}
	ceoIDNew = int_56->value;
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Unknown key string '%s' in dict2", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict2_ide1) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide1' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide2' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide3) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide3' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide4) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide4' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide5) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide5' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide6) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide6' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide7) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide7' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide8) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide8' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide9) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide9' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide10) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide10' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide11) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide11' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide12) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide12' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide13) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide13' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide14) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide14' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide15) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide15' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide16) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide16' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide17) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide17' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide18) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide18' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide19) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide19' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide20) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide20' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide21) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide21' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide22) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide22' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide23) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide23' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide24) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide24' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide25) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide25' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide26) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide26' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide27) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide27' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide28) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide28' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide29) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide29' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide30) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide30' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide31) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide31' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide32) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide32' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide33) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide33' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide34) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide34' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_ide35) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporaionChanged failed: Missing dict entry for 'ide35' in dict2");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

Notify_OnCorporaionChanged *Notify_OnCorporaionChanged::Clone() const {
	Notify_OnCorporaionChanged *res = new Notify_OnCorporaionChanged;
	res->CloneFrom(this);
	return(res);
}

void Notify_OnCorporaionChanged::CloneFrom(const Notify_OnCorporaionChanged *from) {
	corpID = from->corpID;
	delete corporationIDOld;
	if(from->corporationIDOld == NULL) {
		corporationIDOld = NULL;
	} else {
		corporationIDOld = from->corporationIDOld->Clone();
	}
	corporationIDNew = from->corporationIDNew;
	delete corporationNameOld;
	if(from->corporationNameOld == NULL) {
		corporationNameOld = NULL;
	} else {
		corporationNameOld = from->corporationNameOld->Clone();
	}
	corporationNameNew = from->corporationNameNew;
	delete descriptionOld;
	if(from->descriptionOld == NULL) {
		descriptionOld = NULL;
	} else {
		descriptionOld = from->descriptionOld->Clone();
	}
	descriptionNew = from->descriptionNew;
	delete tickerNameOld;
	if(from->tickerNameOld == NULL) {
		tickerNameOld = NULL;
	} else {
		tickerNameOld = from->tickerNameOld->Clone();
	}
	tickerNameNew = from->tickerNameNew;
	delete urlOld;
	if(from->urlOld == NULL) {
		urlOld = NULL;
	} else {
		urlOld = from->urlOld->Clone();
	}
	urlNew = from->urlNew;
	delete taxRateOld;
	if(from->taxRateOld == NULL) {
		taxRateOld = NULL;
	} else {
		taxRateOld = from->taxRateOld->Clone();
	}
	taxRateNew = from->taxRateNew;
	delete minimumJoinStandingOld;
	if(from->minimumJoinStandingOld == NULL) {
		minimumJoinStandingOld = NULL;
	} else {
		minimumJoinStandingOld = from->minimumJoinStandingOld->Clone();
	}
	minimumJoinStandingNew = from->minimumJoinStandingNew;
	delete corporationTypeOld;
	if(from->corporationTypeOld == NULL) {
		corporationTypeOld = NULL;
	} else {
		corporationTypeOld = from->corporationTypeOld->Clone();
	}
	corporationTypeNew = from->corporationTypeNew;
	delete hasPlayerPersonnelManagerOld;
	if(from->hasPlayerPersonnelManagerOld == NULL) {
		hasPlayerPersonnelManagerOld = NULL;
	} else {
		hasPlayerPersonnelManagerOld = from->hasPlayerPersonnelManagerOld->Clone();
	}
	hasPlayerPersonnelManagerNew = from->hasPlayerPersonnelManagerNew;
	delete sendCharTerminationMessageOld;
	if(from->sendCharTerminationMessageOld == NULL) {
		sendCharTerminationMessageOld = NULL;
	} else {
		sendCharTerminationMessageOld = from->sendCharTerminationMessageOld->Clone();
	}
	sendCharTerminationMessageNew = from->sendCharTerminationMessageNew;
	delete creatorIDOld;
	if(from->creatorIDOld == NULL) {
		creatorIDOld = NULL;
	} else {
		creatorIDOld = from->creatorIDOld->Clone();
	}
	creatorIDNew = from->creatorIDNew;
	delete stationIDOld;
	if(from->stationIDOld == NULL) {
		stationIDOld = NULL;
	} else {
		stationIDOld = from->stationIDOld->Clone();
	}
	stationIDNew = from->stationIDNew;
	delete raceIDOld;
	if(from->raceIDOld == NULL) {
		raceIDOld = NULL;
	} else {
		raceIDOld = from->raceIDOld->Clone();
	}
	delete raceIDNew;
	if(from->raceIDNew == NULL) {
		raceIDNew = NULL;
	} else {
		raceIDNew = from->raceIDNew->Clone();
	}
	delete allianceIDOld;
	if(from->allianceIDOld == NULL) {
		allianceIDOld = NULL;
	} else {
		allianceIDOld = from->allianceIDOld->Clone();
	}
	delete allianceIDNew;
	if(from->allianceIDNew == NULL) {
		allianceIDNew = NULL;
	} else {
		allianceIDNew = from->allianceIDNew->Clone();
	}
	delete sharesOld;
	if(from->sharesOld == NULL) {
		sharesOld = NULL;
	} else {
		sharesOld = from->sharesOld->Clone();
	}
	sharesNew = from->sharesNew;
	delete memberCountOld;
	if(from->memberCountOld == NULL) {
		memberCountOld = NULL;
	} else {
		memberCountOld = from->memberCountOld->Clone();
	}
	memberCountNew = from->memberCountNew;
	delete memberLimitOld;
	if(from->memberLimitOld == NULL) {
		memberLimitOld = NULL;
	} else {
		memberLimitOld = from->memberLimitOld->Clone();
	}
	memberLimitNew = from->memberLimitNew;
	delete allowedMemberRaceIDsOld;
	if(from->allowedMemberRaceIDsOld == NULL) {
		allowedMemberRaceIDsOld = NULL;
	} else {
		allowedMemberRaceIDsOld = from->allowedMemberRaceIDsOld->Clone();
	}
	allowedMemberRaceIDsNew = from->allowedMemberRaceIDsNew;
	delete graphicIDOld;
	if(from->graphicIDOld == NULL) {
		graphicIDOld = NULL;
	} else {
		graphicIDOld = from->graphicIDOld->Clone();
	}
	graphicIDNew = from->graphicIDNew;
	delete shape1Old;
	if(from->shape1Old == NULL) {
		shape1Old = NULL;
	} else {
		shape1Old = from->shape1Old->Clone();
	}
	delete shape1New;
	if(from->shape1New == NULL) {
		shape1New = NULL;
	} else {
		shape1New = from->shape1New->Clone();
	}
	delete shape2Old;
	if(from->shape2Old == NULL) {
		shape2Old = NULL;
	} else {
		shape2Old = from->shape2Old->Clone();
	}
	delete shape2New;
	if(from->shape2New == NULL) {
		shape2New = NULL;
	} else {
		shape2New = from->shape2New->Clone();
	}
	delete shape3Old;
	if(from->shape3Old == NULL) {
		shape3Old = NULL;
	} else {
		shape3Old = from->shape3Old->Clone();
	}
	delete shape3New;
	if(from->shape3New == NULL) {
		shape3New = NULL;
	} else {
		shape3New = from->shape3New->Clone();
	}
	delete color1Old;
	if(from->color1Old == NULL) {
		color1Old = NULL;
	} else {
		color1Old = from->color1Old->Clone();
	}
	delete color1New;
	if(from->color1New == NULL) {
		color1New = NULL;
	} else {
		color1New = from->color1New->Clone();
	}
	delete color2Old;
	if(from->color2Old == NULL) {
		color2Old = NULL;
	} else {
		color2Old = from->color2Old->Clone();
	}
	delete color2New;
	if(from->color2New == NULL) {
		color2New = NULL;
	} else {
		color2New = from->color2New->Clone();
	}
	delete color3Old;
	if(from->color3Old == NULL) {
		color3Old = NULL;
	} else {
		color3Old = from->color3Old->Clone();
	}
	delete color3New;
	if(from->color3New == NULL) {
		color3New = NULL;
	} else {
		color3New = from->color3New->Clone();
	}
	delete typefaceOld;
	if(from->typefaceOld == NULL) {
		typefaceOld = NULL;
	} else {
		typefaceOld = from->typefaceOld->Clone();
	}
	delete typefaceNew;
	if(from->typefaceNew == NULL) {
		typefaceNew = NULL;
	} else {
		typefaceNew = from->typefaceNew->Clone();
	}
	delete division1Old;
	if(from->division1Old == NULL) {
		division1Old = NULL;
	} else {
		division1Old = from->division1Old->Clone();
	}
	delete division1New;
	if(from->division1New == NULL) {
		division1New = NULL;
	} else {
		division1New = from->division1New->Clone();
	}
	delete division2Old;
	if(from->division2Old == NULL) {
		division2Old = NULL;
	} else {
		division2Old = from->division2Old->Clone();
	}
	delete division2New;
	if(from->division2New == NULL) {
		division2New = NULL;
	} else {
		division2New = from->division2New->Clone();
	}
	delete division3Old;
	if(from->division3Old == NULL) {
		division3Old = NULL;
	} else {
		division3Old = from->division3Old->Clone();
	}
	delete division3New;
	if(from->division3New == NULL) {
		division3New = NULL;
	} else {
		division3New = from->division3New->Clone();
	}
	delete division4Old;
	if(from->division4Old == NULL) {
		division4Old = NULL;
	} else {
		division4Old = from->division4Old->Clone();
	}
	delete division4New;
	if(from->division4New == NULL) {
		division4New = NULL;
	} else {
		division4New = from->division4New->Clone();
	}
	delete division5Old;
	if(from->division5Old == NULL) {
		division5Old = NULL;
	} else {
		division5Old = from->division5Old->Clone();
	}
	delete division5New;
	if(from->division5New == NULL) {
		division5New = NULL;
	} else {
		division5New = from->division5New->Clone();
	}
	delete division6Old;
	if(from->division6Old == NULL) {
		division6Old = NULL;
	} else {
		division6Old = from->division6Old->Clone();
	}
	delete division6New;
	if(from->division6New == NULL) {
		division6New = NULL;
	} else {
		division6New = from->division6New->Clone();
	}
	delete division7Old;
	if(from->division7Old == NULL) {
		division7Old = NULL;
	} else {
		division7Old = from->division7Old->Clone();
	}
	delete division7New;
	if(from->division7New == NULL) {
		division7New = NULL;
	} else {
		division7New = from->division7New->Clone();
	}
	delete deletedOld;
	if(from->deletedOld == NULL) {
		deletedOld = NULL;
	} else {
		deletedOld = from->deletedOld->Clone();
	}
	deletedNew = from->deletedNew;
	delete ceoIDOld;
	if(from->ceoIDOld == NULL) {
		ceoIDOld = NULL;
	} else {
		ceoIDOld = from->ceoIDOld->Clone();
	}
	ceoIDNew = from->ceoIDNew;
	
}


Notify_OCCSessionChangeNotification::Notify_OCCSessionChangeNotification() {
	corpRoleOld = 0;
	corpRoleNew = 0;
	corpidOld = 0;
	corpidNew = 0;
	corpRoleAllOld = 0;
	corpRoleAllNew = 0;
	corpRoleBaseOld = 0;
	corpRoleBaseNew = 0;
	corpHqIDOld = 0;
	corpHqIDNew = 0;
	corpRoleHQOld = 0;
	corpRoleHQNew = 0;
	corpRoleOtherOld = 0;
	corpRoleOtherNew = 0;
}

Notify_OCCSessionChangeNotification::~Notify_OCCSessionChangeNotification() {
}

void Notify_OCCSessionChangeNotification::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_OCCSessionChangeNotification", pfx);
	_log(l_type, "%scorpRoleOld=" I64u, pfx, corpRoleOld);
	_log(l_type, "%scorpRoleNew=" I64u, pfx, corpRoleNew);
	_log(l_type, "%scorpidOld=%lu", pfx, corpidOld);
	_log(l_type, "%scorpidNew=%lu", pfx, corpidNew);
	_log(l_type, "%scorpRoleAllOld=" I64u, pfx, corpRoleAllOld);
	_log(l_type, "%scorpRoleAllNew=" I64u, pfx, corpRoleAllNew);
	_log(l_type, "%scorpRoleBaseOld=" I64u, pfx, corpRoleBaseOld);
	_log(l_type, "%scorpRoleBaseNew=" I64u, pfx, corpRoleBaseNew);
	_log(l_type, "%scorpHqIDOld=%lu", pfx, corpHqIDOld);
	_log(l_type, "%scorpHqIDNew=%lu", pfx, corpHqIDNew);
	_log(l_type, "%scorpRoleHQOld=" I64u, pfx, corpRoleHQOld);
	_log(l_type, "%scorpRoleHQNew=" I64u, pfx, corpRoleHQNew);
	_log(l_type, "%scorpRoleOtherOld=" I64u, pfx, corpRoleOtherOld);
	_log(l_type, "%scorpRoleOtherNew=" I64u, pfx, corpRoleOtherNew);
}

PyRepDict *Notify_OCCSessionChangeNotification::Encode() {
	PyRepDict *res = NULL;
	PyRepDict *dict0 = new PyRepDict();
	PyRep *dict0_0;
	PyRepTuple *tuple1 = new PyRepTuple(2);
	tuple1->items[0] = new PyRepInteger(corpRoleOld);
	tuple1->items[1] = new PyRepInteger(corpRoleNew);
	dict0_0 = tuple1;
	
	dict0->items[
		new PyRepString("corprole")
	] = dict0_0;
	PyRep *dict0_1;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	tuple2->items[0] = new PyRepInteger(corpidOld);
	tuple2->items[1] = new PyRepInteger(corpidNew);
	dict0_1 = tuple2;
	
	dict0->items[
		new PyRepString("corpid")
	] = dict0_1;
	PyRep *dict0_2;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	tuple3->items[0] = new PyRepInteger(corpRoleAllOld);
	tuple3->items[1] = new PyRepInteger(corpRoleAllNew);
	dict0_2 = tuple3;
	
	dict0->items[
		new PyRepString("rolesAtAll")
	] = dict0_2;
	PyRep *dict0_3;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	tuple4->items[0] = new PyRepInteger(corpRoleBaseOld);
	tuple4->items[1] = new PyRepInteger(corpRoleBaseNew);
	dict0_3 = tuple4;
	
	dict0->items[
		new PyRepString("rolesAtBase")
	] = dict0_3;
	PyRep *dict0_4;
	PyRepTuple *tuple5 = new PyRepTuple(2);
	tuple5->items[0] = new PyRepInteger(corpHqIDOld);
	tuple5->items[1] = new PyRepInteger(corpHqIDNew);
	dict0_4 = tuple5;
	
	dict0->items[
		new PyRepString("hqID")
	] = dict0_4;
	PyRep *dict0_5;
	PyRepTuple *tuple6 = new PyRepTuple(2);
	tuple6->items[0] = new PyRepInteger(corpRoleHQOld);
	tuple6->items[1] = new PyRepInteger(corpRoleHQNew);
	dict0_5 = tuple6;
	
	dict0->items[
		new PyRepString("rolesAtHQ")
	] = dict0_5;
	PyRep *dict0_6;
	PyRepTuple *tuple7 = new PyRepTuple(2);
	tuple7->items[0] = new PyRepInteger(corpRoleOtherOld);
	tuple7->items[1] = new PyRepInteger(corpRoleOtherNew);
	dict0_6 = tuple7;
	
	dict0->items[
		new PyRepString("rolesAtOther")
	] = dict0_6;
	res = dict0;
	

	return(res);
}

PyRepDict *Notify_OCCSessionChangeNotification::FastEncode() {
	PyRepDict *res = NULL;
	PyRepDict *dict0 = new PyRepDict();
	PyRep *dict0_0;
	PyRepTuple *tuple1 = new PyRepTuple(2);
	tuple1->items[0] = new PyRepInteger(corpRoleOld);
	tuple1->items[1] = new PyRepInteger(corpRoleNew);
	dict0_0 = tuple1;
	
	dict0->items[
		new PyRepString("corprole")
	] = dict0_0;
	PyRep *dict0_1;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	tuple2->items[0] = new PyRepInteger(corpidOld);
	tuple2->items[1] = new PyRepInteger(corpidNew);
	dict0_1 = tuple2;
	
	dict0->items[
		new PyRepString("corpid")
	] = dict0_1;
	PyRep *dict0_2;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	tuple3->items[0] = new PyRepInteger(corpRoleAllOld);
	tuple3->items[1] = new PyRepInteger(corpRoleAllNew);
	dict0_2 = tuple3;
	
	dict0->items[
		new PyRepString("rolesAtAll")
	] = dict0_2;
	PyRep *dict0_3;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	tuple4->items[0] = new PyRepInteger(corpRoleBaseOld);
	tuple4->items[1] = new PyRepInteger(corpRoleBaseNew);
	dict0_3 = tuple4;
	
	dict0->items[
		new PyRepString("rolesAtBase")
	] = dict0_3;
	PyRep *dict0_4;
	PyRepTuple *tuple5 = new PyRepTuple(2);
	tuple5->items[0] = new PyRepInteger(corpHqIDOld);
	tuple5->items[1] = new PyRepInteger(corpHqIDNew);
	dict0_4 = tuple5;
	
	dict0->items[
		new PyRepString("hqID")
	] = dict0_4;
	PyRep *dict0_5;
	PyRepTuple *tuple6 = new PyRepTuple(2);
	tuple6->items[0] = new PyRepInteger(corpRoleHQOld);
	tuple6->items[1] = new PyRepInteger(corpRoleHQNew);
	dict0_5 = tuple6;
	
	dict0->items[
		new PyRepString("rolesAtHQ")
	] = dict0_5;
	PyRep *dict0_6;
	PyRepTuple *tuple7 = new PyRepTuple(2);
	tuple7->items[0] = new PyRepInteger(corpRoleOtherOld);
	tuple7->items[1] = new PyRepInteger(corpRoleOtherNew);
	dict0_6 = tuple7;
	
	dict0->items[
		new PyRepString("rolesAtOther")
	] = dict0_6;
	res = dict0;
	

	return(res);
}

bool Notify_OCCSessionChangeNotification::Decode(PyRepDict **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_OCCSessionChangeNotification::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: dict0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	bool dict0_it1 = false;
	bool dict0_it2 = false;
	bool dict0_it3 = false;
	bool dict0_it4 = false;
	bool dict0_it5 = false;
	bool dict0_it6 = false;
	bool dict0_it7 = false;
	PyRepDict *dict0 = (PyRepDict *) packet;
	
	PyRepDict::iterator dict0_cur, dict0_end;
	dict0_cur = dict0->items.begin();
	dict0_end = dict0->items.end();
	for(; dict0_cur != dict0_end; dict0_cur++) {
		PyRep *key__ = dict0_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: a key in dict0 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "corprole") {
			dict0_it1 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple1 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple1 = (PyRepTuple *) dict0_cur->second;
	if(tuple1->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple1 is the wrong size: expected 2, but got %d", tuple1->items.size());
		delete packet;
		return(false);
	}

	if(!tuple1->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleOld is not an int: %s", tuple1->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_2 = (PyRepInteger *) tuple1->items[0];
	corpRoleOld = int64_2->value;
	if(!tuple1->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleNew is not an int: %s", tuple1->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_3 = (PyRepInteger *) tuple1->items[1];
	corpRoleNew = int64_3->value;
		} else
		if(key_string__->value == "corpid") {
			dict0_it2 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple4 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple4 = (PyRepTuple *) dict0_cur->second;
	if(tuple4->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple4 is the wrong size: expected 2, but got %d", tuple4->items.size());
		delete packet;
		return(false);
	}

	if(!tuple4->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpidOld is not an int: %s", tuple4->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_5 = (PyRepInteger *) tuple4->items[0];
	if(int_5->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OCCSessionChangeNotification: truncating 64 bit into into 32 bit int for field corpidOld");
	}
	corpidOld = int_5->value;
	if(!tuple4->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpidNew is not an int: %s", tuple4->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_6 = (PyRepInteger *) tuple4->items[1];
	if(int_6->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OCCSessionChangeNotification: truncating 64 bit into into 32 bit int for field corpidNew");
	}
	corpidNew = int_6->value;
		} else
		if(key_string__->value == "rolesAtAll") {
			dict0_it3 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple7 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple7 = (PyRepTuple *) dict0_cur->second;
	if(tuple7->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple7 is the wrong size: expected 2, but got %d", tuple7->items.size());
		delete packet;
		return(false);
	}

	if(!tuple7->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleAllOld is not an int: %s", tuple7->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_8 = (PyRepInteger *) tuple7->items[0];
	corpRoleAllOld = int64_8->value;
	if(!tuple7->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleAllNew is not an int: %s", tuple7->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_9 = (PyRepInteger *) tuple7->items[1];
	corpRoleAllNew = int64_9->value;
		} else
		if(key_string__->value == "rolesAtBase") {
			dict0_it4 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple10 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple10 = (PyRepTuple *) dict0_cur->second;
	if(tuple10->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple10 is the wrong size: expected 2, but got %d", tuple10->items.size());
		delete packet;
		return(false);
	}

	if(!tuple10->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleBaseOld is not an int: %s", tuple10->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_11 = (PyRepInteger *) tuple10->items[0];
	corpRoleBaseOld = int64_11->value;
	if(!tuple10->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleBaseNew is not an int: %s", tuple10->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_12 = (PyRepInteger *) tuple10->items[1];
	corpRoleBaseNew = int64_12->value;
		} else
		if(key_string__->value == "hqID") {
			dict0_it5 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple13 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple13 = (PyRepTuple *) dict0_cur->second;
	if(tuple13->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple13 is the wrong size: expected 2, but got %d", tuple13->items.size());
		delete packet;
		return(false);
	}

	if(!tuple13->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpHqIDOld is not an int: %s", tuple13->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_14 = (PyRepInteger *) tuple13->items[0];
	if(int_14->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OCCSessionChangeNotification: truncating 64 bit into into 32 bit int for field corpHqIDOld");
	}
	corpHqIDOld = int_14->value;
	if(!tuple13->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpHqIDNew is not an int: %s", tuple13->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_15 = (PyRepInteger *) tuple13->items[1];
	if(int_15->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OCCSessionChangeNotification: truncating 64 bit into into 32 bit int for field corpHqIDNew");
	}
	corpHqIDNew = int_15->value;
		} else
		if(key_string__->value == "rolesAtHQ") {
			dict0_it6 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple16 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple16 = (PyRepTuple *) dict0_cur->second;
	if(tuple16->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple16 is the wrong size: expected 2, but got %d", tuple16->items.size());
		delete packet;
		return(false);
	}

	if(!tuple16->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleHQOld is not an int: %s", tuple16->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_17 = (PyRepInteger *) tuple16->items[0];
	corpRoleHQOld = int64_17->value;
	if(!tuple16->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleHQNew is not an int: %s", tuple16->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_18 = (PyRepInteger *) tuple16->items[1];
	corpRoleHQNew = int64_18->value;
		} else
		if(key_string__->value == "rolesAtOther") {
			dict0_it7 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple19 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple19 = (PyRepTuple *) dict0_cur->second;
	if(tuple19->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: tuple19 is the wrong size: expected 2, but got %d", tuple19->items.size());
		delete packet;
		return(false);
	}

	if(!tuple19->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleOtherOld is not an int: %s", tuple19->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_20 = (PyRepInteger *) tuple19->items[0];
	corpRoleOtherOld = int64_20->value;
	if(!tuple19->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: corpRoleOtherNew is not an int: %s", tuple19->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_21 = (PyRepInteger *) tuple19->items[1];
	corpRoleOtherNew = int64_21->value;
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: Unknown key string '%s' in dict0", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict0_it1) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: Missing dict entry for 'it1' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_it2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: Missing dict entry for 'it2' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_it3) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: Missing dict entry for 'it3' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_it4) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: Missing dict entry for 'it4' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_it5) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: Missing dict entry for 'it5' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_it6) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: Missing dict entry for 'it6' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_it7) {
		_log(NET__PACKET_ERROR, "Decode Notify_OCCSessionChangeNotification failed: Missing dict entry for 'it7' in dict0");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

Notify_OCCSessionChangeNotification *Notify_OCCSessionChangeNotification::Clone() const {
	Notify_OCCSessionChangeNotification *res = new Notify_OCCSessionChangeNotification;
	res->CloneFrom(this);
	return(res);
}

void Notify_OCCSessionChangeNotification::CloneFrom(const Notify_OCCSessionChangeNotification *from) {
	corpRoleOld = from->corpRoleOld;
	corpRoleNew = from->corpRoleNew;
	corpidOld = from->corpidOld;
	corpidNew = from->corpidNew;
	corpRoleAllOld = from->corpRoleAllOld;
	corpRoleAllNew = from->corpRoleAllNew;
	corpRoleBaseOld = from->corpRoleBaseOld;
	corpRoleBaseNew = from->corpRoleBaseNew;
	corpHqIDOld = from->corpHqIDOld;
	corpHqIDNew = from->corpHqIDNew;
	corpRoleHQOld = from->corpRoleHQOld;
	corpRoleHQNew = from->corpRoleHQNew;
	corpRoleOtherOld = from->corpRoleOtherOld;
	corpRoleOtherNew = from->corpRoleOtherNew;
	
}


CorpOfficeSparseRowset::CorpOfficeSparseRowset() {
	/* object of type util.SparseRowset */
	/*  This is probably a header. No indication of it though  */
	/*  This has to be String Table Item 155, which is out of range, so I have to create it a bit differently  */
	stationID = "stationID";
	typeID = "typeID";
	officeID = "officeID";
	officeFolderID = "officeFolderID";
	/*  Substruct containing a substream containing the binding stuff  */
	/*  String, Dict, int field  */
	bindedObject = NULL;
	/*  Maybe number of offices?  */
	officeNumber = 0;
}

CorpOfficeSparseRowset::~CorpOfficeSparseRowset() {
	/*  This is probably a header. No indication of it though  */
	/*  This has to be String Table Item 155, which is out of range, so I have to create it a bit differently  */
	/*  Substruct containing a substream containing the binding stuff  */
	/*  String, Dict, int field  */
	delete bindedObject;
	/*  Maybe number of offices?  */
}

void CorpOfficeSparseRowset::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sCorpOfficeSparseRowset", pfx);
	_log(l_type, "%sObject of type util.SparseRowset:", pfx);
	/*  This is probably a header. No indication of it though  */
	/*  This has to be String Table Item 155, which is out of range, so I have to create it a bit differently  */
	_log(l_type, "%sstationID='%s'", pfx, stationID.c_str());
	_log(l_type, "%stypeID='%s'", pfx, typeID.c_str());
	_log(l_type, "%sofficeID='%s'", pfx, officeID.c_str());
	_log(l_type, "%sofficeFolderID='%s'", pfx, officeFolderID.c_str());
	/*  Substruct containing a substream containing the binding stuff  */
	/*  String, Dict, int field  */
	_log(l_type, "%sbindedObject:", pfx);
	std::string bindedObject_n(pfx);
	bindedObject_n += "    ";
	if(bindedObject == NULL) {
		_log(l_type, "%sERROR: NULL REP!", bindedObject_n.c_str());
	} else {
		bindedObject->Dump(l_type, bindedObject_n.c_str());
	}
	/*  Maybe number of offices?  */
	_log(l_type, "%sofficeNumber=%lu", pfx, officeNumber);
}

PyRepObject *CorpOfficeSparseRowset::Encode() {
	PyRepObject *res = NULL;
	PyRep *args0;
	PyRepTuple *tuple1 = new PyRepTuple(3);
	/*  This is probably a header. No indication of it though  */
	PyRepList *list2 = new PyRepList();
	list2->items.resize(4, NULL);
	/*  This has to be String Table Item 155, which is out of range, so I have to create it a bit differently  */
	list2->items[0] = new PyRepString(stationID);
	list2->items[1] = new PyRepString(typeID);
	list2->items[2] = new PyRepString(officeID);
	list2->items[3] = new PyRepString(officeFolderID);
	tuple1->items[0] = list2;
	
	/*  Substruct containing a substream containing the binding stuff  */
	/*  String, Dict, int field  */
	if(bindedObject == NULL) {
		_log(NET__PACKET_ERROR, "Encode CorpOfficeSparseRowset: bindedObject is NULL! hacking in a PyRepNone");
		bindedObject = new PyRepNone();
	}
	tuple1->items[1] = bindedObject->Clone();
	/*  Maybe number of offices?  */
	tuple1->items[2] = new PyRepInteger(officeNumber);
	args0 = tuple1;
	
	res = new PyRepObject(
			"util.SparseRowset",
			args0
		);
	

	return(res);
}

PyRepObject *CorpOfficeSparseRowset::FastEncode() {
	PyRepObject *res = NULL;
	PyRep *args0;
	PyRepTuple *tuple1 = new PyRepTuple(3);
	/*  This is probably a header. No indication of it though  */
	PyRepList *list2 = new PyRepList();
	list2->items.resize(4, NULL);
	/*  This has to be String Table Item 155, which is out of range, so I have to create it a bit differently  */
	list2->items[0] = new PyRepString(stationID);
	list2->items[1] = new PyRepString(typeID);
	list2->items[2] = new PyRepString(officeID);
	list2->items[3] = new PyRepString(officeFolderID);
	tuple1->items[0] = list2;
	
	/*  Substruct containing a substream containing the binding stuff  */
	/*  String, Dict, int field  */
	if(bindedObject == NULL) {
		_log(NET__PACKET_ERROR, "Encode CorpOfficeSparseRowset: bindedObject is NULL! hacking in a PyRepNone");
		bindedObject = new PyRepNone();
	}
	tuple1->items[1] = bindedObject;
	bindedObject = NULL;
	/*  Maybe number of offices?  */
	tuple1->items[2] = new PyRepInteger(officeNumber);
	args0 = tuple1;
	
	res = new PyRepObject(
			"util.SparseRowset",
			args0
		);
	

	return(res);
}

bool CorpOfficeSparseRowset::Decode(PyRepObject **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool CorpOfficeSparseRowset::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Object)) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: obj_0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepObject *obj_0 = (PyRepObject *) packet;
	
	if(obj_0->type != "util.SparseRowset") {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: obj_0 is the wrong object type. Expected 'util.SparseRowset', got '%s'", obj_0->type.c_str());
		delete packet;
		return(false);
	}
	
	if(!obj_0->arguments->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: tuple1 is the wrong type: %s", obj_0->arguments->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple1 = (PyRepTuple *) obj_0->arguments;
	if(tuple1->items.size() != 3) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: tuple1 is the wrong size: expected 3, but got %d", tuple1->items.size());
		delete packet;
		return(false);
	}

	/*  This is probably a header. No indication of it though  */
	if(!tuple1->items[0]->CheckType(PyRep::List)) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: list2 is not a list: %s", tuple1->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepList *list2 = (PyRepList *) tuple1->items[0];
	if(list2->items.size() != 4) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: list2 is the wrong size: expected 4, but got %d", list2->items.size());
		delete packet;
		return(false);
	}

	/*  This has to be String Table Item 155, which is out of range, so I have to create it a bit differently  */
	if(!list2->items[0]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: stationID is not a string: %s", list2->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_3 = (PyRepString *) list2->items[0];
	stationID = string_3->value;
	if(!list2->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: typeID is not a string: %s", list2->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_4 = (PyRepString *) list2->items[1];
	typeID = string_4->value;
	if(!list2->items[2]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: officeID is not a string: %s", list2->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_5 = (PyRepString *) list2->items[2];
	officeID = string_5->value;
	if(!list2->items[3]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: officeFolderID is not a string: %s", list2->items[3]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_6 = (PyRepString *) list2->items[3];
	officeFolderID = string_6->value;
	/*  Substruct containing a substream containing the binding stuff  */
	/*  String, Dict, int field  */
	delete bindedObject;
	bindedObject = tuple1->items[1];
	tuple1->items[1] = NULL;
	
	/*  Maybe number of offices?  */
	if(!tuple1->items[2]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode CorpOfficeSparseRowset failed: officeNumber is not an int: %s", tuple1->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_7 = (PyRepInteger *) tuple1->items[2];
	if(int_7->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode CorpOfficeSparseRowset: truncating 64 bit into into 32 bit int for field officeNumber");
	}
	officeNumber = int_7->value;

	delete packet;
	return(true);
}

CorpOfficeSparseRowset *CorpOfficeSparseRowset::Clone() const {
	CorpOfficeSparseRowset *res = new CorpOfficeSparseRowset;
	res->CloneFrom(this);
	return(res);
}

void CorpOfficeSparseRowset::CloneFrom(const CorpOfficeSparseRowset *from) {
	/* object of type util.SparseRowset */
	/*  This is probably a header. No indication of it though  */
	/*  This has to be String Table Item 155, which is out of range, so I have to create it a bit differently  */
	stationID = from->stationID;
	typeID = from->typeID;
	officeID = from->officeID;
	officeFolderID = from->officeFolderID;
	/*  Substruct containing a substream containing the binding stuff  */
	/*  String, Dict, int field  */
	delete bindedObject;
	if(from->bindedObject == NULL) {
		bindedObject = NULL;
	} else {
		bindedObject = from->bindedObject->Clone();
	}
	/*  Maybe number of offices?  */
	officeNumber = from->officeNumber;
	
}


Notify_OnObjectPublicAttributesUpdated::Notify_OnObjectPublicAttributesUpdated() {
	bindID = "";
	realRowCount = 2;
	/*  empty tuple so far  */
	/*  This way the old value isn't going to be saved, but the call doesn't fail at least... :S  */
	/*  <string name="unused2" default="realRowCount" /> Remove for the moment...  */
	changePKIndexValue = 0;
	changes = NULL;
}

Notify_OnObjectPublicAttributesUpdated::~Notify_OnObjectPublicAttributesUpdated() {
	/*  empty tuple so far  */
	/*  This way the old value isn't going to be saved, but the call doesn't fail at least... :S  */
	/*  <string name="unused2" default="realRowCount" /> Remove for the moment...  */
	delete changes;
}

void Notify_OnObjectPublicAttributesUpdated::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_OnObjectPublicAttributesUpdated", pfx);
	_log(l_type, "%sbindID='%s'", pfx, bindID.c_str());
	_log(l_type, "%srealRowCount=%lu", pfx, realRowCount);
	/*  empty tuple so far  */
	/*  This way the old value isn't going to be saved, but the call doesn't fail at least... :S  */
	/*  <string name="unused2" default="realRowCount" /> Remove for the moment...  */
	_log(l_type, "%schangePKIndexValue=%lu", pfx, changePKIndexValue);
	_log(l_type, "%sunused3: ", pfx);
	std::string unused3_n(pfx);
	unused3_n += "    ";
	unused3.Dump(l_type, unused3_n.c_str());
	_log(l_type, "%schanges:", pfx);
	std::string changes_n(pfx);
	changes_n += "    ";
	if(changes == NULL) {
		_log(l_type, "%sERROR: NULL REP!", changes_n.c_str());
	} else {
		changes->Dump(l_type, changes_n.c_str());
	}
}

PyRepTuple *Notify_OnObjectPublicAttributesUpdated::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(4);
	tuple0->items[0] = new PyRepString(bindID);
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	dict1_0 = new PyRepInteger(realRowCount);
	dict1->items[
		new PyRepString("realRowCount")
	] = dict1_0;
	tuple0->items[1] = dict1;
	
	PyRepTuple *tuple2 = new PyRepTuple(0);
	/*  empty tuple so far  */
	tuple0->items[2] = tuple2;
	
	PyRepDict *dict3 = new PyRepDict();
	PyRep *dict3_0;
	PyRepList *list4 = new PyRepList();
	list4->items.resize(0, NULL);
	/*  This way the old value isn't going to be saved, but the call doesn't fail at least... :S  */
	/*  <string name="unused2" default="realRowCount" /> Remove for the moment...  */
	dict3_0 = list4;
	
	dict3->items[
		new PyRepString("partial")
	] = dict3_0;
	PyRep *dict3_1;
	dict3_1 = new PyRepInteger(changePKIndexValue);
	dict3->items[
		new PyRepString("changePKIndexValue")
	] = dict3_1;
	PyRep *dict3_2;
	dict3_2 = unused3.Clone();
	dict3->items[
		new PyRepString("notificationParams")
	] = dict3_2;
	PyRep *dict3_3;
	if(changes == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnObjectPublicAttributesUpdated: changes is NULL! hacking in a PyRepNone");
		changes = new PyRepNone();
	}
	dict3_3 = changes->Clone();
	dict3->items[
		new PyRepString("change")
	] = dict3_3;
	tuple0->items[3] = dict3;
	
	res = tuple0;
	

	return(res);
}

PyRepTuple *Notify_OnObjectPublicAttributesUpdated::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(4);
	tuple0->items[0] = new PyRepString(bindID);
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	dict1_0 = new PyRepInteger(realRowCount);
	dict1->items[
		new PyRepString("realRowCount")
	] = dict1_0;
	tuple0->items[1] = dict1;
	
	PyRepTuple *tuple2 = new PyRepTuple(0);
	/*  empty tuple so far  */
	tuple0->items[2] = tuple2;
	
	PyRepDict *dict3 = new PyRepDict();
	PyRep *dict3_0;
	PyRepList *list4 = new PyRepList();
	list4->items.resize(0, NULL);
	/*  This way the old value isn't going to be saved, but the call doesn't fail at least... :S  */
	/*  <string name="unused2" default="realRowCount" /> Remove for the moment...  */
	dict3_0 = list4;
	
	dict3->items[
		new PyRepString("partial")
	] = dict3_0;
	PyRep *dict3_1;
	dict3_1 = new PyRepInteger(changePKIndexValue);
	dict3->items[
		new PyRepString("changePKIndexValue")
	] = dict3_1;
	PyRep *dict3_2;
	
	PyRepDict *dict5 = new PyRepDict();
	dict5->items = unused3.items;
	unused3.items.clear();
	dict3_2 = dict5;
	dict3->items[
		new PyRepString("notificationParams")
	] = dict3_2;
	PyRep *dict3_3;
	if(changes == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnObjectPublicAttributesUpdated: changes is NULL! hacking in a PyRepNone");
		changes = new PyRepNone();
	}
	dict3_3 = changes;
	changes = NULL;
	dict3->items[
		new PyRepString("change")
	] = dict3_3;
	tuple0->items[3] = dict3;
	
	res = tuple0;
	

	return(res);
}

bool Notify_OnObjectPublicAttributesUpdated::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_OnObjectPublicAttributesUpdated::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 4) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: tuple0 is the wrong size: expected 4, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: bindID is not a string: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_1 = (PyRepString *) tuple0->items[0];
	bindID = string_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: dict2 is the wrong type: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	bool dict2_realRowCount = false;
	PyRepDict *dict2 = (PyRepDict *) tuple0->items[1];
	
	PyRepDict::iterator dict2_cur, dict2_end;
	dict2_cur = dict2->items.begin();
	dict2_end = dict2->items.end();
	for(; dict2_cur != dict2_end; dict2_cur++) {
		PyRep *key__ = dict2_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: a key in dict2 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "realRowCount") {
			dict2_realRowCount = true;
	if(!dict2_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: realRowCount is not an int: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_3 = (PyRepInteger *) dict2_cur->second;
	if(int_3->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnObjectPublicAttributesUpdated: truncating 64 bit into into 32 bit int for field realRowCount");
	}
	realRowCount = int_3->value;
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: Unknown key string '%s' in dict2", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict2_realRowCount) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: Missing dict entry for 'realRowCount' in dict2");
		delete packet;
		return(false);
	}
	
	if(!tuple0->items[2]->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: tuple4 is the wrong type: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple4 = (PyRepTuple *) tuple0->items[2];
	if(tuple4->items.size() != 0) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: tuple4 is the wrong size: expected 0, but got %d", tuple4->items.size());
		delete packet;
		return(false);
	}

	/*  empty tuple so far  */
	if(!tuple0->items[3]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: dict5 is the wrong type: %s", tuple0->items[3]->TypeString());
		delete packet;
		return(false);
	}
	bool dict5_unused1 = false;
	bool dict5_changePKIndexValue = false;
	bool dict5_unused3 = false;
	bool dict5_changes = false;
	PyRepDict *dict5 = (PyRepDict *) tuple0->items[3];
	
	PyRepDict::iterator dict5_cur, dict5_end;
	dict5_cur = dict5->items.begin();
	dict5_end = dict5->items.end();
	for(; dict5_cur != dict5_end; dict5_cur++) {
		PyRep *key__ = dict5_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: a key in dict5 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "partial") {
			dict5_unused1 = true;
	if(!dict5_cur->second->CheckType(PyRep::List)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: list6 is not a list: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepList *list6 = (PyRepList *) dict5_cur->second;
	if(list6->items.size() != 0) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: list6 is the wrong size: expected 0, but got %d", list6->items.size());
		delete packet;
		return(false);
	}

	/*  This way the old value isn't going to be saved, but the call doesn't fail at least... :S  */
	/*  <string name="unused2" default="realRowCount" /> Remove for the moment...  */
		} else
		if(key_string__->value == "changePKIndexValue") {
			dict5_changePKIndexValue = true;
	if(!dict5_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: changePKIndexValue is not an int: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_7 = (PyRepInteger *) dict5_cur->second;
	if(int_7->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnObjectPublicAttributesUpdated: truncating 64 bit into into 32 bit int for field changePKIndexValue");
	}
	changePKIndexValue = int_7->value;
		} else
		if(key_string__->value == "notificationParams") {
			dict5_unused3 = true;
	if(!dict5_cur->second->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: unused3 is not a dict: %s", dict5_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepDict *list_unused3 = (PyRepDict *) dict5_cur->second;	unused3.items = list_unused3->items;
	list_unused3->items.clear();
	
		} else
		if(key_string__->value == "change") {
			dict5_changes = true;
	delete changes;
	changes = dict5_cur->second;
	dict5_cur->second = NULL;
	
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: Unknown key string '%s' in dict5", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict5_unused1) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: Missing dict entry for 'unused1' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_changePKIndexValue) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: Missing dict entry for 'changePKIndexValue' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_unused3) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: Missing dict entry for 'unused3' in dict5");
		delete packet;
		return(false);
	}
	
	if(!dict5_changes) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnObjectPublicAttributesUpdated failed: Missing dict entry for 'changes' in dict5");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

Notify_OnObjectPublicAttributesUpdated *Notify_OnObjectPublicAttributesUpdated::Clone() const {
	Notify_OnObjectPublicAttributesUpdated *res = new Notify_OnObjectPublicAttributesUpdated;
	res->CloneFrom(this);
	return(res);
}

void Notify_OnObjectPublicAttributesUpdated::CloneFrom(const Notify_OnObjectPublicAttributesUpdated *from) {
	bindID = from->bindID;
	realRowCount = from->realRowCount;
	/*  empty tuple so far  */
	/*  This way the old value isn't going to be saved, but the call doesn't fail at least... :S  */
	/*  <string name="unused2" default="realRowCount" /> Remove for the moment...  */
	changePKIndexValue = from->changePKIndexValue;
	unused3.CloneFrom(&from->unused3);
	delete changes;
	if(from->changes == NULL) {
		changes = NULL;
	} else {
		changes = from->changes->Clone();
	}
	
}


OfficeAttributeUpdate::OfficeAttributeUpdate() {
	oldTypeID = NULL;
	newTypeID = 0;
	oldStationID = NULL;
	newStationID = 0;
	oldOfficeFolderID = NULL;
	newOfficeFolderID = 0;
	oldOfficeID = NULL;
	newOfficeID = 0;
}

OfficeAttributeUpdate::~OfficeAttributeUpdate() {
	delete oldTypeID;
	delete oldStationID;
	delete oldOfficeFolderID;
	delete oldOfficeID;
}

void OfficeAttributeUpdate::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sOfficeAttributeUpdate", pfx);
	_log(l_type, "%soldTypeID:", pfx);
	std::string oldTypeID_n(pfx);
	oldTypeID_n += "    ";
	if(oldTypeID == NULL) {
		_log(l_type, "%sERROR: NULL REP!", oldTypeID_n.c_str());
	} else {
		oldTypeID->Dump(l_type, oldTypeID_n.c_str());
	}
	_log(l_type, "%snewTypeID=%lu", pfx, newTypeID);
	_log(l_type, "%soldStationID:", pfx);
	std::string oldStationID_n(pfx);
	oldStationID_n += "    ";
	if(oldStationID == NULL) {
		_log(l_type, "%sERROR: NULL REP!", oldStationID_n.c_str());
	} else {
		oldStationID->Dump(l_type, oldStationID_n.c_str());
	}
	_log(l_type, "%snewStationID=%lu", pfx, newStationID);
	_log(l_type, "%soldOfficeFolderID:", pfx);
	std::string oldOfficeFolderID_n(pfx);
	oldOfficeFolderID_n += "    ";
	if(oldOfficeFolderID == NULL) {
		_log(l_type, "%sERROR: NULL REP!", oldOfficeFolderID_n.c_str());
	} else {
		oldOfficeFolderID->Dump(l_type, oldOfficeFolderID_n.c_str());
	}
	_log(l_type, "%snewOfficeFolderID=%lu", pfx, newOfficeFolderID);
	_log(l_type, "%soldOfficeID:", pfx);
	std::string oldOfficeID_n(pfx);
	oldOfficeID_n += "    ";
	if(oldOfficeID == NULL) {
		_log(l_type, "%sERROR: NULL REP!", oldOfficeID_n.c_str());
	} else {
		oldOfficeID->Dump(l_type, oldOfficeID_n.c_str());
	}
	_log(l_type, "%snewOfficeID=%lu", pfx, newOfficeID);
}

PyRepDict *OfficeAttributeUpdate::Encode() {
	PyRepDict *res = NULL;
	PyRepDict *dict0 = new PyRepDict();
	PyRep *dict0_0;
	PyRepTuple *tuple1 = new PyRepTuple(2);
	if(oldTypeID == NULL) {
		_log(NET__PACKET_ERROR, "Encode OfficeAttributeUpdate: oldTypeID is NULL! hacking in a PyRepNone");
		oldTypeID = new PyRepNone();
	}
	tuple1->items[0] = oldTypeID->Clone();
	tuple1->items[1] = new PyRepInteger(newTypeID);
	dict0_0 = tuple1;
	
	dict0->items[
		new PyRepString("typeID")
	] = dict0_0;
	PyRep *dict0_1;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	if(oldStationID == NULL) {
		_log(NET__PACKET_ERROR, "Encode OfficeAttributeUpdate: oldStationID is NULL! hacking in a PyRepNone");
		oldStationID = new PyRepNone();
	}
	tuple2->items[0] = oldStationID->Clone();
	tuple2->items[1] = new PyRepInteger(newStationID);
	dict0_1 = tuple2;
	
	dict0->items[
		new PyRepString("stationID")
	] = dict0_1;
	PyRep *dict0_2;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	if(oldOfficeFolderID == NULL) {
		_log(NET__PACKET_ERROR, "Encode OfficeAttributeUpdate: oldOfficeFolderID is NULL! hacking in a PyRepNone");
		oldOfficeFolderID = new PyRepNone();
	}
	tuple3->items[0] = oldOfficeFolderID->Clone();
	tuple3->items[1] = new PyRepInteger(newOfficeFolderID);
	dict0_2 = tuple3;
	
	dict0->items[
		new PyRepString("officeFolderID")
	] = dict0_2;
	PyRep *dict0_3;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	if(oldOfficeID == NULL) {
		_log(NET__PACKET_ERROR, "Encode OfficeAttributeUpdate: oldOfficeID is NULL! hacking in a PyRepNone");
		oldOfficeID = new PyRepNone();
	}
	tuple4->items[0] = oldOfficeID->Clone();
	tuple4->items[1] = new PyRepInteger(newOfficeID);
	dict0_3 = tuple4;
	
	dict0->items[
		new PyRepString("officeID")
	] = dict0_3;
	res = dict0;
	

	return(res);
}

PyRepDict *OfficeAttributeUpdate::FastEncode() {
	PyRepDict *res = NULL;
	PyRepDict *dict0 = new PyRepDict();
	PyRep *dict0_0;
	PyRepTuple *tuple1 = new PyRepTuple(2);
	if(oldTypeID == NULL) {
		_log(NET__PACKET_ERROR, "Encode OfficeAttributeUpdate: oldTypeID is NULL! hacking in a PyRepNone");
		oldTypeID = new PyRepNone();
	}
	tuple1->items[0] = oldTypeID;
	oldTypeID = NULL;
	tuple1->items[1] = new PyRepInteger(newTypeID);
	dict0_0 = tuple1;
	
	dict0->items[
		new PyRepString("typeID")
	] = dict0_0;
	PyRep *dict0_1;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	if(oldStationID == NULL) {
		_log(NET__PACKET_ERROR, "Encode OfficeAttributeUpdate: oldStationID is NULL! hacking in a PyRepNone");
		oldStationID = new PyRepNone();
	}
	tuple2->items[0] = oldStationID;
	oldStationID = NULL;
	tuple2->items[1] = new PyRepInteger(newStationID);
	dict0_1 = tuple2;
	
	dict0->items[
		new PyRepString("stationID")
	] = dict0_1;
	PyRep *dict0_2;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	if(oldOfficeFolderID == NULL) {
		_log(NET__PACKET_ERROR, "Encode OfficeAttributeUpdate: oldOfficeFolderID is NULL! hacking in a PyRepNone");
		oldOfficeFolderID = new PyRepNone();
	}
	tuple3->items[0] = oldOfficeFolderID;
	oldOfficeFolderID = NULL;
	tuple3->items[1] = new PyRepInteger(newOfficeFolderID);
	dict0_2 = tuple3;
	
	dict0->items[
		new PyRepString("officeFolderID")
	] = dict0_2;
	PyRep *dict0_3;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	if(oldOfficeID == NULL) {
		_log(NET__PACKET_ERROR, "Encode OfficeAttributeUpdate: oldOfficeID is NULL! hacking in a PyRepNone");
		oldOfficeID = new PyRepNone();
	}
	tuple4->items[0] = oldOfficeID;
	oldOfficeID = NULL;
	tuple4->items[1] = new PyRepInteger(newOfficeID);
	dict0_3 = tuple4;
	
	dict0->items[
		new PyRepString("officeID")
	] = dict0_3;
	res = dict0;
	

	return(res);
}

bool OfficeAttributeUpdate::Decode(PyRepDict **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool OfficeAttributeUpdate::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: dict0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	bool dict0_unused5 = false;
	bool dict0_unused6 = false;
	bool dict0_unused7 = false;
	bool dict0_unused8 = false;
	PyRepDict *dict0 = (PyRepDict *) packet;
	
	PyRepDict::iterator dict0_cur, dict0_end;
	dict0_cur = dict0->items.begin();
	dict0_end = dict0->items.end();
	for(; dict0_cur != dict0_end; dict0_cur++) {
		PyRep *key__ = dict0_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: a key in dict0 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "typeID") {
			dict0_unused5 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: tuple1 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple1 = (PyRepTuple *) dict0_cur->second;
	if(tuple1->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: tuple1 is the wrong size: expected 2, but got %d", tuple1->items.size());
		delete packet;
		return(false);
	}

	delete oldTypeID;
	oldTypeID = tuple1->items[0];
	tuple1->items[0] = NULL;
	
	if(!tuple1->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: newTypeID is not an int: %s", tuple1->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_2 = (PyRepInteger *) tuple1->items[1];
	if(int_2->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode OfficeAttributeUpdate: truncating 64 bit into into 32 bit int for field newTypeID");
	}
	newTypeID = int_2->value;
		} else
		if(key_string__->value == "stationID") {
			dict0_unused6 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: tuple3 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple3 = (PyRepTuple *) dict0_cur->second;
	if(tuple3->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: tuple3 is the wrong size: expected 2, but got %d", tuple3->items.size());
		delete packet;
		return(false);
	}

	delete oldStationID;
	oldStationID = tuple3->items[0];
	tuple3->items[0] = NULL;
	
	if(!tuple3->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: newStationID is not an int: %s", tuple3->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_4 = (PyRepInteger *) tuple3->items[1];
	if(int_4->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode OfficeAttributeUpdate: truncating 64 bit into into 32 bit int for field newStationID");
	}
	newStationID = int_4->value;
		} else
		if(key_string__->value == "officeFolderID") {
			dict0_unused7 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: tuple5 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple5 = (PyRepTuple *) dict0_cur->second;
	if(tuple5->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: tuple5 is the wrong size: expected 2, but got %d", tuple5->items.size());
		delete packet;
		return(false);
	}

	delete oldOfficeFolderID;
	oldOfficeFolderID = tuple5->items[0];
	tuple5->items[0] = NULL;
	
	if(!tuple5->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: newOfficeFolderID is not an int: %s", tuple5->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_6 = (PyRepInteger *) tuple5->items[1];
	if(int_6->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode OfficeAttributeUpdate: truncating 64 bit into into 32 bit int for field newOfficeFolderID");
	}
	newOfficeFolderID = int_6->value;
		} else
		if(key_string__->value == "officeID") {
			dict0_unused8 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: tuple7 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple7 = (PyRepTuple *) dict0_cur->second;
	if(tuple7->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: tuple7 is the wrong size: expected 2, but got %d", tuple7->items.size());
		delete packet;
		return(false);
	}

	delete oldOfficeID;
	oldOfficeID = tuple7->items[0];
	tuple7->items[0] = NULL;
	
	if(!tuple7->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: newOfficeID is not an int: %s", tuple7->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_8 = (PyRepInteger *) tuple7->items[1];
	if(int_8->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode OfficeAttributeUpdate: truncating 64 bit into into 32 bit int for field newOfficeID");
	}
	newOfficeID = int_8->value;
		} else
		{
			_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: Unknown key string '%s' in dict0", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict0_unused5) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: Missing dict entry for 'unused5' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_unused6) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: Missing dict entry for 'unused6' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_unused7) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: Missing dict entry for 'unused7' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_unused8) {
		_log(NET__PACKET_ERROR, "Decode OfficeAttributeUpdate failed: Missing dict entry for 'unused8' in dict0");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

OfficeAttributeUpdate *OfficeAttributeUpdate::Clone() const {
	OfficeAttributeUpdate *res = new OfficeAttributeUpdate;
	res->CloneFrom(this);
	return(res);
}

void OfficeAttributeUpdate::CloneFrom(const OfficeAttributeUpdate *from) {
	delete oldTypeID;
	if(from->oldTypeID == NULL) {
		oldTypeID = NULL;
	} else {
		oldTypeID = from->oldTypeID->Clone();
	}
	newTypeID = from->newTypeID;
	delete oldStationID;
	if(from->oldStationID == NULL) {
		oldStationID = NULL;
	} else {
		oldStationID = from->oldStationID->Clone();
	}
	newStationID = from->newStationID;
	delete oldOfficeFolderID;
	if(from->oldOfficeFolderID == NULL) {
		oldOfficeFolderID = NULL;
	} else {
		oldOfficeFolderID = from->oldOfficeFolderID->Clone();
	}
	newOfficeFolderID = from->newOfficeFolderID;
	delete oldOfficeID;
	if(from->oldOfficeID == NULL) {
		oldOfficeID = NULL;
	} else {
		oldOfficeID = from->oldOfficeID->Clone();
	}
	newOfficeID = from->newOfficeID;
	
}


Notify_OnItemChange::Notify_OnItemChange() {
	/* object of type util.Row */
	unused1 = "itemID";
	unused2 = "typeID";
	unused3 = "ownerID";
	unused4 = "locationID";
	unused5 = "flag";
	unused6 = "contraband";
	unused7 = "singleton";
	unused8 = "quantity";
	unused9 = "groupID";
	unused10 = "categoryID";
	unused11 = "customInfo";
	itemID = 0;
	typeID = 27;
	ownerID = 0;
	locationID = 0;
	flag = 84;
	contraband = 0;
	singleton = 1;
	quantity = 1;
	groupID = 16;
	categoryID = 3;
	customInfo = NULL;
	unused12 = 4;
	/*  What this could be?  */
}

Notify_OnItemChange::~Notify_OnItemChange() {
	delete customInfo;
	/*  What this could be?  */
}

void Notify_OnItemChange::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_OnItemChange", pfx);
	_log(l_type, "%sObject of type util.Row:", pfx);
	_log(l_type, "%sunused1='%s'", pfx, unused1.c_str());
	_log(l_type, "%sunused2='%s'", pfx, unused2.c_str());
	_log(l_type, "%sunused3='%s'", pfx, unused3.c_str());
	_log(l_type, "%sunused4='%s'", pfx, unused4.c_str());
	_log(l_type, "%sunused5='%s'", pfx, unused5.c_str());
	_log(l_type, "%sunused6='%s'", pfx, unused6.c_str());
	_log(l_type, "%sunused7='%s'", pfx, unused7.c_str());
	_log(l_type, "%sunused8='%s'", pfx, unused8.c_str());
	_log(l_type, "%sunused9='%s'", pfx, unused9.c_str());
	_log(l_type, "%sunused10='%s'", pfx, unused10.c_str());
	_log(l_type, "%sunused11='%s'", pfx, unused11.c_str());
	_log(l_type, "%sitemID=%lu", pfx, itemID);
	_log(l_type, "%stypeID=%lu", pfx, typeID);
	_log(l_type, "%sownerID=%lu", pfx, ownerID);
	_log(l_type, "%slocationID=%lu", pfx, locationID);
	_log(l_type, "%sflag=%lu", pfx, flag);
	_log(l_type, "%scontraband=%lu", pfx, contraband);
	_log(l_type, "%ssingleton=%lu", pfx, singleton);
	_log(l_type, "%squantity=%lu", pfx, quantity);
	_log(l_type, "%sgroupID=%lu", pfx, groupID);
	_log(l_type, "%scategoryID=%lu", pfx, categoryID);
	_log(l_type, "%scustomInfo:", pfx);
	std::string customInfo_n(pfx);
	customInfo_n += "    ";
	if(customInfo == NULL) {
		_log(l_type, "%sERROR: NULL REP!", customInfo_n.c_str());
	} else {
		customInfo->Dump(l_type, customInfo_n.c_str());
	}
	_log(l_type, "%sunused12=%lu", pfx, unused12);
	/*  What this could be?  */
}

PyRepTuple *Notify_OnItemChange::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	PyRep *args1;
	PyRepDict *dict2 = new PyRepDict();
	PyRep *dict2_0;
	PyRepList *list3 = new PyRepList();
	list3->items.resize(11, NULL);
	list3->items[0] = new PyRepString(unused1);
	list3->items[1] = new PyRepString(unused2);
	list3->items[2] = new PyRepString(unused3);
	list3->items[3] = new PyRepString(unused4);
	list3->items[4] = new PyRepString(unused5);
	list3->items[5] = new PyRepString(unused6);
	list3->items[6] = new PyRepString(unused7);
	list3->items[7] = new PyRepString(unused8);
	list3->items[8] = new PyRepString(unused9);
	list3->items[9] = new PyRepString(unused10);
	list3->items[10] = new PyRepString(unused11);
	dict2_0 = list3;
	
	dict2->items[
		new PyRepString("header")
	] = dict2_0;
	PyRep *dict2_1;
	PyRepList *list4 = new PyRepList();
	list4->items.resize(11, NULL);
	list4->items[0] = new PyRepInteger(itemID);
	list4->items[1] = new PyRepInteger(typeID);
	list4->items[2] = new PyRepInteger(ownerID);
	list4->items[3] = new PyRepInteger(locationID);
	list4->items[4] = new PyRepInteger(flag);
	list4->items[5] = new PyRepInteger(contraband);
	list4->items[6] = new PyRepInteger(singleton);
	list4->items[7] = new PyRepInteger(quantity);
	list4->items[8] = new PyRepInteger(groupID);
	list4->items[9] = new PyRepInteger(categoryID);
	if(customInfo == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnItemChange: customInfo is NULL! hacking in a PyRepNone");
		customInfo = new PyRepNone();
	}
	list4->items[10] = customInfo->Clone();
	dict2_1 = list4;
	
	dict2->items[
		new PyRepString("line")
	] = dict2_1;
	args1 = dict2;
	
	tuple0->items[0] = new PyRepObject(
			"util.Row",
			args1
		);
	
	PyRepDict *dict5 = new PyRepDict();
	PyRep *dict5_0;
	dict5_0 = new PyRepInteger(unused12);
	/*  What this could be?  */
	dict5->items[
		new PyRepInteger(2)
	] = dict5_0;
	tuple0->items[1] = dict5;
	
	res = tuple0;
	

	return(res);
}

PyRepTuple *Notify_OnItemChange::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	PyRep *args1;
	PyRepDict *dict2 = new PyRepDict();
	PyRep *dict2_0;
	PyRepList *list3 = new PyRepList();
	list3->items.resize(11, NULL);
	list3->items[0] = new PyRepString(unused1);
	list3->items[1] = new PyRepString(unused2);
	list3->items[2] = new PyRepString(unused3);
	list3->items[3] = new PyRepString(unused4);
	list3->items[4] = new PyRepString(unused5);
	list3->items[5] = new PyRepString(unused6);
	list3->items[6] = new PyRepString(unused7);
	list3->items[7] = new PyRepString(unused8);
	list3->items[8] = new PyRepString(unused9);
	list3->items[9] = new PyRepString(unused10);
	list3->items[10] = new PyRepString(unused11);
	dict2_0 = list3;
	
	dict2->items[
		new PyRepString("header")
	] = dict2_0;
	PyRep *dict2_1;
	PyRepList *list4 = new PyRepList();
	list4->items.resize(11, NULL);
	list4->items[0] = new PyRepInteger(itemID);
	list4->items[1] = new PyRepInteger(typeID);
	list4->items[2] = new PyRepInteger(ownerID);
	list4->items[3] = new PyRepInteger(locationID);
	list4->items[4] = new PyRepInteger(flag);
	list4->items[5] = new PyRepInteger(contraband);
	list4->items[6] = new PyRepInteger(singleton);
	list4->items[7] = new PyRepInteger(quantity);
	list4->items[8] = new PyRepInteger(groupID);
	list4->items[9] = new PyRepInteger(categoryID);
	if(customInfo == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnItemChange: customInfo is NULL! hacking in a PyRepNone");
		customInfo = new PyRepNone();
	}
	list4->items[10] = customInfo;
	customInfo = NULL;
	dict2_1 = list4;
	
	dict2->items[
		new PyRepString("line")
	] = dict2_1;
	args1 = dict2;
	
	tuple0->items[0] = new PyRepObject(
			"util.Row",
			args1
		);
	
	PyRepDict *dict5 = new PyRepDict();
	PyRep *dict5_0;
	dict5_0 = new PyRepInteger(unused12);
	/*  What this could be?  */
	dict5->items[
		new PyRepInteger(2)
	] = dict5_0;
	tuple0->items[1] = dict5;
	
	res = tuple0;
	

	return(res);
}

bool Notify_OnItemChange::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_OnItemChange::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: tuple0 is the wrong size: expected 2, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Object)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: obj_1 is the wrong type: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepObject *obj_1 = (PyRepObject *) tuple0->items[0];
	
	if(obj_1->type != "util.Row") {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: obj_1 is the wrong object type. Expected 'util.Row', got '%s'", obj_1->type.c_str());
		delete packet;
		return(false);
	}
	
	if(!obj_1->arguments->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: dict2 is the wrong type: %s", obj_1->arguments->TypeString());
		delete packet;
		return(false);
	}
	bool dict2_unusedX = false;
	bool dict2_unusedY = false;
	PyRepDict *dict2 = (PyRepDict *) obj_1->arguments;
	
	PyRepDict::iterator dict2_cur, dict2_end;
	dict2_cur = dict2->items.begin();
	dict2_end = dict2->items.end();
	for(; dict2_cur != dict2_end; dict2_cur++) {
		PyRep *key__ = dict2_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: a key in dict2 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "header") {
			dict2_unusedX = true;
	if(!dict2_cur->second->CheckType(PyRep::List)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: list3 is not a list: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepList *list3 = (PyRepList *) dict2_cur->second;
	if(list3->items.size() != 11) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: list3 is the wrong size: expected 11, but got %d", list3->items.size());
		delete packet;
		return(false);
	}

	if(!list3->items[0]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused1 is not a string: %s", list3->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_4 = (PyRepString *) list3->items[0];
	unused1 = string_4->value;
	if(!list3->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused2 is not a string: %s", list3->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_5 = (PyRepString *) list3->items[1];
	unused2 = string_5->value;
	if(!list3->items[2]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused3 is not a string: %s", list3->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_6 = (PyRepString *) list3->items[2];
	unused3 = string_6->value;
	if(!list3->items[3]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused4 is not a string: %s", list3->items[3]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_7 = (PyRepString *) list3->items[3];
	unused4 = string_7->value;
	if(!list3->items[4]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused5 is not a string: %s", list3->items[4]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_8 = (PyRepString *) list3->items[4];
	unused5 = string_8->value;
	if(!list3->items[5]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused6 is not a string: %s", list3->items[5]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_9 = (PyRepString *) list3->items[5];
	unused6 = string_9->value;
	if(!list3->items[6]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused7 is not a string: %s", list3->items[6]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_10 = (PyRepString *) list3->items[6];
	unused7 = string_10->value;
	if(!list3->items[7]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused8 is not a string: %s", list3->items[7]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_11 = (PyRepString *) list3->items[7];
	unused8 = string_11->value;
	if(!list3->items[8]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused9 is not a string: %s", list3->items[8]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_12 = (PyRepString *) list3->items[8];
	unused9 = string_12->value;
	if(!list3->items[9]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused10 is not a string: %s", list3->items[9]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_13 = (PyRepString *) list3->items[9];
	unused10 = string_13->value;
	if(!list3->items[10]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused11 is not a string: %s", list3->items[10]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_14 = (PyRepString *) list3->items[10];
	unused11 = string_14->value;
		} else
		if(key_string__->value == "line") {
			dict2_unusedY = true;
	if(!dict2_cur->second->CheckType(PyRep::List)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: list15 is not a list: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepList *list15 = (PyRepList *) dict2_cur->second;
	if(list15->items.size() != 11) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: list15 is the wrong size: expected 11, but got %d", list15->items.size());
		delete packet;
		return(false);
	}

	if(!list15->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: itemID is not an int: %s", list15->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_16 = (PyRepInteger *) list15->items[0];
	if(int_16->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field itemID");
	}
	itemID = int_16->value;
	if(!list15->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: typeID is not an int: %s", list15->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_17 = (PyRepInteger *) list15->items[1];
	if(int_17->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field typeID");
	}
	typeID = int_17->value;
	if(!list15->items[2]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: ownerID is not an int: %s", list15->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_18 = (PyRepInteger *) list15->items[2];
	if(int_18->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field ownerID");
	}
	ownerID = int_18->value;
	if(!list15->items[3]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: locationID is not an int: %s", list15->items[3]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_19 = (PyRepInteger *) list15->items[3];
	if(int_19->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field locationID");
	}
	locationID = int_19->value;
	if(!list15->items[4]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: flag is not an int: %s", list15->items[4]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_20 = (PyRepInteger *) list15->items[4];
	if(int_20->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field flag");
	}
	flag = int_20->value;
	if(!list15->items[5]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: contraband is not an int: %s", list15->items[5]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_21 = (PyRepInteger *) list15->items[5];
	if(int_21->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field contraband");
	}
	contraband = int_21->value;
	if(!list15->items[6]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: singleton is not an int: %s", list15->items[6]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_22 = (PyRepInteger *) list15->items[6];
	if(int_22->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field singleton");
	}
	singleton = int_22->value;
	if(!list15->items[7]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: quantity is not an int: %s", list15->items[7]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_23 = (PyRepInteger *) list15->items[7];
	if(int_23->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field quantity");
	}
	quantity = int_23->value;
	if(!list15->items[8]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: groupID is not an int: %s", list15->items[8]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_24 = (PyRepInteger *) list15->items[8];
	if(int_24->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field groupID");
	}
	groupID = int_24->value;
	if(!list15->items[9]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: categoryID is not an int: %s", list15->items[9]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_25 = (PyRepInteger *) list15->items[9];
	if(int_25->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field categoryID");
	}
	categoryID = int_25->value;
	delete customInfo;
	customInfo = list15->items[10];
	list15->items[10] = NULL;
	
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: Unknown key string '%s' in dict2", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict2_unusedX) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: Missing dict entry for 'unusedX' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_unusedY) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: Missing dict entry for 'unusedY' in dict2");
		delete packet;
		return(false);
	}
	
	if(!tuple0->items[1]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: dict26 is the wrong type: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	bool dict26_unused12 = false;
	PyRepDict *dict26 = (PyRepDict *) tuple0->items[1];
	
	PyRepDict::iterator dict26_cur, dict26_end;
	dict26_cur = dict26->items.begin();
	dict26_end = dict26->items.end();
	for(; dict26_cur != dict26_end; dict26_cur++) {
		PyRep *key__ = dict26_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: a key in dict26 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "2") {
			dict26_unused12 = true;
	if(!dict26_cur->second->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: unused12 is not an int: %s", dict26_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_27 = (PyRepInteger *) dict26_cur->second;
	if(int_27->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnItemChange: truncating 64 bit into into 32 bit int for field unused12");
	}
	unused12 = int_27->value;
	/*  What this could be?  */
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: Unknown key string '%s' in dict26", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict26_unused12) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnItemChange failed: Missing dict entry for 'unused12' in dict26");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

Notify_OnItemChange *Notify_OnItemChange::Clone() const {
	Notify_OnItemChange *res = new Notify_OnItemChange;
	res->CloneFrom(this);
	return(res);
}

void Notify_OnItemChange::CloneFrom(const Notify_OnItemChange *from) {
	/* object of type util.Row */
	unused1 = from->unused1;
	unused2 = from->unused2;
	unused3 = from->unused3;
	unused4 = from->unused4;
	unused5 = from->unused5;
	unused6 = from->unused6;
	unused7 = from->unused7;
	unused8 = from->unused8;
	unused9 = from->unused9;
	unused10 = from->unused10;
	unused11 = from->unused11;
	itemID = from->itemID;
	typeID = from->typeID;
	ownerID = from->ownerID;
	locationID = from->locationID;
	flag = from->flag;
	contraband = from->contraband;
	singleton = from->singleton;
	quantity = from->quantity;
	groupID = from->groupID;
	categoryID = from->categoryID;
	delete customInfo;
	if(from->customInfo == NULL) {
		customInfo = NULL;
	} else {
		customInfo = from->customInfo->Clone();
	}
	unused12 = from->unused12;
	/*  What this could be?  */
	
}


Notify_OnOfficeRentalChanged::Notify_OnOfficeRentalChanged() {
	ownerID = 0;
	officeID = 0;
	officeFolderID = 0;
}

Notify_OnOfficeRentalChanged::~Notify_OnOfficeRentalChanged() {
}

void Notify_OnOfficeRentalChanged::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_OnOfficeRentalChanged", pfx);
	_log(l_type, "%sownerID=%lu", pfx, ownerID);
	_log(l_type, "%sofficeID=%lu", pfx, officeID);
	_log(l_type, "%sofficeFolderID=%lu", pfx, officeFolderID);
}

PyRepTuple *Notify_OnOfficeRentalChanged::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(3);
	tuple0->items[0] = new PyRepInteger(ownerID);
	tuple0->items[1] = new PyRepInteger(officeID);
	tuple0->items[2] = new PyRepInteger(officeFolderID);
	res = tuple0;
	

	return(res);
}

PyRepTuple *Notify_OnOfficeRentalChanged::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(3);
	tuple0->items[0] = new PyRepInteger(ownerID);
	tuple0->items[1] = new PyRepInteger(officeID);
	tuple0->items[2] = new PyRepInteger(officeFolderID);
	res = tuple0;
	

	return(res);
}

bool Notify_OnOfficeRentalChanged::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_OnOfficeRentalChanged::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnOfficeRentalChanged failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 3) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnOfficeRentalChanged failed: tuple0 is the wrong size: expected 3, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnOfficeRentalChanged failed: ownerID is not an int: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_1 = (PyRepInteger *) tuple0->items[0];
	if(int_1->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnOfficeRentalChanged: truncating 64 bit into into 32 bit int for field ownerID");
	}
	ownerID = int_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnOfficeRentalChanged failed: officeID is not an int: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_2 = (PyRepInteger *) tuple0->items[1];
	if(int_2->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnOfficeRentalChanged: truncating 64 bit into into 32 bit int for field officeID");
	}
	officeID = int_2->value;
	if(!tuple0->items[2]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnOfficeRentalChanged failed: officeFolderID is not an int: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_3 = (PyRepInteger *) tuple0->items[2];
	if(int_3->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnOfficeRentalChanged: truncating 64 bit into into 32 bit int for field officeFolderID");
	}
	officeFolderID = int_3->value;

	delete packet;
	return(true);
}

Notify_OnOfficeRentalChanged *Notify_OnOfficeRentalChanged::Clone() const {
	Notify_OnOfficeRentalChanged *res = new Notify_OnOfficeRentalChanged;
	res->CloneFrom(this);
	return(res);
}

void Notify_OnOfficeRentalChanged::CloneFrom(const Notify_OnOfficeRentalChanged *from) {
	ownerID = from->ownerID;
	officeID = from->officeID;
	officeFolderID = from->officeFolderID;
	
}


Notify_OnBillReceived::Notify_OnBillReceived() {
	/*  Empty tuple, very funny :S. Then what is it good for?  */
}

Notify_OnBillReceived::~Notify_OnBillReceived() {
	/*  Empty tuple, very funny :S. Then what is it good for?  */
}

void Notify_OnBillReceived::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_OnBillReceived", pfx);
	/*  Empty tuple, very funny :S. Then what is it good for?  */
}

PyRepTuple *Notify_OnBillReceived::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(0);
	/*  Empty tuple, very funny :S. Then what is it good for?  */
	res = tuple0;
	

	return(res);
}

PyRepTuple *Notify_OnBillReceived::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(0);
	/*  Empty tuple, very funny :S. Then what is it good for?  */
	res = tuple0;
	

	return(res);
}

bool Notify_OnBillReceived::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_OnBillReceived::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnBillReceived failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 0) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnBillReceived failed: tuple0 is the wrong size: expected 0, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	/*  Empty tuple, very funny :S. Then what is it good for?  */

	delete packet;
	return(true);
}

Notify_OnBillReceived *Notify_OnBillReceived::Clone() const {
	Notify_OnBillReceived *res = new Notify_OnBillReceived;
	res->CloneFrom(this);
	return(res);
}

void Notify_OnBillReceived::CloneFrom(const Notify_OnBillReceived *from) {
	/*  Empty tuple, very funny :S. Then what is it good for?  */
	
}


Reply_FetchOffice::Reply_FetchOffice() {
	officeID = 0;
}

Reply_FetchOffice::~Reply_FetchOffice() {
}

void Reply_FetchOffice::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sReply_FetchOffice", pfx);
	_log(l_type, "%sofficeID=%lu", pfx, officeID);
	_log(l_type, "%sparams: ", pfx);
	std::string params_n(pfx);
	params_n += "    ";
	params.Dump(l_type, params_n.c_str());
}

PyRepList *Reply_FetchOffice::Encode() {
	PyRepList *res = NULL;
	PyRepList *list0 = new PyRepList();
	list0->items.resize(1, NULL);
	PyRepTuple *tuple1 = new PyRepTuple(2);
	tuple1->items[0] = new PyRepInteger(officeID);
	tuple1->items[1] = params.Clone();
	list0->items[0] = tuple1;
	
	res = list0;
	

	return(res);
}

PyRepList *Reply_FetchOffice::FastEncode() {
	PyRepList *res = NULL;
	PyRepList *list0 = new PyRepList();
	list0->items.resize(1, NULL);
	PyRepTuple *tuple1 = new PyRepTuple(2);
	tuple1->items[0] = new PyRepInteger(officeID);
	
	PyRepList *list2 = new PyRepList();
	list2->items = params.items;
	params.items.clear();
	tuple1->items[1] = list2;
	list0->items[0] = tuple1;
	
	res = list0;
	

	return(res);
}

bool Reply_FetchOffice::Decode(PyRepList **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Reply_FetchOffice::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::List)) {
		_log(NET__PACKET_ERROR, "Decode Reply_FetchOffice failed: list0 is not a list: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepList *list0 = (PyRepList *) packet;
	if(list0->items.size() != 1) {
		_log(NET__PACKET_ERROR, "Decode Reply_FetchOffice failed: list0 is the wrong size: expected 1, but got %d", list0->items.size());
		delete packet;
		return(false);
	}

	if(!list0->items[0]->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Reply_FetchOffice failed: tuple1 is the wrong type: %s", list0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple1 = (PyRepTuple *) list0->items[0];
	if(tuple1->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Reply_FetchOffice failed: tuple1 is the wrong size: expected 2, but got %d", tuple1->items.size());
		delete packet;
		return(false);
	}

	if(!tuple1->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Reply_FetchOffice failed: officeID is not an int: %s", tuple1->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_2 = (PyRepInteger *) tuple1->items[0];
	if(int_2->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Reply_FetchOffice: truncating 64 bit into into 32 bit int for field officeID");
	}
	officeID = int_2->value;
	if(!tuple1->items[1]->CheckType(PyRep::List)) {
		_log(NET__PACKET_ERROR, "Decode Reply_FetchOffice failed: params is not a list: %s", tuple1->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepList *list_params = (PyRepList *) tuple1->items[1];	params.items = list_params->items;
	list_params->items.clear();
	

	delete packet;
	return(true);
}

Reply_FetchOffice *Reply_FetchOffice::Clone() const {
	Reply_FetchOffice *res = new Reply_FetchOffice;
	res->CloneFrom(this);
	return(res);
}

void Reply_FetchOffice::CloneFrom(const Reply_FetchOffice *from) {
	officeID = from->officeID;
	params.CloneFrom(&from->params);
	
}


Call_InsertApplication::Call_InsertApplication() {
	corpID = 0;
	message = "";
}

Call_InsertApplication::~Call_InsertApplication() {
}

void Call_InsertApplication::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sCall_InsertApplication", pfx);
	_log(l_type, "%scorpID=%lu", pfx, corpID);
	_log(l_type, "%smessage='%s'", pfx, message.c_str());
}

PyRepTuple *Call_InsertApplication::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	tuple0->items[0] = new PyRepInteger(corpID);
	tuple0->items[1] = new PyRepString(message);
	res = tuple0;
	

	return(res);
}

PyRepTuple *Call_InsertApplication::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	tuple0->items[0] = new PyRepInteger(corpID);
	tuple0->items[1] = new PyRepString(message);
	res = tuple0;
	

	return(res);
}

bool Call_InsertApplication::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Call_InsertApplication::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Call_InsertApplication failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Call_InsertApplication failed: tuple0 is the wrong size: expected 2, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Call_InsertApplication failed: corpID is not an int: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_1 = (PyRepInteger *) tuple0->items[0];
	if(int_1->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Call_InsertApplication: truncating 64 bit into into 32 bit int for field corpID");
	}
	corpID = int_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Call_InsertApplication failed: message is not a string: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_2 = (PyRepString *) tuple0->items[1];
	message = string_2->value;

	delete packet;
	return(true);
}

Call_InsertApplication *Call_InsertApplication::Clone() const {
	Call_InsertApplication *res = new Call_InsertApplication;
	res->CloneFrom(this);
	return(res);
}

void Call_InsertApplication::CloneFrom(const Call_InsertApplication *from) {
	corpID = from->corpID;
	message = from->message;
	
}


Notify_OnCorporationApplicationChanged::Notify_OnCorporationApplicationChanged() {
	charID = 0;
	corpID = 0;
	statusOld = NULL;
	statusNew = NULL;
	corporationIDOld = NULL;
	corporationIDNew = NULL;
	rolesOld = NULL;
	rolesNew = NULL;
	grantableRolesOld = NULL;
	grantableRolesNew = NULL;
	deletedOld = NULL;
	deletedNew = NULL;
	applicationTextOld = NULL;
	applicationTextNew = NULL;
	lastCorpUpdaterIDOld = NULL;
	lastCorpUpdaterIDNew = NULL;
	applicationDateTimeOld = NULL;
	applicationDateTimeNew = NULL;
	characterIDOld = NULL;
	characterIDNew = NULL;
}

Notify_OnCorporationApplicationChanged::~Notify_OnCorporationApplicationChanged() {
	delete statusOld;
	delete statusNew;
	delete corporationIDOld;
	delete corporationIDNew;
	delete rolesOld;
	delete rolesNew;
	delete grantableRolesOld;
	delete grantableRolesNew;
	delete deletedOld;
	delete deletedNew;
	delete applicationTextOld;
	delete applicationTextNew;
	delete lastCorpUpdaterIDOld;
	delete lastCorpUpdaterIDNew;
	delete applicationDateTimeOld;
	delete applicationDateTimeNew;
	delete characterIDOld;
	delete characterIDNew;
}

void Notify_OnCorporationApplicationChanged::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_OnCorporationApplicationChanged", pfx);
	_log(l_type, "%scharID=%lu", pfx, charID);
	_log(l_type, "%scorpID=%lu", pfx, corpID);
	_log(l_type, "%sstatusOld:", pfx);
	std::string statusOld_n(pfx);
	statusOld_n += "    ";
	if(statusOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", statusOld_n.c_str());
	} else {
		statusOld->Dump(l_type, statusOld_n.c_str());
	}
	_log(l_type, "%sstatusNew:", pfx);
	std::string statusNew_n(pfx);
	statusNew_n += "    ";
	if(statusNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", statusNew_n.c_str());
	} else {
		statusNew->Dump(l_type, statusNew_n.c_str());
	}
	_log(l_type, "%scorporationIDOld:", pfx);
	std::string corporationIDOld_n(pfx);
	corporationIDOld_n += "    ";
	if(corporationIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", corporationIDOld_n.c_str());
	} else {
		corporationIDOld->Dump(l_type, corporationIDOld_n.c_str());
	}
	_log(l_type, "%scorporationIDNew:", pfx);
	std::string corporationIDNew_n(pfx);
	corporationIDNew_n += "    ";
	if(corporationIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", corporationIDNew_n.c_str());
	} else {
		corporationIDNew->Dump(l_type, corporationIDNew_n.c_str());
	}
	_log(l_type, "%srolesOld:", pfx);
	std::string rolesOld_n(pfx);
	rolesOld_n += "    ";
	if(rolesOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", rolesOld_n.c_str());
	} else {
		rolesOld->Dump(l_type, rolesOld_n.c_str());
	}
	_log(l_type, "%srolesNew:", pfx);
	std::string rolesNew_n(pfx);
	rolesNew_n += "    ";
	if(rolesNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", rolesNew_n.c_str());
	} else {
		rolesNew->Dump(l_type, rolesNew_n.c_str());
	}
	_log(l_type, "%sgrantableRolesOld:", pfx);
	std::string grantableRolesOld_n(pfx);
	grantableRolesOld_n += "    ";
	if(grantableRolesOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesOld_n.c_str());
	} else {
		grantableRolesOld->Dump(l_type, grantableRolesOld_n.c_str());
	}
	_log(l_type, "%sgrantableRolesNew:", pfx);
	std::string grantableRolesNew_n(pfx);
	grantableRolesNew_n += "    ";
	if(grantableRolesNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesNew_n.c_str());
	} else {
		grantableRolesNew->Dump(l_type, grantableRolesNew_n.c_str());
	}
	_log(l_type, "%sdeletedOld:", pfx);
	std::string deletedOld_n(pfx);
	deletedOld_n += "    ";
	if(deletedOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", deletedOld_n.c_str());
	} else {
		deletedOld->Dump(l_type, deletedOld_n.c_str());
	}
	_log(l_type, "%sdeletedNew:", pfx);
	std::string deletedNew_n(pfx);
	deletedNew_n += "    ";
	if(deletedNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", deletedNew_n.c_str());
	} else {
		deletedNew->Dump(l_type, deletedNew_n.c_str());
	}
	_log(l_type, "%sapplicationTextOld:", pfx);
	std::string applicationTextOld_n(pfx);
	applicationTextOld_n += "    ";
	if(applicationTextOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", applicationTextOld_n.c_str());
	} else {
		applicationTextOld->Dump(l_type, applicationTextOld_n.c_str());
	}
	_log(l_type, "%sapplicationTextNew:", pfx);
	std::string applicationTextNew_n(pfx);
	applicationTextNew_n += "    ";
	if(applicationTextNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", applicationTextNew_n.c_str());
	} else {
		applicationTextNew->Dump(l_type, applicationTextNew_n.c_str());
	}
	_log(l_type, "%slastCorpUpdaterIDOld:", pfx);
	std::string lastCorpUpdaterIDOld_n(pfx);
	lastCorpUpdaterIDOld_n += "    ";
	if(lastCorpUpdaterIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", lastCorpUpdaterIDOld_n.c_str());
	} else {
		lastCorpUpdaterIDOld->Dump(l_type, lastCorpUpdaterIDOld_n.c_str());
	}
	_log(l_type, "%slastCorpUpdaterIDNew:", pfx);
	std::string lastCorpUpdaterIDNew_n(pfx);
	lastCorpUpdaterIDNew_n += "    ";
	if(lastCorpUpdaterIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", lastCorpUpdaterIDNew_n.c_str());
	} else {
		lastCorpUpdaterIDNew->Dump(l_type, lastCorpUpdaterIDNew_n.c_str());
	}
	_log(l_type, "%sapplicationDateTimeOld:", pfx);
	std::string applicationDateTimeOld_n(pfx);
	applicationDateTimeOld_n += "    ";
	if(applicationDateTimeOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", applicationDateTimeOld_n.c_str());
	} else {
		applicationDateTimeOld->Dump(l_type, applicationDateTimeOld_n.c_str());
	}
	_log(l_type, "%sapplicationDateTimeNew:", pfx);
	std::string applicationDateTimeNew_n(pfx);
	applicationDateTimeNew_n += "    ";
	if(applicationDateTimeNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", applicationDateTimeNew_n.c_str());
	} else {
		applicationDateTimeNew->Dump(l_type, applicationDateTimeNew_n.c_str());
	}
	_log(l_type, "%scharacterIDOld:", pfx);
	std::string characterIDOld_n(pfx);
	characterIDOld_n += "    ";
	if(characterIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", characterIDOld_n.c_str());
	} else {
		characterIDOld->Dump(l_type, characterIDOld_n.c_str());
	}
	_log(l_type, "%scharacterIDNew:", pfx);
	std::string characterIDNew_n(pfx);
	characterIDNew_n += "    ";
	if(characterIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", characterIDNew_n.c_str());
	} else {
		characterIDNew->Dump(l_type, characterIDNew_n.c_str());
	}
}

PyRepTuple *Notify_OnCorporationApplicationChanged::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(3);
	tuple0->items[0] = new PyRepInteger(charID);
	tuple0->items[1] = new PyRepInteger(corpID);
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	if(statusOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: statusOld is NULL! hacking in a PyRepNone");
		statusOld = new PyRepNone();
	}
	tuple2->items[0] = statusOld->Clone();
	if(statusNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: statusNew is NULL! hacking in a PyRepNone");
		statusNew = new PyRepNone();
	}
	tuple2->items[1] = statusNew->Clone();
	dict1_0 = tuple2;
	
	dict1->items[
		new PyRepString("status")
	] = dict1_0;
	PyRep *dict1_1;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	if(corporationIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: corporationIDOld is NULL! hacking in a PyRepNone");
		corporationIDOld = new PyRepNone();
	}
	tuple3->items[0] = corporationIDOld->Clone();
	if(corporationIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: corporationIDNew is NULL! hacking in a PyRepNone");
		corporationIDNew = new PyRepNone();
	}
	tuple3->items[1] = corporationIDNew->Clone();
	dict1_1 = tuple3;
	
	dict1->items[
		new PyRepString("corporationID")
	] = dict1_1;
	PyRep *dict1_2;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	if(rolesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: rolesOld is NULL! hacking in a PyRepNone");
		rolesOld = new PyRepNone();
	}
	tuple4->items[0] = rolesOld->Clone();
	if(rolesNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: rolesNew is NULL! hacking in a PyRepNone");
		rolesNew = new PyRepNone();
	}
	tuple4->items[1] = rolesNew->Clone();
	dict1_2 = tuple4;
	
	dict1->items[
		new PyRepString("roles")
	] = dict1_2;
	PyRep *dict1_3;
	PyRepTuple *tuple5 = new PyRepTuple(2);
	if(grantableRolesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: grantableRolesOld is NULL! hacking in a PyRepNone");
		grantableRolesOld = new PyRepNone();
	}
	tuple5->items[0] = grantableRolesOld->Clone();
	if(grantableRolesNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: grantableRolesNew is NULL! hacking in a PyRepNone");
		grantableRolesNew = new PyRepNone();
	}
	tuple5->items[1] = grantableRolesNew->Clone();
	dict1_3 = tuple5;
	
	dict1->items[
		new PyRepString("grantableRoles")
	] = dict1_3;
	PyRep *dict1_4;
	PyRepTuple *tuple6 = new PyRepTuple(2);
	if(deletedOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: deletedOld is NULL! hacking in a PyRepNone");
		deletedOld = new PyRepNone();
	}
	tuple6->items[0] = deletedOld->Clone();
	if(deletedNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: deletedNew is NULL! hacking in a PyRepNone");
		deletedNew = new PyRepNone();
	}
	tuple6->items[1] = deletedNew->Clone();
	dict1_4 = tuple6;
	
	dict1->items[
		new PyRepString("deleted")
	] = dict1_4;
	PyRep *dict1_5;
	PyRepTuple *tuple7 = new PyRepTuple(2);
	if(applicationTextOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: applicationTextOld is NULL! hacking in a PyRepNone");
		applicationTextOld = new PyRepNone();
	}
	tuple7->items[0] = applicationTextOld->Clone();
	if(applicationTextNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: applicationTextNew is NULL! hacking in a PyRepNone");
		applicationTextNew = new PyRepNone();
	}
	tuple7->items[1] = applicationTextNew->Clone();
	dict1_5 = tuple7;
	
	dict1->items[
		new PyRepString("applicationText")
	] = dict1_5;
	PyRep *dict1_6;
	PyRepTuple *tuple8 = new PyRepTuple(2);
	if(lastCorpUpdaterIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: lastCorpUpdaterIDOld is NULL! hacking in a PyRepNone");
		lastCorpUpdaterIDOld = new PyRepNone();
	}
	tuple8->items[0] = lastCorpUpdaterIDOld->Clone();
	if(lastCorpUpdaterIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: lastCorpUpdaterIDNew is NULL! hacking in a PyRepNone");
		lastCorpUpdaterIDNew = new PyRepNone();
	}
	tuple8->items[1] = lastCorpUpdaterIDNew->Clone();
	dict1_6 = tuple8;
	
	dict1->items[
		new PyRepString("lastCorpUpdaterID")
	] = dict1_6;
	PyRep *dict1_7;
	PyRepTuple *tuple9 = new PyRepTuple(2);
	if(applicationDateTimeOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: applicationDateTimeOld is NULL! hacking in a PyRepNone");
		applicationDateTimeOld = new PyRepNone();
	}
	tuple9->items[0] = applicationDateTimeOld->Clone();
	if(applicationDateTimeNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: applicationDateTimeNew is NULL! hacking in a PyRepNone");
		applicationDateTimeNew = new PyRepNone();
	}
	tuple9->items[1] = applicationDateTimeNew->Clone();
	dict1_7 = tuple9;
	
	dict1->items[
		new PyRepString("applicationDateTime")
	] = dict1_7;
	PyRep *dict1_8;
	PyRepTuple *tuple10 = new PyRepTuple(2);
	if(characterIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: characterIDOld is NULL! hacking in a PyRepNone");
		characterIDOld = new PyRepNone();
	}
	tuple10->items[0] = characterIDOld->Clone();
	if(characterIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: characterIDNew is NULL! hacking in a PyRepNone");
		characterIDNew = new PyRepNone();
	}
	tuple10->items[1] = characterIDNew->Clone();
	dict1_8 = tuple10;
	
	dict1->items[
		new PyRepString("characterID")
	] = dict1_8;
	tuple0->items[2] = dict1;
	
	res = tuple0;
	

	return(res);
}

PyRepTuple *Notify_OnCorporationApplicationChanged::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(3);
	tuple0->items[0] = new PyRepInteger(charID);
	tuple0->items[1] = new PyRepInteger(corpID);
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	if(statusOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: statusOld is NULL! hacking in a PyRepNone");
		statusOld = new PyRepNone();
	}
	tuple2->items[0] = statusOld;
	statusOld = NULL;
	if(statusNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: statusNew is NULL! hacking in a PyRepNone");
		statusNew = new PyRepNone();
	}
	tuple2->items[1] = statusNew;
	statusNew = NULL;
	dict1_0 = tuple2;
	
	dict1->items[
		new PyRepString("status")
	] = dict1_0;
	PyRep *dict1_1;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	if(corporationIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: corporationIDOld is NULL! hacking in a PyRepNone");
		corporationIDOld = new PyRepNone();
	}
	tuple3->items[0] = corporationIDOld;
	corporationIDOld = NULL;
	if(corporationIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: corporationIDNew is NULL! hacking in a PyRepNone");
		corporationIDNew = new PyRepNone();
	}
	tuple3->items[1] = corporationIDNew;
	corporationIDNew = NULL;
	dict1_1 = tuple3;
	
	dict1->items[
		new PyRepString("corporationID")
	] = dict1_1;
	PyRep *dict1_2;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	if(rolesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: rolesOld is NULL! hacking in a PyRepNone");
		rolesOld = new PyRepNone();
	}
	tuple4->items[0] = rolesOld;
	rolesOld = NULL;
	if(rolesNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: rolesNew is NULL! hacking in a PyRepNone");
		rolesNew = new PyRepNone();
	}
	tuple4->items[1] = rolesNew;
	rolesNew = NULL;
	dict1_2 = tuple4;
	
	dict1->items[
		new PyRepString("roles")
	] = dict1_2;
	PyRep *dict1_3;
	PyRepTuple *tuple5 = new PyRepTuple(2);
	if(grantableRolesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: grantableRolesOld is NULL! hacking in a PyRepNone");
		grantableRolesOld = new PyRepNone();
	}
	tuple5->items[0] = grantableRolesOld;
	grantableRolesOld = NULL;
	if(grantableRolesNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: grantableRolesNew is NULL! hacking in a PyRepNone");
		grantableRolesNew = new PyRepNone();
	}
	tuple5->items[1] = grantableRolesNew;
	grantableRolesNew = NULL;
	dict1_3 = tuple5;
	
	dict1->items[
		new PyRepString("grantableRoles")
	] = dict1_3;
	PyRep *dict1_4;
	PyRepTuple *tuple6 = new PyRepTuple(2);
	if(deletedOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: deletedOld is NULL! hacking in a PyRepNone");
		deletedOld = new PyRepNone();
	}
	tuple6->items[0] = deletedOld;
	deletedOld = NULL;
	if(deletedNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: deletedNew is NULL! hacking in a PyRepNone");
		deletedNew = new PyRepNone();
	}
	tuple6->items[1] = deletedNew;
	deletedNew = NULL;
	dict1_4 = tuple6;
	
	dict1->items[
		new PyRepString("deleted")
	] = dict1_4;
	PyRep *dict1_5;
	PyRepTuple *tuple7 = new PyRepTuple(2);
	if(applicationTextOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: applicationTextOld is NULL! hacking in a PyRepNone");
		applicationTextOld = new PyRepNone();
	}
	tuple7->items[0] = applicationTextOld;
	applicationTextOld = NULL;
	if(applicationTextNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: applicationTextNew is NULL! hacking in a PyRepNone");
		applicationTextNew = new PyRepNone();
	}
	tuple7->items[1] = applicationTextNew;
	applicationTextNew = NULL;
	dict1_5 = tuple7;
	
	dict1->items[
		new PyRepString("applicationText")
	] = dict1_5;
	PyRep *dict1_6;
	PyRepTuple *tuple8 = new PyRepTuple(2);
	if(lastCorpUpdaterIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: lastCorpUpdaterIDOld is NULL! hacking in a PyRepNone");
		lastCorpUpdaterIDOld = new PyRepNone();
	}
	tuple8->items[0] = lastCorpUpdaterIDOld;
	lastCorpUpdaterIDOld = NULL;
	if(lastCorpUpdaterIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: lastCorpUpdaterIDNew is NULL! hacking in a PyRepNone");
		lastCorpUpdaterIDNew = new PyRepNone();
	}
	tuple8->items[1] = lastCorpUpdaterIDNew;
	lastCorpUpdaterIDNew = NULL;
	dict1_6 = tuple8;
	
	dict1->items[
		new PyRepString("lastCorpUpdaterID")
	] = dict1_6;
	PyRep *dict1_7;
	PyRepTuple *tuple9 = new PyRepTuple(2);
	if(applicationDateTimeOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: applicationDateTimeOld is NULL! hacking in a PyRepNone");
		applicationDateTimeOld = new PyRepNone();
	}
	tuple9->items[0] = applicationDateTimeOld;
	applicationDateTimeOld = NULL;
	if(applicationDateTimeNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: applicationDateTimeNew is NULL! hacking in a PyRepNone");
		applicationDateTimeNew = new PyRepNone();
	}
	tuple9->items[1] = applicationDateTimeNew;
	applicationDateTimeNew = NULL;
	dict1_7 = tuple9;
	
	dict1->items[
		new PyRepString("applicationDateTime")
	] = dict1_7;
	PyRep *dict1_8;
	PyRepTuple *tuple10 = new PyRepTuple(2);
	if(characterIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: characterIDOld is NULL! hacking in a PyRepNone");
		characterIDOld = new PyRepNone();
	}
	tuple10->items[0] = characterIDOld;
	characterIDOld = NULL;
	if(characterIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_OnCorporationApplicationChanged: characterIDNew is NULL! hacking in a PyRepNone");
		characterIDNew = new PyRepNone();
	}
	tuple10->items[1] = characterIDNew;
	characterIDNew = NULL;
	dict1_8 = tuple10;
	
	dict1->items[
		new PyRepString("characterID")
	] = dict1_8;
	tuple0->items[2] = dict1;
	
	res = tuple0;
	

	return(res);
}

bool Notify_OnCorporationApplicationChanged::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_OnCorporationApplicationChanged::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 3) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple0 is the wrong size: expected 3, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: charID is not an int: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_1 = (PyRepInteger *) tuple0->items[0];
	if(int_1->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporationApplicationChanged: truncating 64 bit into into 32 bit int for field charID");
	}
	charID = int_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: corpID is not an int: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_2 = (PyRepInteger *) tuple0->items[1];
	if(int_2->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorporationApplicationChanged: truncating 64 bit into into 32 bit int for field corpID");
	}
	corpID = int_2->value;
	if(!tuple0->items[2]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: dict3 is the wrong type: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	bool dict3_uu4 = false;
	bool dict3_uu5 = false;
	bool dict3_uu6 = false;
	bool dict3_uu7 = false;
	bool dict3_uu8 = false;
	bool dict3_uu9 = false;
	bool dict3_uu10 = false;
	bool dict3_uu11 = false;
	bool dict3_uu12 = false;
	PyRepDict *dict3 = (PyRepDict *) tuple0->items[2];
	
	PyRepDict::iterator dict3_cur, dict3_end;
	dict3_cur = dict3->items.begin();
	dict3_end = dict3->items.end();
	for(; dict3_cur != dict3_end; dict3_cur++) {
		PyRep *key__ = dict3_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: a key in dict3 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "status") {
			dict3_uu4 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple4 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple4 = (PyRepTuple *) dict3_cur->second;
	if(tuple4->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple4 is the wrong size: expected 2, but got %d", tuple4->items.size());
		delete packet;
		return(false);
	}

	delete statusOld;
	statusOld = tuple4->items[0];
	tuple4->items[0] = NULL;
	
	delete statusNew;
	statusNew = tuple4->items[1];
	tuple4->items[1] = NULL;
	
		} else
		if(key_string__->value == "corporationID") {
			dict3_uu5 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple5 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple5 = (PyRepTuple *) dict3_cur->second;
	if(tuple5->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple5 is the wrong size: expected 2, but got %d", tuple5->items.size());
		delete packet;
		return(false);
	}

	delete corporationIDOld;
	corporationIDOld = tuple5->items[0];
	tuple5->items[0] = NULL;
	
	delete corporationIDNew;
	corporationIDNew = tuple5->items[1];
	tuple5->items[1] = NULL;
	
		} else
		if(key_string__->value == "roles") {
			dict3_uu6 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple6 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple6 = (PyRepTuple *) dict3_cur->second;
	if(tuple6->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple6 is the wrong size: expected 2, but got %d", tuple6->items.size());
		delete packet;
		return(false);
	}

	delete rolesOld;
	rolesOld = tuple6->items[0];
	tuple6->items[0] = NULL;
	
	delete rolesNew;
	rolesNew = tuple6->items[1];
	tuple6->items[1] = NULL;
	
		} else
		if(key_string__->value == "grantableRoles") {
			dict3_uu7 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple7 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple7 = (PyRepTuple *) dict3_cur->second;
	if(tuple7->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple7 is the wrong size: expected 2, but got %d", tuple7->items.size());
		delete packet;
		return(false);
	}

	delete grantableRolesOld;
	grantableRolesOld = tuple7->items[0];
	tuple7->items[0] = NULL;
	
	delete grantableRolesNew;
	grantableRolesNew = tuple7->items[1];
	tuple7->items[1] = NULL;
	
		} else
		if(key_string__->value == "deleted") {
			dict3_uu8 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple8 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple8 = (PyRepTuple *) dict3_cur->second;
	if(tuple8->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple8 is the wrong size: expected 2, but got %d", tuple8->items.size());
		delete packet;
		return(false);
	}

	delete deletedOld;
	deletedOld = tuple8->items[0];
	tuple8->items[0] = NULL;
	
	delete deletedNew;
	deletedNew = tuple8->items[1];
	tuple8->items[1] = NULL;
	
		} else
		if(key_string__->value == "applicationText") {
			dict3_uu9 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple9 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple9 = (PyRepTuple *) dict3_cur->second;
	if(tuple9->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple9 is the wrong size: expected 2, but got %d", tuple9->items.size());
		delete packet;
		return(false);
	}

	delete applicationTextOld;
	applicationTextOld = tuple9->items[0];
	tuple9->items[0] = NULL;
	
	delete applicationTextNew;
	applicationTextNew = tuple9->items[1];
	tuple9->items[1] = NULL;
	
		} else
		if(key_string__->value == "lastCorpUpdaterID") {
			dict3_uu10 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple10 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple10 = (PyRepTuple *) dict3_cur->second;
	if(tuple10->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple10 is the wrong size: expected 2, but got %d", tuple10->items.size());
		delete packet;
		return(false);
	}

	delete lastCorpUpdaterIDOld;
	lastCorpUpdaterIDOld = tuple10->items[0];
	tuple10->items[0] = NULL;
	
	delete lastCorpUpdaterIDNew;
	lastCorpUpdaterIDNew = tuple10->items[1];
	tuple10->items[1] = NULL;
	
		} else
		if(key_string__->value == "applicationDateTime") {
			dict3_uu11 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple11 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple11 = (PyRepTuple *) dict3_cur->second;
	if(tuple11->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple11 is the wrong size: expected 2, but got %d", tuple11->items.size());
		delete packet;
		return(false);
	}

	delete applicationDateTimeOld;
	applicationDateTimeOld = tuple11->items[0];
	tuple11->items[0] = NULL;
	
	delete applicationDateTimeNew;
	applicationDateTimeNew = tuple11->items[1];
	tuple11->items[1] = NULL;
	
		} else
		if(key_string__->value == "characterID") {
			dict3_uu12 = true;
	if(!dict3_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple12 is the wrong type: %s", dict3_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple12 = (PyRepTuple *) dict3_cur->second;
	if(tuple12->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: tuple12 is the wrong size: expected 2, but got %d", tuple12->items.size());
		delete packet;
		return(false);
	}

	delete characterIDOld;
	characterIDOld = tuple12->items[0];
	tuple12->items[0] = NULL;
	
	delete characterIDNew;
	characterIDNew = tuple12->items[1];
	tuple12->items[1] = NULL;
	
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Unknown key string '%s' in dict3", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict3_uu4) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu4' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_uu5) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu5' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_uu6) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu6' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_uu7) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu7' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_uu8) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu8' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_uu9) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu9' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_uu10) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu10' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_uu11) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu11' in dict3");
		delete packet;
		return(false);
	}
	
	if(!dict3_uu12) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorporationApplicationChanged failed: Missing dict entry for 'uu12' in dict3");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

Notify_OnCorporationApplicationChanged *Notify_OnCorporationApplicationChanged::Clone() const {
	Notify_OnCorporationApplicationChanged *res = new Notify_OnCorporationApplicationChanged;
	res->CloneFrom(this);
	return(res);
}

void Notify_OnCorporationApplicationChanged::CloneFrom(const Notify_OnCorporationApplicationChanged *from) {
	charID = from->charID;
	corpID = from->corpID;
	delete statusOld;
	if(from->statusOld == NULL) {
		statusOld = NULL;
	} else {
		statusOld = from->statusOld->Clone();
	}
	delete statusNew;
	if(from->statusNew == NULL) {
		statusNew = NULL;
	} else {
		statusNew = from->statusNew->Clone();
	}
	delete corporationIDOld;
	if(from->corporationIDOld == NULL) {
		corporationIDOld = NULL;
	} else {
		corporationIDOld = from->corporationIDOld->Clone();
	}
	delete corporationIDNew;
	if(from->corporationIDNew == NULL) {
		corporationIDNew = NULL;
	} else {
		corporationIDNew = from->corporationIDNew->Clone();
	}
	delete rolesOld;
	if(from->rolesOld == NULL) {
		rolesOld = NULL;
	} else {
		rolesOld = from->rolesOld->Clone();
	}
	delete rolesNew;
	if(from->rolesNew == NULL) {
		rolesNew = NULL;
	} else {
		rolesNew = from->rolesNew->Clone();
	}
	delete grantableRolesOld;
	if(from->grantableRolesOld == NULL) {
		grantableRolesOld = NULL;
	} else {
		grantableRolesOld = from->grantableRolesOld->Clone();
	}
	delete grantableRolesNew;
	if(from->grantableRolesNew == NULL) {
		grantableRolesNew = NULL;
	} else {
		grantableRolesNew = from->grantableRolesNew->Clone();
	}
	delete deletedOld;
	if(from->deletedOld == NULL) {
		deletedOld = NULL;
	} else {
		deletedOld = from->deletedOld->Clone();
	}
	delete deletedNew;
	if(from->deletedNew == NULL) {
		deletedNew = NULL;
	} else {
		deletedNew = from->deletedNew->Clone();
	}
	delete applicationTextOld;
	if(from->applicationTextOld == NULL) {
		applicationTextOld = NULL;
	} else {
		applicationTextOld = from->applicationTextOld->Clone();
	}
	delete applicationTextNew;
	if(from->applicationTextNew == NULL) {
		applicationTextNew = NULL;
	} else {
		applicationTextNew = from->applicationTextNew->Clone();
	}
	delete lastCorpUpdaterIDOld;
	if(from->lastCorpUpdaterIDOld == NULL) {
		lastCorpUpdaterIDOld = NULL;
	} else {
		lastCorpUpdaterIDOld = from->lastCorpUpdaterIDOld->Clone();
	}
	delete lastCorpUpdaterIDNew;
	if(from->lastCorpUpdaterIDNew == NULL) {
		lastCorpUpdaterIDNew = NULL;
	} else {
		lastCorpUpdaterIDNew = from->lastCorpUpdaterIDNew->Clone();
	}
	delete applicationDateTimeOld;
	if(from->applicationDateTimeOld == NULL) {
		applicationDateTimeOld = NULL;
	} else {
		applicationDateTimeOld = from->applicationDateTimeOld->Clone();
	}
	delete applicationDateTimeNew;
	if(from->applicationDateTimeNew == NULL) {
		applicationDateTimeNew = NULL;
	} else {
		applicationDateTimeNew = from->applicationDateTimeNew->Clone();
	}
	delete characterIDOld;
	if(from->characterIDOld == NULL) {
		characterIDOld = NULL;
	} else {
		characterIDOld = from->characterIDOld->Clone();
	}
	delete characterIDNew;
	if(from->characterIDNew == NULL) {
		characterIDNew = NULL;
	} else {
		characterIDNew = from->characterIDNew->Clone();
	}
	
}


Call_UpdateApplicationOffer::Call_UpdateApplicationOffer() {
	charID = 0;
	appText = "";
	newStatus = 0;
}

Call_UpdateApplicationOffer::~Call_UpdateApplicationOffer() {
}

void Call_UpdateApplicationOffer::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sCall_UpdateApplicationOffer", pfx);
	_log(l_type, "%scharID=%lu", pfx, charID);
	_log(l_type, "%sappText='%s'", pfx, appText.c_str());
	_log(l_type, "%snewStatus=%lu", pfx, newStatus);
}

PyRepTuple *Call_UpdateApplicationOffer::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(4);
	tuple0->items[0] = new PyRepInteger(charID);
	tuple0->items[1] = new PyRepString(appText);
	tuple0->items[2] = new PyRepInteger(newStatus);
	tuple0->items[3] = new PyRepNone();
	res = tuple0;
	

	return(res);
}

PyRepTuple *Call_UpdateApplicationOffer::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(4);
	tuple0->items[0] = new PyRepInteger(charID);
	tuple0->items[1] = new PyRepString(appText);
	tuple0->items[2] = new PyRepInteger(newStatus);
	tuple0->items[3] = new PyRepNone();
	res = tuple0;
	

	return(res);
}

bool Call_UpdateApplicationOffer::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Call_UpdateApplicationOffer::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplicationOffer failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 4) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplicationOffer failed: tuple0 is the wrong size: expected 4, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplicationOffer failed: charID is not an int: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_1 = (PyRepInteger *) tuple0->items[0];
	if(int_1->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Call_UpdateApplicationOffer: truncating 64 bit into into 32 bit int for field charID");
	}
	charID = int_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplicationOffer failed: appText is not a string: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_2 = (PyRepString *) tuple0->items[1];
	appText = string_2->value;
	if(!tuple0->items[2]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplicationOffer failed: newStatus is not an int: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_3 = (PyRepInteger *) tuple0->items[2];
	if(int_3->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Call_UpdateApplicationOffer: truncating 64 bit into into 32 bit int for field newStatus");
	}
	newStatus = int_3->value;
	if(!tuple0->items[3]->CheckType(PyRep::None)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplicationOffer failed: expecting a None but got a %s", tuple0->items[3]->TypeString());
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

Call_UpdateApplicationOffer *Call_UpdateApplicationOffer::Clone() const {
	Call_UpdateApplicationOffer *res = new Call_UpdateApplicationOffer;
	res->CloneFrom(this);
	return(res);
}

void Call_UpdateApplicationOffer::CloneFrom(const Call_UpdateApplicationOffer *from) {
	charID = from->charID;
	appText = from->appText;
	newStatus = from->newStatus;
	
}


MemberAttributeUpdate::MemberAttributeUpdate() {
	grantableRolesAtOtherOld = NULL;
	grantableRolesAtOtherNew = NULL;
	corporationIDOld = NULL;
	corporationIDNew = NULL;
	baseIDOld = NULL;
	baseIDNew = NULL;
	rolesOld = NULL;
	rolesNew = NULL;
	titleOld = NULL;
	titleNew = NULL;
	accountKeyOld = NULL;
	accountKeyNew = NULL;
	grantableRolesOld = NULL;
	grantableRolesNew = NULL;
	grantableRolesAtHQOld = NULL;
	grantableRolesAtHQNew = NULL;
	startDateTimeOld = NULL;
	startDateTimeNew = NULL;
	divisionIDOld = NULL;
	divisionIDNew = NULL;
	titleMaskOld = NULL;
	titleMaskNew = NULL;
	characterIDOld = NULL;
	characterIDNew = NULL;
	squadronIDOld = NULL;
	squadronIDNew = NULL;
	grantableRolesAtBaseOld = NULL;
	grantableRolesAtBaseNew = NULL;
	/* 
      <IDEntry key="STI145">
        <InlineTuple name="uu8">
          <raw name="STI145Old" />
          <raw name="STI145New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI146">
        <InlineTuple name="uut">
          <raw name="STI146Old" />
          <raw name="STI146New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI147">
        <InlineTuple name="uuq">
          <raw name="STI147Old" />
          <raw name="STI147New" />
        </InlineTuple>
      </IDEntry>
 */
}

MemberAttributeUpdate::~MemberAttributeUpdate() {
	delete grantableRolesAtOtherOld;
	delete grantableRolesAtOtherNew;
	delete corporationIDOld;
	delete corporationIDNew;
	delete baseIDOld;
	delete baseIDNew;
	delete rolesOld;
	delete rolesNew;
	delete titleOld;
	delete titleNew;
	delete accountKeyOld;
	delete accountKeyNew;
	delete grantableRolesOld;
	delete grantableRolesNew;
	delete grantableRolesAtHQOld;
	delete grantableRolesAtHQNew;
	delete startDateTimeOld;
	delete startDateTimeNew;
	delete divisionIDOld;
	delete divisionIDNew;
	delete titleMaskOld;
	delete titleMaskNew;
	delete characterIDOld;
	delete characterIDNew;
	delete squadronIDOld;
	delete squadronIDNew;
	delete grantableRolesAtBaseOld;
	delete grantableRolesAtBaseNew;
	/* 
      <IDEntry key="STI145">
        <InlineTuple name="uu8">
          <raw name="STI145Old" />
          <raw name="STI145New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI146">
        <InlineTuple name="uut">
          <raw name="STI146Old" />
          <raw name="STI146New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI147">
        <InlineTuple name="uuq">
          <raw name="STI147Old" />
          <raw name="STI147New" />
        </InlineTuple>
      </IDEntry>
 */
}

void MemberAttributeUpdate::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sMemberAttributeUpdate", pfx);
	_log(l_type, "%sgrantableRolesAtOtherOld:", pfx);
	std::string grantableRolesAtOtherOld_n(pfx);
	grantableRolesAtOtherOld_n += "    ";
	if(grantableRolesAtOtherOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesAtOtherOld_n.c_str());
	} else {
		grantableRolesAtOtherOld->Dump(l_type, grantableRolesAtOtherOld_n.c_str());
	}
	_log(l_type, "%sgrantableRolesAtOtherNew:", pfx);
	std::string grantableRolesAtOtherNew_n(pfx);
	grantableRolesAtOtherNew_n += "    ";
	if(grantableRolesAtOtherNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesAtOtherNew_n.c_str());
	} else {
		grantableRolesAtOtherNew->Dump(l_type, grantableRolesAtOtherNew_n.c_str());
	}
	_log(l_type, "%scorporationIDOld:", pfx);
	std::string corporationIDOld_n(pfx);
	corporationIDOld_n += "    ";
	if(corporationIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", corporationIDOld_n.c_str());
	} else {
		corporationIDOld->Dump(l_type, corporationIDOld_n.c_str());
	}
	_log(l_type, "%scorporationIDNew:", pfx);
	std::string corporationIDNew_n(pfx);
	corporationIDNew_n += "    ";
	if(corporationIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", corporationIDNew_n.c_str());
	} else {
		corporationIDNew->Dump(l_type, corporationIDNew_n.c_str());
	}
	_log(l_type, "%sbaseIDOld:", pfx);
	std::string baseIDOld_n(pfx);
	baseIDOld_n += "    ";
	if(baseIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", baseIDOld_n.c_str());
	} else {
		baseIDOld->Dump(l_type, baseIDOld_n.c_str());
	}
	_log(l_type, "%sbaseIDNew:", pfx);
	std::string baseIDNew_n(pfx);
	baseIDNew_n += "    ";
	if(baseIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", baseIDNew_n.c_str());
	} else {
		baseIDNew->Dump(l_type, baseIDNew_n.c_str());
	}
	_log(l_type, "%srolesOld:", pfx);
	std::string rolesOld_n(pfx);
	rolesOld_n += "    ";
	if(rolesOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", rolesOld_n.c_str());
	} else {
		rolesOld->Dump(l_type, rolesOld_n.c_str());
	}
	_log(l_type, "%srolesNew:", pfx);
	std::string rolesNew_n(pfx);
	rolesNew_n += "    ";
	if(rolesNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", rolesNew_n.c_str());
	} else {
		rolesNew->Dump(l_type, rolesNew_n.c_str());
	}
	_log(l_type, "%stitleOld:", pfx);
	std::string titleOld_n(pfx);
	titleOld_n += "    ";
	if(titleOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", titleOld_n.c_str());
	} else {
		titleOld->Dump(l_type, titleOld_n.c_str());
	}
	_log(l_type, "%stitleNew:", pfx);
	std::string titleNew_n(pfx);
	titleNew_n += "    ";
	if(titleNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", titleNew_n.c_str());
	} else {
		titleNew->Dump(l_type, titleNew_n.c_str());
	}
	_log(l_type, "%saccountKeyOld:", pfx);
	std::string accountKeyOld_n(pfx);
	accountKeyOld_n += "    ";
	if(accountKeyOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", accountKeyOld_n.c_str());
	} else {
		accountKeyOld->Dump(l_type, accountKeyOld_n.c_str());
	}
	_log(l_type, "%saccountKeyNew:", pfx);
	std::string accountKeyNew_n(pfx);
	accountKeyNew_n += "    ";
	if(accountKeyNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", accountKeyNew_n.c_str());
	} else {
		accountKeyNew->Dump(l_type, accountKeyNew_n.c_str());
	}
	_log(l_type, "%sgrantableRolesOld:", pfx);
	std::string grantableRolesOld_n(pfx);
	grantableRolesOld_n += "    ";
	if(grantableRolesOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesOld_n.c_str());
	} else {
		grantableRolesOld->Dump(l_type, grantableRolesOld_n.c_str());
	}
	_log(l_type, "%sgrantableRolesNew:", pfx);
	std::string grantableRolesNew_n(pfx);
	grantableRolesNew_n += "    ";
	if(grantableRolesNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesNew_n.c_str());
	} else {
		grantableRolesNew->Dump(l_type, grantableRolesNew_n.c_str());
	}
	_log(l_type, "%sgrantableRolesAtHQOld:", pfx);
	std::string grantableRolesAtHQOld_n(pfx);
	grantableRolesAtHQOld_n += "    ";
	if(grantableRolesAtHQOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesAtHQOld_n.c_str());
	} else {
		grantableRolesAtHQOld->Dump(l_type, grantableRolesAtHQOld_n.c_str());
	}
	_log(l_type, "%sgrantableRolesAtHQNew:", pfx);
	std::string grantableRolesAtHQNew_n(pfx);
	grantableRolesAtHQNew_n += "    ";
	if(grantableRolesAtHQNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesAtHQNew_n.c_str());
	} else {
		grantableRolesAtHQNew->Dump(l_type, grantableRolesAtHQNew_n.c_str());
	}
	_log(l_type, "%sstartDateTimeOld:", pfx);
	std::string startDateTimeOld_n(pfx);
	startDateTimeOld_n += "    ";
	if(startDateTimeOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", startDateTimeOld_n.c_str());
	} else {
		startDateTimeOld->Dump(l_type, startDateTimeOld_n.c_str());
	}
	_log(l_type, "%sstartDateTimeNew:", pfx);
	std::string startDateTimeNew_n(pfx);
	startDateTimeNew_n += "    ";
	if(startDateTimeNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", startDateTimeNew_n.c_str());
	} else {
		startDateTimeNew->Dump(l_type, startDateTimeNew_n.c_str());
	}
	_log(l_type, "%sdivisionIDOld:", pfx);
	std::string divisionIDOld_n(pfx);
	divisionIDOld_n += "    ";
	if(divisionIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", divisionIDOld_n.c_str());
	} else {
		divisionIDOld->Dump(l_type, divisionIDOld_n.c_str());
	}
	_log(l_type, "%sdivisionIDNew:", pfx);
	std::string divisionIDNew_n(pfx);
	divisionIDNew_n += "    ";
	if(divisionIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", divisionIDNew_n.c_str());
	} else {
		divisionIDNew->Dump(l_type, divisionIDNew_n.c_str());
	}
	_log(l_type, "%stitleMaskOld:", pfx);
	std::string titleMaskOld_n(pfx);
	titleMaskOld_n += "    ";
	if(titleMaskOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", titleMaskOld_n.c_str());
	} else {
		titleMaskOld->Dump(l_type, titleMaskOld_n.c_str());
	}
	_log(l_type, "%stitleMaskNew:", pfx);
	std::string titleMaskNew_n(pfx);
	titleMaskNew_n += "    ";
	if(titleMaskNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", titleMaskNew_n.c_str());
	} else {
		titleMaskNew->Dump(l_type, titleMaskNew_n.c_str());
	}
	_log(l_type, "%scharacterIDOld:", pfx);
	std::string characterIDOld_n(pfx);
	characterIDOld_n += "    ";
	if(characterIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", characterIDOld_n.c_str());
	} else {
		characterIDOld->Dump(l_type, characterIDOld_n.c_str());
	}
	_log(l_type, "%scharacterIDNew:", pfx);
	std::string characterIDNew_n(pfx);
	characterIDNew_n += "    ";
	if(characterIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", characterIDNew_n.c_str());
	} else {
		characterIDNew->Dump(l_type, characterIDNew_n.c_str());
	}
	_log(l_type, "%ssquadronIDOld:", pfx);
	std::string squadronIDOld_n(pfx);
	squadronIDOld_n += "    ";
	if(squadronIDOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", squadronIDOld_n.c_str());
	} else {
		squadronIDOld->Dump(l_type, squadronIDOld_n.c_str());
	}
	_log(l_type, "%ssquadronIDNew:", pfx);
	std::string squadronIDNew_n(pfx);
	squadronIDNew_n += "    ";
	if(squadronIDNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", squadronIDNew_n.c_str());
	} else {
		squadronIDNew->Dump(l_type, squadronIDNew_n.c_str());
	}
	_log(l_type, "%sgrantableRolesAtBaseOld:", pfx);
	std::string grantableRolesAtBaseOld_n(pfx);
	grantableRolesAtBaseOld_n += "    ";
	if(grantableRolesAtBaseOld == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesAtBaseOld_n.c_str());
	} else {
		grantableRolesAtBaseOld->Dump(l_type, grantableRolesAtBaseOld_n.c_str());
	}
	_log(l_type, "%sgrantableRolesAtBaseNew:", pfx);
	std::string grantableRolesAtBaseNew_n(pfx);
	grantableRolesAtBaseNew_n += "    ";
	if(grantableRolesAtBaseNew == NULL) {
		_log(l_type, "%sERROR: NULL REP!", grantableRolesAtBaseNew_n.c_str());
	} else {
		grantableRolesAtBaseNew->Dump(l_type, grantableRolesAtBaseNew_n.c_str());
	}
	/* 
      <IDEntry key="STI145">
        <InlineTuple name="uu8">
          <raw name="STI145Old" />
          <raw name="STI145New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI146">
        <InlineTuple name="uut">
          <raw name="STI146Old" />
          <raw name="STI146New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI147">
        <InlineTuple name="uuq">
          <raw name="STI147Old" />
          <raw name="STI147New" />
        </InlineTuple>
      </IDEntry>
 */
}

PyRepDict *MemberAttributeUpdate::Encode() {
	PyRepDict *res = NULL;
	PyRepDict *dict0 = new PyRepDict();
	PyRep *dict0_0;
	PyRepTuple *tuple1 = new PyRepTuple(2);
	if(grantableRolesAtOtherOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtOtherOld is NULL! hacking in a PyRepNone");
		grantableRolesAtOtherOld = new PyRepNone();
	}
	tuple1->items[0] = grantableRolesAtOtherOld->Clone();
	if(grantableRolesAtOtherNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtOtherNew is NULL! hacking in a PyRepNone");
		grantableRolesAtOtherNew = new PyRepNone();
	}
	tuple1->items[1] = grantableRolesAtOtherNew->Clone();
	dict0_0 = tuple1;
	
	dict0->items[
		new PyRepString("grantableRolesAtOther")
	] = dict0_0;
	PyRep *dict0_1;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	if(corporationIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: corporationIDOld is NULL! hacking in a PyRepNone");
		corporationIDOld = new PyRepNone();
	}
	tuple2->items[0] = corporationIDOld->Clone();
	if(corporationIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: corporationIDNew is NULL! hacking in a PyRepNone");
		corporationIDNew = new PyRepNone();
	}
	tuple2->items[1] = corporationIDNew->Clone();
	dict0_1 = tuple2;
	
	dict0->items[
		new PyRepString("corporationID")
	] = dict0_1;
	PyRep *dict0_2;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	if(baseIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: baseIDOld is NULL! hacking in a PyRepNone");
		baseIDOld = new PyRepNone();
	}
	tuple3->items[0] = baseIDOld->Clone();
	if(baseIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: baseIDNew is NULL! hacking in a PyRepNone");
		baseIDNew = new PyRepNone();
	}
	tuple3->items[1] = baseIDNew->Clone();
	dict0_2 = tuple3;
	
	dict0->items[
		new PyRepString("baseID")
	] = dict0_2;
	PyRep *dict0_3;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	if(rolesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: rolesOld is NULL! hacking in a PyRepNone");
		rolesOld = new PyRepNone();
	}
	tuple4->items[0] = rolesOld->Clone();
	if(rolesNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: rolesNew is NULL! hacking in a PyRepNone");
		rolesNew = new PyRepNone();
	}
	tuple4->items[1] = rolesNew->Clone();
	dict0_3 = tuple4;
	
	dict0->items[
		new PyRepString("roles")
	] = dict0_3;
	PyRep *dict0_4;
	PyRepTuple *tuple5 = new PyRepTuple(2);
	if(titleOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: titleOld is NULL! hacking in a PyRepNone");
		titleOld = new PyRepNone();
	}
	tuple5->items[0] = titleOld->Clone();
	if(titleNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: titleNew is NULL! hacking in a PyRepNone");
		titleNew = new PyRepNone();
	}
	tuple5->items[1] = titleNew->Clone();
	dict0_4 = tuple5;
	
	dict0->items[
		new PyRepString("title")
	] = dict0_4;
	PyRep *dict0_5;
	PyRepTuple *tuple6 = new PyRepTuple(2);
	if(accountKeyOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: accountKeyOld is NULL! hacking in a PyRepNone");
		accountKeyOld = new PyRepNone();
	}
	tuple6->items[0] = accountKeyOld->Clone();
	if(accountKeyNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: accountKeyNew is NULL! hacking in a PyRepNone");
		accountKeyNew = new PyRepNone();
	}
	tuple6->items[1] = accountKeyNew->Clone();
	dict0_5 = tuple6;
	
	dict0->items[
		new PyRepString("accountKey")
	] = dict0_5;
	PyRep *dict0_6;
	PyRepTuple *tuple7 = new PyRepTuple(2);
	if(grantableRolesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesOld is NULL! hacking in a PyRepNone");
		grantableRolesOld = new PyRepNone();
	}
	tuple7->items[0] = grantableRolesOld->Clone();
	if(grantableRolesNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesNew is NULL! hacking in a PyRepNone");
		grantableRolesNew = new PyRepNone();
	}
	tuple7->items[1] = grantableRolesNew->Clone();
	dict0_6 = tuple7;
	
	dict0->items[
		new PyRepString("grantableRoles")
	] = dict0_6;
	PyRep *dict0_7;
	PyRepTuple *tuple8 = new PyRepTuple(2);
	if(grantableRolesAtHQOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtHQOld is NULL! hacking in a PyRepNone");
		grantableRolesAtHQOld = new PyRepNone();
	}
	tuple8->items[0] = grantableRolesAtHQOld->Clone();
	if(grantableRolesAtHQNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtHQNew is NULL! hacking in a PyRepNone");
		grantableRolesAtHQNew = new PyRepNone();
	}
	tuple8->items[1] = grantableRolesAtHQNew->Clone();
	dict0_7 = tuple8;
	
	dict0->items[
		new PyRepString("grantableRolesAtHQ")
	] = dict0_7;
	PyRep *dict0_8;
	PyRepTuple *tuple9 = new PyRepTuple(2);
	if(startDateTimeOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: startDateTimeOld is NULL! hacking in a PyRepNone");
		startDateTimeOld = new PyRepNone();
	}
	tuple9->items[0] = startDateTimeOld->Clone();
	if(startDateTimeNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: startDateTimeNew is NULL! hacking in a PyRepNone");
		startDateTimeNew = new PyRepNone();
	}
	tuple9->items[1] = startDateTimeNew->Clone();
	dict0_8 = tuple9;
	
	dict0->items[
		new PyRepString("startDateTime")
	] = dict0_8;
	PyRep *dict0_9;
	PyRepTuple *tuple10 = new PyRepTuple(2);
	if(divisionIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: divisionIDOld is NULL! hacking in a PyRepNone");
		divisionIDOld = new PyRepNone();
	}
	tuple10->items[0] = divisionIDOld->Clone();
	if(divisionIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: divisionIDNew is NULL! hacking in a PyRepNone");
		divisionIDNew = new PyRepNone();
	}
	tuple10->items[1] = divisionIDNew->Clone();
	dict0_9 = tuple10;
	
	dict0->items[
		new PyRepString("divisionID")
	] = dict0_9;
	PyRep *dict0_10;
	PyRepTuple *tuple11 = new PyRepTuple(2);
	if(titleMaskOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: titleMaskOld is NULL! hacking in a PyRepNone");
		titleMaskOld = new PyRepNone();
	}
	tuple11->items[0] = titleMaskOld->Clone();
	if(titleMaskNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: titleMaskNew is NULL! hacking in a PyRepNone");
		titleMaskNew = new PyRepNone();
	}
	tuple11->items[1] = titleMaskNew->Clone();
	dict0_10 = tuple11;
	
	dict0->items[
		new PyRepString("titleMask")
	] = dict0_10;
	PyRep *dict0_11;
	PyRepTuple *tuple12 = new PyRepTuple(2);
	if(characterIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: characterIDOld is NULL! hacking in a PyRepNone");
		characterIDOld = new PyRepNone();
	}
	tuple12->items[0] = characterIDOld->Clone();
	if(characterIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: characterIDNew is NULL! hacking in a PyRepNone");
		characterIDNew = new PyRepNone();
	}
	tuple12->items[1] = characterIDNew->Clone();
	dict0_11 = tuple12;
	
	dict0->items[
		new PyRepString("characterID")
	] = dict0_11;
	PyRep *dict0_12;
	PyRepTuple *tuple13 = new PyRepTuple(2);
	if(squadronIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: squadronIDOld is NULL! hacking in a PyRepNone");
		squadronIDOld = new PyRepNone();
	}
	tuple13->items[0] = squadronIDOld->Clone();
	if(squadronIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: squadronIDNew is NULL! hacking in a PyRepNone");
		squadronIDNew = new PyRepNone();
	}
	tuple13->items[1] = squadronIDNew->Clone();
	dict0_12 = tuple13;
	
	dict0->items[
		new PyRepString("squadronID")
	] = dict0_12;
	PyRep *dict0_13;
	PyRepTuple *tuple14 = new PyRepTuple(2);
	if(grantableRolesAtBaseOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtBaseOld is NULL! hacking in a PyRepNone");
		grantableRolesAtBaseOld = new PyRepNone();
	}
	tuple14->items[0] = grantableRolesAtBaseOld->Clone();
	if(grantableRolesAtBaseNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtBaseNew is NULL! hacking in a PyRepNone");
		grantableRolesAtBaseNew = new PyRepNone();
	}
	tuple14->items[1] = grantableRolesAtBaseNew->Clone();
	dict0_13 = tuple14;
	
	dict0->items[
		new PyRepString("grantableRolesAtBase")
	] = dict0_13;
	/* 
      <IDEntry key="STI145">
        <InlineTuple name="uu8">
          <raw name="STI145Old" />
          <raw name="STI145New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI146">
        <InlineTuple name="uut">
          <raw name="STI146Old" />
          <raw name="STI146New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI147">
        <InlineTuple name="uuq">
          <raw name="STI147Old" />
          <raw name="STI147New" />
        </InlineTuple>
      </IDEntry>
 */
	res = dict0;
	

	return(res);
}

PyRepDict *MemberAttributeUpdate::FastEncode() {
	PyRepDict *res = NULL;
	PyRepDict *dict0 = new PyRepDict();
	PyRep *dict0_0;
	PyRepTuple *tuple1 = new PyRepTuple(2);
	if(grantableRolesAtOtherOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtOtherOld is NULL! hacking in a PyRepNone");
		grantableRolesAtOtherOld = new PyRepNone();
	}
	tuple1->items[0] = grantableRolesAtOtherOld;
	grantableRolesAtOtherOld = NULL;
	if(grantableRolesAtOtherNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtOtherNew is NULL! hacking in a PyRepNone");
		grantableRolesAtOtherNew = new PyRepNone();
	}
	tuple1->items[1] = grantableRolesAtOtherNew;
	grantableRolesAtOtherNew = NULL;
	dict0_0 = tuple1;
	
	dict0->items[
		new PyRepString("grantableRolesAtOther")
	] = dict0_0;
	PyRep *dict0_1;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	if(corporationIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: corporationIDOld is NULL! hacking in a PyRepNone");
		corporationIDOld = new PyRepNone();
	}
	tuple2->items[0] = corporationIDOld;
	corporationIDOld = NULL;
	if(corporationIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: corporationIDNew is NULL! hacking in a PyRepNone");
		corporationIDNew = new PyRepNone();
	}
	tuple2->items[1] = corporationIDNew;
	corporationIDNew = NULL;
	dict0_1 = tuple2;
	
	dict0->items[
		new PyRepString("corporationID")
	] = dict0_1;
	PyRep *dict0_2;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	if(baseIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: baseIDOld is NULL! hacking in a PyRepNone");
		baseIDOld = new PyRepNone();
	}
	tuple3->items[0] = baseIDOld;
	baseIDOld = NULL;
	if(baseIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: baseIDNew is NULL! hacking in a PyRepNone");
		baseIDNew = new PyRepNone();
	}
	tuple3->items[1] = baseIDNew;
	baseIDNew = NULL;
	dict0_2 = tuple3;
	
	dict0->items[
		new PyRepString("baseID")
	] = dict0_2;
	PyRep *dict0_3;
	PyRepTuple *tuple4 = new PyRepTuple(2);
	if(rolesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: rolesOld is NULL! hacking in a PyRepNone");
		rolesOld = new PyRepNone();
	}
	tuple4->items[0] = rolesOld;
	rolesOld = NULL;
	if(rolesNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: rolesNew is NULL! hacking in a PyRepNone");
		rolesNew = new PyRepNone();
	}
	tuple4->items[1] = rolesNew;
	rolesNew = NULL;
	dict0_3 = tuple4;
	
	dict0->items[
		new PyRepString("roles")
	] = dict0_3;
	PyRep *dict0_4;
	PyRepTuple *tuple5 = new PyRepTuple(2);
	if(titleOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: titleOld is NULL! hacking in a PyRepNone");
		titleOld = new PyRepNone();
	}
	tuple5->items[0] = titleOld;
	titleOld = NULL;
	if(titleNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: titleNew is NULL! hacking in a PyRepNone");
		titleNew = new PyRepNone();
	}
	tuple5->items[1] = titleNew;
	titleNew = NULL;
	dict0_4 = tuple5;
	
	dict0->items[
		new PyRepString("title")
	] = dict0_4;
	PyRep *dict0_5;
	PyRepTuple *tuple6 = new PyRepTuple(2);
	if(accountKeyOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: accountKeyOld is NULL! hacking in a PyRepNone");
		accountKeyOld = new PyRepNone();
	}
	tuple6->items[0] = accountKeyOld;
	accountKeyOld = NULL;
	if(accountKeyNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: accountKeyNew is NULL! hacking in a PyRepNone");
		accountKeyNew = new PyRepNone();
	}
	tuple6->items[1] = accountKeyNew;
	accountKeyNew = NULL;
	dict0_5 = tuple6;
	
	dict0->items[
		new PyRepString("accountKey")
	] = dict0_5;
	PyRep *dict0_6;
	PyRepTuple *tuple7 = new PyRepTuple(2);
	if(grantableRolesOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesOld is NULL! hacking in a PyRepNone");
		grantableRolesOld = new PyRepNone();
	}
	tuple7->items[0] = grantableRolesOld;
	grantableRolesOld = NULL;
	if(grantableRolesNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesNew is NULL! hacking in a PyRepNone");
		grantableRolesNew = new PyRepNone();
	}
	tuple7->items[1] = grantableRolesNew;
	grantableRolesNew = NULL;
	dict0_6 = tuple7;
	
	dict0->items[
		new PyRepString("grantableRoles")
	] = dict0_6;
	PyRep *dict0_7;
	PyRepTuple *tuple8 = new PyRepTuple(2);
	if(grantableRolesAtHQOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtHQOld is NULL! hacking in a PyRepNone");
		grantableRolesAtHQOld = new PyRepNone();
	}
	tuple8->items[0] = grantableRolesAtHQOld;
	grantableRolesAtHQOld = NULL;
	if(grantableRolesAtHQNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtHQNew is NULL! hacking in a PyRepNone");
		grantableRolesAtHQNew = new PyRepNone();
	}
	tuple8->items[1] = grantableRolesAtHQNew;
	grantableRolesAtHQNew = NULL;
	dict0_7 = tuple8;
	
	dict0->items[
		new PyRepString("grantableRolesAtHQ")
	] = dict0_7;
	PyRep *dict0_8;
	PyRepTuple *tuple9 = new PyRepTuple(2);
	if(startDateTimeOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: startDateTimeOld is NULL! hacking in a PyRepNone");
		startDateTimeOld = new PyRepNone();
	}
	tuple9->items[0] = startDateTimeOld;
	startDateTimeOld = NULL;
	if(startDateTimeNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: startDateTimeNew is NULL! hacking in a PyRepNone");
		startDateTimeNew = new PyRepNone();
	}
	tuple9->items[1] = startDateTimeNew;
	startDateTimeNew = NULL;
	dict0_8 = tuple9;
	
	dict0->items[
		new PyRepString("startDateTime")
	] = dict0_8;
	PyRep *dict0_9;
	PyRepTuple *tuple10 = new PyRepTuple(2);
	if(divisionIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: divisionIDOld is NULL! hacking in a PyRepNone");
		divisionIDOld = new PyRepNone();
	}
	tuple10->items[0] = divisionIDOld;
	divisionIDOld = NULL;
	if(divisionIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: divisionIDNew is NULL! hacking in a PyRepNone");
		divisionIDNew = new PyRepNone();
	}
	tuple10->items[1] = divisionIDNew;
	divisionIDNew = NULL;
	dict0_9 = tuple10;
	
	dict0->items[
		new PyRepString("divisionID")
	] = dict0_9;
	PyRep *dict0_10;
	PyRepTuple *tuple11 = new PyRepTuple(2);
	if(titleMaskOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: titleMaskOld is NULL! hacking in a PyRepNone");
		titleMaskOld = new PyRepNone();
	}
	tuple11->items[0] = titleMaskOld;
	titleMaskOld = NULL;
	if(titleMaskNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: titleMaskNew is NULL! hacking in a PyRepNone");
		titleMaskNew = new PyRepNone();
	}
	tuple11->items[1] = titleMaskNew;
	titleMaskNew = NULL;
	dict0_10 = tuple11;
	
	dict0->items[
		new PyRepString("titleMask")
	] = dict0_10;
	PyRep *dict0_11;
	PyRepTuple *tuple12 = new PyRepTuple(2);
	if(characterIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: characterIDOld is NULL! hacking in a PyRepNone");
		characterIDOld = new PyRepNone();
	}
	tuple12->items[0] = characterIDOld;
	characterIDOld = NULL;
	if(characterIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: characterIDNew is NULL! hacking in a PyRepNone");
		characterIDNew = new PyRepNone();
	}
	tuple12->items[1] = characterIDNew;
	characterIDNew = NULL;
	dict0_11 = tuple12;
	
	dict0->items[
		new PyRepString("characterID")
	] = dict0_11;
	PyRep *dict0_12;
	PyRepTuple *tuple13 = new PyRepTuple(2);
	if(squadronIDOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: squadronIDOld is NULL! hacking in a PyRepNone");
		squadronIDOld = new PyRepNone();
	}
	tuple13->items[0] = squadronIDOld;
	squadronIDOld = NULL;
	if(squadronIDNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: squadronIDNew is NULL! hacking in a PyRepNone");
		squadronIDNew = new PyRepNone();
	}
	tuple13->items[1] = squadronIDNew;
	squadronIDNew = NULL;
	dict0_12 = tuple13;
	
	dict0->items[
		new PyRepString("squadronID")
	] = dict0_12;
	PyRep *dict0_13;
	PyRepTuple *tuple14 = new PyRepTuple(2);
	if(grantableRolesAtBaseOld == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtBaseOld is NULL! hacking in a PyRepNone");
		grantableRolesAtBaseOld = new PyRepNone();
	}
	tuple14->items[0] = grantableRolesAtBaseOld;
	grantableRolesAtBaseOld = NULL;
	if(grantableRolesAtBaseNew == NULL) {
		_log(NET__PACKET_ERROR, "Encode MemberAttributeUpdate: grantableRolesAtBaseNew is NULL! hacking in a PyRepNone");
		grantableRolesAtBaseNew = new PyRepNone();
	}
	tuple14->items[1] = grantableRolesAtBaseNew;
	grantableRolesAtBaseNew = NULL;
	dict0_13 = tuple14;
	
	dict0->items[
		new PyRepString("grantableRolesAtBase")
	] = dict0_13;
	/* 
      <IDEntry key="STI145">
        <InlineTuple name="uu8">
          <raw name="STI145Old" />
          <raw name="STI145New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI146">
        <InlineTuple name="uut">
          <raw name="STI146Old" />
          <raw name="STI146New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI147">
        <InlineTuple name="uuq">
          <raw name="STI147Old" />
          <raw name="STI147New" />
        </InlineTuple>
      </IDEntry>
 */
	res = dict0;
	

	return(res);
}

bool MemberAttributeUpdate::Decode(PyRepDict **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool MemberAttributeUpdate::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: dict0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	bool dict0_uu1 = false;
	bool dict0_uu2 = false;
	bool dict0_uu3 = false;
	bool dict0_uu4 = false;
	bool dict0_uu5 = false;
	bool dict0_uu6 = false;
	bool dict0_uu7 = false;
	bool dict0_uu9 = false;
	bool dict0_uuw = false;
	bool dict0_uue = false;
	bool dict0_uur = false;
	bool dict0_uuz = false;
	bool dict0_uuu = false;
	bool dict0_uui = false;
	PyRepDict *dict0 = (PyRepDict *) packet;
	
	PyRepDict::iterator dict0_cur, dict0_end;
	dict0_cur = dict0->items.begin();
	dict0_end = dict0->items.end();
	for(; dict0_cur != dict0_end; dict0_cur++) {
		PyRep *key__ = dict0_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: a key in dict0 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "grantableRolesAtOther") {
			dict0_uu1 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple1 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple1 = (PyRepTuple *) dict0_cur->second;
	if(tuple1->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple1 is the wrong size: expected 2, but got %d", tuple1->items.size());
		delete packet;
		return(false);
	}

	delete grantableRolesAtOtherOld;
	grantableRolesAtOtherOld = tuple1->items[0];
	tuple1->items[0] = NULL;
	
	delete grantableRolesAtOtherNew;
	grantableRolesAtOtherNew = tuple1->items[1];
	tuple1->items[1] = NULL;
	
		} else
		if(key_string__->value == "corporationID") {
			dict0_uu2 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple2 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple2 = (PyRepTuple *) dict0_cur->second;
	if(tuple2->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple2 is the wrong size: expected 2, but got %d", tuple2->items.size());
		delete packet;
		return(false);
	}

	delete corporationIDOld;
	corporationIDOld = tuple2->items[0];
	tuple2->items[0] = NULL;
	
	delete corporationIDNew;
	corporationIDNew = tuple2->items[1];
	tuple2->items[1] = NULL;
	
		} else
		if(key_string__->value == "baseID") {
			dict0_uu3 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple3 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple3 = (PyRepTuple *) dict0_cur->second;
	if(tuple3->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple3 is the wrong size: expected 2, but got %d", tuple3->items.size());
		delete packet;
		return(false);
	}

	delete baseIDOld;
	baseIDOld = tuple3->items[0];
	tuple3->items[0] = NULL;
	
	delete baseIDNew;
	baseIDNew = tuple3->items[1];
	tuple3->items[1] = NULL;
	
		} else
		if(key_string__->value == "roles") {
			dict0_uu4 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple4 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple4 = (PyRepTuple *) dict0_cur->second;
	if(tuple4->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple4 is the wrong size: expected 2, but got %d", tuple4->items.size());
		delete packet;
		return(false);
	}

	delete rolesOld;
	rolesOld = tuple4->items[0];
	tuple4->items[0] = NULL;
	
	delete rolesNew;
	rolesNew = tuple4->items[1];
	tuple4->items[1] = NULL;
	
		} else
		if(key_string__->value == "title") {
			dict0_uu5 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple5 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple5 = (PyRepTuple *) dict0_cur->second;
	if(tuple5->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple5 is the wrong size: expected 2, but got %d", tuple5->items.size());
		delete packet;
		return(false);
	}

	delete titleOld;
	titleOld = tuple5->items[0];
	tuple5->items[0] = NULL;
	
	delete titleNew;
	titleNew = tuple5->items[1];
	tuple5->items[1] = NULL;
	
		} else
		if(key_string__->value == "accountKey") {
			dict0_uu6 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple6 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple6 = (PyRepTuple *) dict0_cur->second;
	if(tuple6->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple6 is the wrong size: expected 2, but got %d", tuple6->items.size());
		delete packet;
		return(false);
	}

	delete accountKeyOld;
	accountKeyOld = tuple6->items[0];
	tuple6->items[0] = NULL;
	
	delete accountKeyNew;
	accountKeyNew = tuple6->items[1];
	tuple6->items[1] = NULL;
	
		} else
		if(key_string__->value == "grantableRoles") {
			dict0_uu7 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple7 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple7 = (PyRepTuple *) dict0_cur->second;
	if(tuple7->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple7 is the wrong size: expected 2, but got %d", tuple7->items.size());
		delete packet;
		return(false);
	}

	delete grantableRolesOld;
	grantableRolesOld = tuple7->items[0];
	tuple7->items[0] = NULL;
	
	delete grantableRolesNew;
	grantableRolesNew = tuple7->items[1];
	tuple7->items[1] = NULL;
	
		} else
		if(key_string__->value == "grantableRolesAtHQ") {
			dict0_uu9 = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple8 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple8 = (PyRepTuple *) dict0_cur->second;
	if(tuple8->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple8 is the wrong size: expected 2, but got %d", tuple8->items.size());
		delete packet;
		return(false);
	}

	delete grantableRolesAtHQOld;
	grantableRolesAtHQOld = tuple8->items[0];
	tuple8->items[0] = NULL;
	
	delete grantableRolesAtHQNew;
	grantableRolesAtHQNew = tuple8->items[1];
	tuple8->items[1] = NULL;
	
		} else
		if(key_string__->value == "startDateTime") {
			dict0_uuw = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple9 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple9 = (PyRepTuple *) dict0_cur->second;
	if(tuple9->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple9 is the wrong size: expected 2, but got %d", tuple9->items.size());
		delete packet;
		return(false);
	}

	delete startDateTimeOld;
	startDateTimeOld = tuple9->items[0];
	tuple9->items[0] = NULL;
	
	delete startDateTimeNew;
	startDateTimeNew = tuple9->items[1];
	tuple9->items[1] = NULL;
	
		} else
		if(key_string__->value == "divisionID") {
			dict0_uue = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple10 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple10 = (PyRepTuple *) dict0_cur->second;
	if(tuple10->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple10 is the wrong size: expected 2, but got %d", tuple10->items.size());
		delete packet;
		return(false);
	}

	delete divisionIDOld;
	divisionIDOld = tuple10->items[0];
	tuple10->items[0] = NULL;
	
	delete divisionIDNew;
	divisionIDNew = tuple10->items[1];
	tuple10->items[1] = NULL;
	
		} else
		if(key_string__->value == "titleMask") {
			dict0_uur = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple11 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple11 = (PyRepTuple *) dict0_cur->second;
	if(tuple11->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple11 is the wrong size: expected 2, but got %d", tuple11->items.size());
		delete packet;
		return(false);
	}

	delete titleMaskOld;
	titleMaskOld = tuple11->items[0];
	tuple11->items[0] = NULL;
	
	delete titleMaskNew;
	titleMaskNew = tuple11->items[1];
	tuple11->items[1] = NULL;
	
		} else
		if(key_string__->value == "characterID") {
			dict0_uuz = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple12 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple12 = (PyRepTuple *) dict0_cur->second;
	if(tuple12->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple12 is the wrong size: expected 2, but got %d", tuple12->items.size());
		delete packet;
		return(false);
	}

	delete characterIDOld;
	characterIDOld = tuple12->items[0];
	tuple12->items[0] = NULL;
	
	delete characterIDNew;
	characterIDNew = tuple12->items[1];
	tuple12->items[1] = NULL;
	
		} else
		if(key_string__->value == "squadronID") {
			dict0_uuu = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple13 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple13 = (PyRepTuple *) dict0_cur->second;
	if(tuple13->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple13 is the wrong size: expected 2, but got %d", tuple13->items.size());
		delete packet;
		return(false);
	}

	delete squadronIDOld;
	squadronIDOld = tuple13->items[0];
	tuple13->items[0] = NULL;
	
	delete squadronIDNew;
	squadronIDNew = tuple13->items[1];
	tuple13->items[1] = NULL;
	
		} else
		if(key_string__->value == "grantableRolesAtBase") {
			dict0_uui = true;
	if(!dict0_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple14 is the wrong type: %s", dict0_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple14 = (PyRepTuple *) dict0_cur->second;
	if(tuple14->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: tuple14 is the wrong size: expected 2, but got %d", tuple14->items.size());
		delete packet;
		return(false);
	}

	delete grantableRolesAtBaseOld;
	grantableRolesAtBaseOld = tuple14->items[0];
	tuple14->items[0] = NULL;
	
	delete grantableRolesAtBaseNew;
	grantableRolesAtBaseNew = tuple14->items[1];
	tuple14->items[1] = NULL;
	
		} else
	/* 
      <IDEntry key="STI145">
        <InlineTuple name="uu8">
          <raw name="STI145Old" />
          <raw name="STI145New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI146">
        <InlineTuple name="uut">
          <raw name="STI146Old" />
          <raw name="STI146New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI147">
        <InlineTuple name="uuq">
          <raw name="STI147Old" />
          <raw name="STI147New" />
        </InlineTuple>
      </IDEntry>
 */
		{
			_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Unknown key string '%s' in dict0", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict0_uu1) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uu1' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uu2) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uu2' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uu3) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uu3' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uu4) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uu4' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uu5) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uu5' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uu6) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uu6' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uu7) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uu7' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uu9) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uu9' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uuw) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uuw' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uue) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uue' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uur) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uur' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uuz) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uuz' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uuu) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uuu' in dict0");
		delete packet;
		return(false);
	}
	
	if(!dict0_uui) {
		_log(NET__PACKET_ERROR, "Decode MemberAttributeUpdate failed: Missing dict entry for 'uui' in dict0");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

MemberAttributeUpdate *MemberAttributeUpdate::Clone() const {
	MemberAttributeUpdate *res = new MemberAttributeUpdate;
	res->CloneFrom(this);
	return(res);
}

void MemberAttributeUpdate::CloneFrom(const MemberAttributeUpdate *from) {
	delete grantableRolesAtOtherOld;
	if(from->grantableRolesAtOtherOld == NULL) {
		grantableRolesAtOtherOld = NULL;
	} else {
		grantableRolesAtOtherOld = from->grantableRolesAtOtherOld->Clone();
	}
	delete grantableRolesAtOtherNew;
	if(from->grantableRolesAtOtherNew == NULL) {
		grantableRolesAtOtherNew = NULL;
	} else {
		grantableRolesAtOtherNew = from->grantableRolesAtOtherNew->Clone();
	}
	delete corporationIDOld;
	if(from->corporationIDOld == NULL) {
		corporationIDOld = NULL;
	} else {
		corporationIDOld = from->corporationIDOld->Clone();
	}
	delete corporationIDNew;
	if(from->corporationIDNew == NULL) {
		corporationIDNew = NULL;
	} else {
		corporationIDNew = from->corporationIDNew->Clone();
	}
	delete baseIDOld;
	if(from->baseIDOld == NULL) {
		baseIDOld = NULL;
	} else {
		baseIDOld = from->baseIDOld->Clone();
	}
	delete baseIDNew;
	if(from->baseIDNew == NULL) {
		baseIDNew = NULL;
	} else {
		baseIDNew = from->baseIDNew->Clone();
	}
	delete rolesOld;
	if(from->rolesOld == NULL) {
		rolesOld = NULL;
	} else {
		rolesOld = from->rolesOld->Clone();
	}
	delete rolesNew;
	if(from->rolesNew == NULL) {
		rolesNew = NULL;
	} else {
		rolesNew = from->rolesNew->Clone();
	}
	delete titleOld;
	if(from->titleOld == NULL) {
		titleOld = NULL;
	} else {
		titleOld = from->titleOld->Clone();
	}
	delete titleNew;
	if(from->titleNew == NULL) {
		titleNew = NULL;
	} else {
		titleNew = from->titleNew->Clone();
	}
	delete accountKeyOld;
	if(from->accountKeyOld == NULL) {
		accountKeyOld = NULL;
	} else {
		accountKeyOld = from->accountKeyOld->Clone();
	}
	delete accountKeyNew;
	if(from->accountKeyNew == NULL) {
		accountKeyNew = NULL;
	} else {
		accountKeyNew = from->accountKeyNew->Clone();
	}
	delete grantableRolesOld;
	if(from->grantableRolesOld == NULL) {
		grantableRolesOld = NULL;
	} else {
		grantableRolesOld = from->grantableRolesOld->Clone();
	}
	delete grantableRolesNew;
	if(from->grantableRolesNew == NULL) {
		grantableRolesNew = NULL;
	} else {
		grantableRolesNew = from->grantableRolesNew->Clone();
	}
	delete grantableRolesAtHQOld;
	if(from->grantableRolesAtHQOld == NULL) {
		grantableRolesAtHQOld = NULL;
	} else {
		grantableRolesAtHQOld = from->grantableRolesAtHQOld->Clone();
	}
	delete grantableRolesAtHQNew;
	if(from->grantableRolesAtHQNew == NULL) {
		grantableRolesAtHQNew = NULL;
	} else {
		grantableRolesAtHQNew = from->grantableRolesAtHQNew->Clone();
	}
	delete startDateTimeOld;
	if(from->startDateTimeOld == NULL) {
		startDateTimeOld = NULL;
	} else {
		startDateTimeOld = from->startDateTimeOld->Clone();
	}
	delete startDateTimeNew;
	if(from->startDateTimeNew == NULL) {
		startDateTimeNew = NULL;
	} else {
		startDateTimeNew = from->startDateTimeNew->Clone();
	}
	delete divisionIDOld;
	if(from->divisionIDOld == NULL) {
		divisionIDOld = NULL;
	} else {
		divisionIDOld = from->divisionIDOld->Clone();
	}
	delete divisionIDNew;
	if(from->divisionIDNew == NULL) {
		divisionIDNew = NULL;
	} else {
		divisionIDNew = from->divisionIDNew->Clone();
	}
	delete titleMaskOld;
	if(from->titleMaskOld == NULL) {
		titleMaskOld = NULL;
	} else {
		titleMaskOld = from->titleMaskOld->Clone();
	}
	delete titleMaskNew;
	if(from->titleMaskNew == NULL) {
		titleMaskNew = NULL;
	} else {
		titleMaskNew = from->titleMaskNew->Clone();
	}
	delete characterIDOld;
	if(from->characterIDOld == NULL) {
		characterIDOld = NULL;
	} else {
		characterIDOld = from->characterIDOld->Clone();
	}
	delete characterIDNew;
	if(from->characterIDNew == NULL) {
		characterIDNew = NULL;
	} else {
		characterIDNew = from->characterIDNew->Clone();
	}
	delete squadronIDOld;
	if(from->squadronIDOld == NULL) {
		squadronIDOld = NULL;
	} else {
		squadronIDOld = from->squadronIDOld->Clone();
	}
	delete squadronIDNew;
	if(from->squadronIDNew == NULL) {
		squadronIDNew = NULL;
	} else {
		squadronIDNew = from->squadronIDNew->Clone();
	}
	delete grantableRolesAtBaseOld;
	if(from->grantableRolesAtBaseOld == NULL) {
		grantableRolesAtBaseOld = NULL;
	} else {
		grantableRolesAtBaseOld = from->grantableRolesAtBaseOld->Clone();
	}
	delete grantableRolesAtBaseNew;
	if(from->grantableRolesAtBaseNew == NULL) {
		grantableRolesAtBaseNew = NULL;
	} else {
		grantableRolesAtBaseNew = from->grantableRolesAtBaseNew->Clone();
	}
	/* 
      <IDEntry key="STI145">
        <InlineTuple name="uu8">
          <raw name="STI145Old" />
          <raw name="STI145New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI146">
        <InlineTuple name="uut">
          <raw name="STI146Old" />
          <raw name="STI146New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI147">
        <InlineTuple name="uuq">
          <raw name="STI147Old" />
          <raw name="STI147New" />
        </InlineTuple>
      </IDEntry>
 */
	
}


Notify_OnCorpMemberChange::Notify_OnCorpMemberChange() {
	charID = 0;
	oldCorpID = 0;
	newCorpID = 0;
	oldDate = 0;
	newDate = 0;
}

Notify_OnCorpMemberChange::~Notify_OnCorpMemberChange() {
}

void Notify_OnCorpMemberChange::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_OnCorpMemberChange", pfx);
	_log(l_type, "%scharID=%lu", pfx, charID);
	_log(l_type, "%soldCorpID=%lu", pfx, oldCorpID);
	_log(l_type, "%snewCorpID=%lu", pfx, newCorpID);
	_log(l_type, "%soldDate=" I64u, pfx, oldDate);
	_log(l_type, "%snewDate=" I64u, pfx, newDate);
}

PyRepTuple *Notify_OnCorpMemberChange::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	tuple0->items[0] = new PyRepInteger(charID);
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	tuple2->items[0] = new PyRepInteger(oldCorpID);
	tuple2->items[1] = new PyRepInteger(newCorpID);
	dict1_0 = tuple2;
	
	dict1->items[
		new PyRepString("corporationID")
	] = dict1_0;
	PyRep *dict1_1;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	tuple3->items[0] = new PyRepInteger(oldDate);
	tuple3->items[1] = new PyRepInteger(newDate);
	dict1_1 = tuple3;
	
	dict1->items[
		new PyRepString("startDateTime")
	] = dict1_1;
	tuple0->items[1] = dict1;
	
	res = tuple0;
	

	return(res);
}

PyRepTuple *Notify_OnCorpMemberChange::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	tuple0->items[0] = new PyRepInteger(charID);
	PyRepDict *dict1 = new PyRepDict();
	PyRep *dict1_0;
	PyRepTuple *tuple2 = new PyRepTuple(2);
	tuple2->items[0] = new PyRepInteger(oldCorpID);
	tuple2->items[1] = new PyRepInteger(newCorpID);
	dict1_0 = tuple2;
	
	dict1->items[
		new PyRepString("corporationID")
	] = dict1_0;
	PyRep *dict1_1;
	PyRepTuple *tuple3 = new PyRepTuple(2);
	tuple3->items[0] = new PyRepInteger(oldDate);
	tuple3->items[1] = new PyRepInteger(newDate);
	dict1_1 = tuple3;
	
	dict1->items[
		new PyRepString("startDateTime")
	] = dict1_1;
	tuple0->items[1] = dict1;
	
	res = tuple0;
	

	return(res);
}

bool Notify_OnCorpMemberChange::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_OnCorpMemberChange::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: tuple0 is the wrong size: expected 2, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: charID is not an int: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_1 = (PyRepInteger *) tuple0->items[0];
	if(int_1->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorpMemberChange: truncating 64 bit into into 32 bit int for field charID");
	}
	charID = int_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::Dict)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: dict2 is the wrong type: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	bool dict2_uu1 = false;
	bool dict2_uu2 = false;
	PyRepDict *dict2 = (PyRepDict *) tuple0->items[1];
	
	PyRepDict::iterator dict2_cur, dict2_end;
	dict2_cur = dict2->items.begin();
	dict2_end = dict2->items.end();
	for(; dict2_cur != dict2_end; dict2_cur++) {
		PyRep *key__ = dict2_cur->first;
		if(!key__->CheckType(PyRep::String)) {
			_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: a key in dict2 is the wrong type: %s", key__->TypeString());
			delete packet;
			return(false);
		}
		PyRepString *key_string__ = (PyRepString *) key__;
		
		if(key_string__->value == "corporationID") {
			dict2_uu1 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: tuple3 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple3 = (PyRepTuple *) dict2_cur->second;
	if(tuple3->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: tuple3 is the wrong size: expected 2, but got %d", tuple3->items.size());
		delete packet;
		return(false);
	}

	if(!tuple3->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: oldCorpID is not an int: %s", tuple3->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_4 = (PyRepInteger *) tuple3->items[0];
	if(int_4->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorpMemberChange: truncating 64 bit into into 32 bit int for field oldCorpID");
	}
	oldCorpID = int_4->value;
	if(!tuple3->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: newCorpID is not an int: %s", tuple3->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_5 = (PyRepInteger *) tuple3->items[1];
	if(int_5->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_OnCorpMemberChange: truncating 64 bit into into 32 bit int for field newCorpID");
	}
	newCorpID = int_5->value;
		} else
		if(key_string__->value == "startDateTime") {
			dict2_uu2 = true;
	if(!dict2_cur->second->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: tuple6 is the wrong type: %s", dict2_cur->second->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple6 = (PyRepTuple *) dict2_cur->second;
	if(tuple6->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: tuple6 is the wrong size: expected 2, but got %d", tuple6->items.size());
		delete packet;
		return(false);
	}

	if(!tuple6->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: oldDate is not an int: %s", tuple6->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_7 = (PyRepInteger *) tuple6->items[0];
	oldDate = int64_7->value;
	if(!tuple6->items[1]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: newDate is not an int: %s", tuple6->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int64_8 = (PyRepInteger *) tuple6->items[1];
	newDate = int64_8->value;
		} else
		{
			_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: Unknown key string '%s' in dict2", key_string__->value.c_str());
			delete packet;
			return(false);
		}
	}
	
	if(!dict2_uu1) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: Missing dict entry for 'uu1' in dict2");
		delete packet;
		return(false);
	}
	
	if(!dict2_uu2) {
		_log(NET__PACKET_ERROR, "Decode Notify_OnCorpMemberChange failed: Missing dict entry for 'uu2' in dict2");
		delete packet;
		return(false);
	}
	

	delete packet;
	return(true);
}

Notify_OnCorpMemberChange *Notify_OnCorpMemberChange::Clone() const {
	Notify_OnCorpMemberChange *res = new Notify_OnCorpMemberChange;
	res->CloneFrom(this);
	return(res);
}

void Notify_OnCorpMemberChange::CloneFrom(const Notify_OnCorpMemberChange *from) {
	charID = from->charID;
	oldCorpID = from->oldCorpID;
	newCorpID = from->newCorpID;
	oldDate = from->oldDate;
	newDate = from->newDate;
	
}


Notify_IntRaw::Notify_IntRaw() {
	key = 0;
	data = NULL;
}

Notify_IntRaw::~Notify_IntRaw() {
	delete data;
}

void Notify_IntRaw::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sNotify_IntRaw", pfx);
	_log(l_type, "%skey=%lu", pfx, key);
	_log(l_type, "%sdata:", pfx);
	std::string data_n(pfx);
	data_n += "    ";
	if(data == NULL) {
		_log(l_type, "%sERROR: NULL REP!", data_n.c_str());
	} else {
		data->Dump(l_type, data_n.c_str());
	}
}

PyRepTuple *Notify_IntRaw::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	tuple0->items[0] = new PyRepInteger(key);
	if(data == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_IntRaw: data is NULL! hacking in a PyRepNone");
		data = new PyRepNone();
	}
	tuple0->items[1] = data->Clone();
	res = tuple0;
	

	return(res);
}

PyRepTuple *Notify_IntRaw::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(2);
	tuple0->items[0] = new PyRepInteger(key);
	if(data == NULL) {
		_log(NET__PACKET_ERROR, "Encode Notify_IntRaw: data is NULL! hacking in a PyRepNone");
		data = new PyRepNone();
	}
	tuple0->items[1] = data;
	data = NULL;
	res = tuple0;
	

	return(res);
}

bool Notify_IntRaw::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Notify_IntRaw::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Notify_IntRaw failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 2) {
		_log(NET__PACKET_ERROR, "Decode Notify_IntRaw failed: tuple0 is the wrong size: expected 2, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Notify_IntRaw failed: key is not an int: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_1 = (PyRepInteger *) tuple0->items[0];
	if(int_1->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Notify_IntRaw: truncating 64 bit into into 32 bit int for field key");
	}
	key = int_1->value;
	delete data;
	data = tuple0->items[1];
	tuple0->items[1] = NULL;
	

	delete packet;
	return(true);
}

Notify_IntRaw *Notify_IntRaw::Clone() const {
	Notify_IntRaw *res = new Notify_IntRaw;
	res->CloneFrom(this);
	return(res);
}

void Notify_IntRaw::CloneFrom(const Notify_IntRaw *from) {
	key = from->key;
	delete data;
	if(from->data == NULL) {
		data = NULL;
	} else {
		data = from->data->Clone();
	}
	
}


Call_UpdateApplication::Call_UpdateApplication() {
	corpID = 0;
	message = "";
	status = 0;
	/*  ?  */
	date = NULL;
}

Call_UpdateApplication::~Call_UpdateApplication() {
	/*  ?  */
	delete date;
}

void Call_UpdateApplication::Dump(LogType l_type, const char *pfx) const {
	_log(l_type, "%sCall_UpdateApplication", pfx);
	_log(l_type, "%scorpID=%lu", pfx, corpID);
	_log(l_type, "%smessage='%s'", pfx, message.c_str());
	_log(l_type, "%sstatus=%lu", pfx, status);
	/*  ?  */
	_log(l_type, "%sdate:", pfx);
	std::string date_n(pfx);
	date_n += "    ";
	if(date == NULL) {
		_log(l_type, "%sERROR: NULL REP!", date_n.c_str());
	} else {
		date->Dump(l_type, date_n.c_str());
	}
}

PyRepTuple *Call_UpdateApplication::Encode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(4);
	tuple0->items[0] = new PyRepInteger(corpID);
	tuple0->items[1] = new PyRepString(message);
	tuple0->items[2] = new PyRepInteger(status);
	/*  ?  */
	if(date == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_UpdateApplication: date is NULL! hacking in a PyRepNone");
		date = new PyRepNone();
	}
	tuple0->items[3] = date->Clone();
	res = tuple0;
	

	return(res);
}

PyRepTuple *Call_UpdateApplication::FastEncode() {
	PyRepTuple *res = NULL;
	PyRepTuple *tuple0 = new PyRepTuple(4);
	tuple0->items[0] = new PyRepInteger(corpID);
	tuple0->items[1] = new PyRepString(message);
	tuple0->items[2] = new PyRepInteger(status);
	/*  ?  */
	if(date == NULL) {
		_log(NET__PACKET_ERROR, "Encode Call_UpdateApplication: date is NULL! hacking in a PyRepNone");
		date = new PyRepNone();
	}
	tuple0->items[3] = date;
	date = NULL;
	res = tuple0;
	

	return(res);
}

bool Call_UpdateApplication::Decode(PyRepTuple **in_packet) {
	//quick forwarder to avoid making the user cast it if they have a properly typed object
	PyRep *packet = *in_packet;
	*in_packet = NULL;
	return(Decode(&packet));
}

bool Call_UpdateApplication::Decode(PyRep **in_packet) {
	PyRep *packet = *in_packet;
	*in_packet = NULL;

	if(!packet->CheckType(PyRep::Tuple)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplication failed: tuple0 is the wrong type: %s", packet->TypeString());
		delete packet;
		return(false);
	}
	PyRepTuple *tuple0 = (PyRepTuple *) packet;
	if(tuple0->items.size() != 4) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplication failed: tuple0 is the wrong size: expected 4, but got %d", tuple0->items.size());
		delete packet;
		return(false);
	}

	if(!tuple0->items[0]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplication failed: corpID is not an int: %s", tuple0->items[0]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_1 = (PyRepInteger *) tuple0->items[0];
	if(int_1->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Call_UpdateApplication: truncating 64 bit into into 32 bit int for field corpID");
	}
	corpID = int_1->value;
	if(!tuple0->items[1]->CheckType(PyRep::String)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplication failed: message is not a string: %s", tuple0->items[1]->TypeString());
		delete packet;
		return(false);
	}
	PyRepString *string_2 = (PyRepString *) tuple0->items[1];
	message = string_2->value;
	if(!tuple0->items[2]->CheckType(PyRep::Integer)) {
		_log(NET__PACKET_ERROR, "Decode Call_UpdateApplication failed: status is not an int: %s", tuple0->items[2]->TypeString());
		delete packet;
		return(false);
	}
	PyRepInteger *int_3 = (PyRepInteger *) tuple0->items[2];
	if(int_3->value > 0xFFFFFFFF) {
		_log(NET__PACKET_WARNING, "Decode Call_UpdateApplication: truncating 64 bit into into 32 bit int for field status");
	}
	status = int_3->value;
	/*  ?  */
	delete date;
	date = tuple0->items[3];
	tuple0->items[3] = NULL;
	

	delete packet;
	return(true);
}

Call_UpdateApplication *Call_UpdateApplication::Clone() const {
	Call_UpdateApplication *res = new Call_UpdateApplication;
	res->CloneFrom(this);
	return(res);
}

void Call_UpdateApplication::CloneFrom(const Call_UpdateApplication *from) {
	corpID = from->corpID;
	message = from->message;
	status = from->status;
	/*  ?  */
	delete date;
	if(from->date == NULL) {
		date = NULL;
	} else {
		date = from->date->Clone();
	}
	
}



