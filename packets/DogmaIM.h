/*  EVEmu: EVE Online Server Emulator
  
  **************************************************************
  This file is automatically generated, DO NOT EDIT IT DIRECTLY.
  **************************************************************
  
  (If you need to customize an object, you must copy that object
  into another source file, and give up the ability to generate it)
  
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY except by those people which sell it, which
  are required to give you total support for your newly bought product;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef _____packets_DogmaIM_h__
#define _____packets_DogmaIM_h__

#include <string>
#include <vector>
#include <map>
#include "../common/common.h"
#include "../common/logsys.h"
#include "../common/PyRep.h"



class Call_Dogma_Activate {
public:
	Call_Dogma_Activate();
	~Call_Dogma_Activate();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_Dogma_Activate *Clone() const;
	void CloneFrom(const Call_Dogma_Activate *from);
	
	uint32		itemID;
	std::string	effectName;
	/*  optional:  */
	uint32		target;
	uint32		repeat;


};


class Call_Dogma_Deactivate {
public:
	Call_Dogma_Deactivate();
	~Call_Dogma_Deactivate();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_Dogma_Deactivate *Clone() const;
	void CloneFrom(const Call_Dogma_Deactivate *from);
	
	uint32		itemID;
	std::string	effectName;


};


class Rsp_Dogma_AddTarget {
public:
	Rsp_Dogma_AddTarget();
	~Rsp_Dogma_AddTarget();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Rsp_Dogma_AddTarget *Clone() const;
	void CloneFrom(const Rsp_Dogma_AddTarget *from);
	
	bool		success;
	std::vector<uint32>	targets;


};


class Notify_OnGodmaShipEffect {
public:
	Notify_OnGodmaShipEffect();
	~Notify_OnGodmaShipEffect();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnGodmaShipEffect *Clone() const;
	void CloneFrom(const Notify_OnGodmaShipEffect *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	uint32		itemID;
	uint32		effectID;
	uint64		when;
	uint32		start;
	uint32		active;
	/*  Environment. see ENV_IDX_*  */
	uint32		env_itemID;
	uint32		env_charID;
	uint32		env_shipID;
	uint32		env_target;
	/*  optional  */
	PyRep		*env_other;
	/*  can be complex  */
	PyRepList	env_area;
	/*  not sure what data goes in here.  */
	uint32		env_effectID;
	uint64		startTime;
	uint64		duration;
	/*  seen an 0x07! I think it means infinite.  */
	uint32		repeat;
	PyRep		*randomSeed;
	PyRep		*error;
	/*  <raw name="stall" />  */


};


class Notify_OnModuleAttributeChange {
public:
	Notify_OnModuleAttributeChange();
	~Notify_OnModuleAttributeChange();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnModuleAttributeChange *Clone() const;
	void CloneFrom(const Notify_OnModuleAttributeChange *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	uint32		ownerID;
	uint32		itemKey;
	uint32		attributeID;
	uint64		time;
	PyRep		*newValue;
	PyRep		*oldValue;
	/*  <raw name="scatterAttr" />  */


};


class Notify_OnEffectHit {
public:
	Notify_OnEffectHit();
	~Notify_OnEffectHit();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnEffectHit *Clone() const;
	void CloneFrom(const Notify_OnEffectHit *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  what did the shooting  */
	uint32		itemID;
	/*  what type of effect? projectileFired for example  */
	uint32		effectID;
	/*  what got hit  */
	uint32		targetID;
	/*  the damage which was done  */
	double		damage;


};

	/*  this notify represents damage done to us by something else  */

class Notify_OnDamageMessage_Self {
public:
	Notify_OnDamageMessage_Self();
	~Notify_OnDamageMessage_Self();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnDamageMessage_Self *Clone() const;
	void CloneFrom(const Notify_OnDamageMessage_Self *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  messageID: from eveMessages   */
	std::string	messageID;
	/*  can also have target here...  */
	double		damage;
	uint32		source;
	std::string	splash;


};

	/*  this notify represents damage done to us by something else  */

class Notify_OnDamageMessage_Other {
public:
	Notify_OnDamageMessage_Other();
	~Notify_OnDamageMessage_Other();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnDamageMessage_Other *Clone() const;
	void CloneFrom(const Notify_OnDamageMessage_Other *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  messageID: from eveMessages   */
	std::string	messageID;
	/*  can also have target here...  */
	double		damage;
	uint32		target;
	/*  this should be set to fmtMapping_itemTypeName  */
	uint32		format_type;
	uint32		weaponType;
	std::string	splash;


};


class Notify_OnDamageMessages {
public:
	Notify_OnDamageMessages();
	~Notify_OnDamageMessages();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnDamageMessages *Clone() const;
	void CloneFrom(const Notify_OnDamageMessages *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  this is a list of Notify_OnDamageMessage_*  */
	PyRepList	messages;


};


class Notify_OnEffectMessage {
public:
	Notify_OnEffectMessage();
	~Notify_OnEffectMessage();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnEffectMessage *Clone() const;
	void CloneFrom(const Notify_OnEffectMessage *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  messageID: from eveMessages   */
	std::string	messageID;
	PyRepDict	arguments;


};


class Notify_OnTarget {
public:
	Notify_OnTarget();
	~Notify_OnTarget();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnTarget *Clone() const;
	void CloneFrom(const Notify_OnTarget *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  One of:
        try - starting to target?
        add - targeting successful
        clear - clear all targets
        lost - target lost
        otheradd - somebody else has targeted you
        otherlost - somebody else has stopped targeting you
     */
	std::string	mode;
	uint32		targetID;
	/*  only seen on `target lost` events, but dosent seem to do anything  */
	std::string	reason;


};


class Notify_OnTargets {
public:
	Notify_OnTargets();
	~Notify_OnTargets();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnTargets *Clone() const;
	void CloneFrom(const Notify_OnTargets *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  this is a list of Notify_OnTarget messages  */
	PyRepList	messages;


};


class Notify_OnGodmaFlushLocation {
public:
	Notify_OnGodmaFlushLocation();
	~Notify_OnGodmaFlushLocation();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnGodmaFlushLocation *Clone() const;
	void CloneFrom(const Notify_OnGodmaFlushLocation *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  not sure yet  */


};


class Notify_OnGodmaFlushLocationProfile {
public:
	Notify_OnGodmaFlushLocationProfile();
	~Notify_OnGodmaFlushLocationProfile();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnGodmaFlushLocationProfile *Clone() const;
	void CloneFrom(const Notify_OnGodmaFlushLocationProfile *from);
	
	/*  setup to go into an OnMultiEvent (notify_type)  */
	std::string	notify_type;
	/*  not sure yet  */


};


class Notify_OnMultiEvent {
public:
	Notify_OnMultiEvent();
	~Notify_OnMultiEvent();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnMultiEvent *Clone() const;
	void CloneFrom(const Notify_OnMultiEvent *from);
	
	PyRepList	events;


};



#endif


