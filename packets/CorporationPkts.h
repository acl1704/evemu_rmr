/*  EVEmu: EVE Online Server Emulator
  
  **************************************************************
  This file is automatically generated, DO NOT EDIT IT DIRECTLY.
  **************************************************************
  
  (If you need to customize an object, you must copy that object
  into another source file, and give up the ability to generate it)
  
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY except by those people which sell it, which
  are required to give you total support for your newly bought product;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef _____packets_CorporationPkts_h__
#define _____packets_CorporationPkts_h__

#include <string>
#include <vector>
#include <map>
#include "../common/common.h"
#include "../common/logsys.h"
#include "../common/PyRep.h"


	/*  this is not being used at the moment, more hrer for completeness  */

class GetFactionInfoRsp {
public:
	GetFactionInfoRsp();
	~GetFactionInfoRsp();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	GetFactionInfoRsp *Clone() const;
	void CloneFrom(const GetFactionInfoRsp *from);
	
	/*  0: factionIDbyNPCCorpID: dict: corpID -> factionID     */
	std::map<uint32, uint32>	factionIDbyNPCCorpID;
	/*  1: factionRegions: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>	factionRegions;
	/*  2: factionConstellations: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>	factionConstellations;
	/*  3: factionSolarSystems: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>	factionSolarSystems;
	/*  4: factionRaces: dict: factionID -> intlist  */
	std::map<uint32, PyRep *>	factionRaces;
	/*  5: factionStationCount: dict: factionID -> count  */
	std::map<uint32, uint32>	factionStationCount;
	/*  6: factionSolarSystemCount: dict: factionID -> count  */
	std::map<uint32, uint32>	factionSolarSystemCount;
	/*  7: npcCorpInfo: dict: corpID -> util.Row  */
	/* 
        corporationName,
        corporationID,mainActivityID,secondaryActivityID,
        size,extent,solarSystemID,investorID1,investorShares1,investorID2,
        investorShares2,investorID3,investorShares3,investorID4,investorShares4,
        friendID,enemyID,publicShares,initialPrice,minSecurity,scattered,
        fringe,corridor,hub,border,factionID,sizeFactor,stationCount,
        stationSystemCount,stationID,ceoID,ceoName
     */
	PyRep		*npcCorpInfo;


};


class Call_AddCorporation {
public:
	Call_AddCorporation();
	~Call_AddCorporation();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_AddCorporation *Clone() const;
	void CloneFrom(const Call_AddCorporation *from);
	
	std::string	corpName;
	std::string	corpTicker;
	std::string	description;
	std::string	url;
	double		taxRate;
	PyRep		*shape1;
	PyRep		*shape2;
	PyRep		*shape3;
	PyRep		*color1;
	PyRep		*color2;
	PyRep		*color3;
	PyRep		*unknown;


};


class Item_GetSuggestedTickerNames {
public:
	Item_GetSuggestedTickerNames();
	~Item_GetSuggestedTickerNames();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepObject **packet);
	PyRepObject *Encode();
	PyRepObject *FastEncode();
	Item_GetSuggestedTickerNames *Clone() const;
	void CloneFrom(const Item_GetSuggestedTickerNames *from);
	
	/* object of type util.KeyVal */
	std::string	tN;


};


class Notify_OnCorporaionChanged {
public:
	Notify_OnCorporaionChanged();
	~Notify_OnCorporaionChanged();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnCorporaionChanged *Clone() const;
	void CloneFrom(const Notify_OnCorporaionChanged *from);
	
	uint32		corpID;
	PyRep		*corporationIDOld;
	uint32		corporationIDNew;
	PyRep		*corporationNameOld;
	std::string	corporationNameNew;
	PyRep		*descriptionOld;
	std::string	descriptionNew;
	PyRep		*tickerNameOld;
	std::string	tickerNameNew;
	PyRep		*urlOld;
	std::string	urlNew;
	PyRep		*taxRateOld;
	double		taxRateNew;
	PyRep		*minimumJoinStandingOld;
	double		minimumJoinStandingNew;
	PyRep		*corporationTypeOld;
	uint32		corporationTypeNew;
	PyRep		*hasPlayerPersonnelManagerOld;
	uint32		hasPlayerPersonnelManagerNew;
	PyRep		*sendCharTerminationMessageOld;
	uint32		sendCharTerminationMessageNew;
	PyRep		*creatorIDOld;
	uint32		creatorIDNew;
	PyRep		*stationIDOld;
	uint32		stationIDNew;
	PyRep		*raceIDOld;
	PyRep		*raceIDNew;
	PyRep		*allianceIDOld;
	PyRep		*allianceIDNew;
	PyRep		*sharesOld;
	uint64		sharesNew;
	PyRep		*memberCountOld;
	uint32		memberCountNew;
	PyRep		*memberLimitOld;
	uint32		memberLimitNew;
	PyRep		*allowedMemberRaceIDsOld;
	uint32		allowedMemberRaceIDsNew;
	PyRep		*graphicIDOld;
	uint32		graphicIDNew;
	PyRep		*shape1Old;
	PyRep		*shape1New;
	PyRep		*shape2Old;
	PyRep		*shape2New;
	PyRep		*shape3Old;
	PyRep		*shape3New;
	PyRep		*color1Old;
	PyRep		*color1New;
	PyRep		*color2Old;
	PyRep		*color2New;
	PyRep		*color3Old;
	PyRep		*color3New;
	PyRep		*typefaceOld;
	PyRep		*typefaceNew;
	PyRep		*division1Old;
	PyRep		*division1New;
	PyRep		*division2Old;
	PyRep		*division2New;
	PyRep		*division3Old;
	PyRep		*division3New;
	PyRep		*division4Old;
	PyRep		*division4New;
	PyRep		*division5Old;
	PyRep		*division5New;
	PyRep		*division6Old;
	PyRep		*division6New;
	PyRep		*division7Old;
	PyRep		*division7New;
	PyRep		*deletedOld;
	uint32		deletedNew;
	PyRep		*ceoIDOld;
	uint32		ceoIDNew;


};


class Notify_OCCSessionChangeNotification {
public:
	Notify_OCCSessionChangeNotification();
	~Notify_OCCSessionChangeNotification();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepDict **packet);
	PyRepDict *Encode();
	PyRepDict *FastEncode();
	Notify_OCCSessionChangeNotification *Clone() const;
	void CloneFrom(const Notify_OCCSessionChangeNotification *from);
	
	uint64		corpRoleOld;
	uint64		corpRoleNew;
	uint32		corpidOld;
	uint32		corpidNew;
	uint64		corpRoleAllOld;
	uint64		corpRoleAllNew;
	uint64		corpRoleBaseOld;
	uint64		corpRoleBaseNew;
	uint32		corpHqIDOld;
	uint32		corpHqIDNew;
	uint64		corpRoleHQOld;
	uint64		corpRoleHQNew;
	uint64		corpRoleOtherOld;
	uint64		corpRoleOtherNew;


};


class CorpOfficeSparseRowset {
public:
	CorpOfficeSparseRowset();
	~CorpOfficeSparseRowset();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepObject **packet);
	PyRepObject *Encode();
	PyRepObject *FastEncode();
	CorpOfficeSparseRowset *Clone() const;
	void CloneFrom(const CorpOfficeSparseRowset *from);
	
	/* object of type util.SparseRowset */
	/*  This is probably a header. No indication of it though  */
	/*  This has to be String Table Item 155, which is out of range, so I have to create it a bit differently  */
	std::string	stationID;
	std::string	typeID;
	std::string	officeID;
	std::string	officeFolderID;
	/*  Substruct containing a substream containing the binding stuff  */
	/*  String, Dict, int field  */
	PyRep		*bindedObject;
	/*  Maybe number of offices?  */
	uint32		officeNumber;


};


class Notify_OnObjectPublicAttributesUpdated {
public:
	Notify_OnObjectPublicAttributesUpdated();
	~Notify_OnObjectPublicAttributesUpdated();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnObjectPublicAttributesUpdated *Clone() const;
	void CloneFrom(const Notify_OnObjectPublicAttributesUpdated *from);
	
	std::string	bindID;
	uint32		realRowCount;
	/*  empty tuple so far  */
	/*  This way the old value isn't going to be saved, but the call doesn't fail at least... :S  */
	/*  <string name="unused2" default="realRowCount" /> Remove for the moment...  */
	uint32		changePKIndexValue;
	PyRepDict	unused3;
	PyRep		*changes;


};


class OfficeAttributeUpdate {
public:
	OfficeAttributeUpdate();
	~OfficeAttributeUpdate();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepDict **packet);
	PyRepDict *Encode();
	PyRepDict *FastEncode();
	OfficeAttributeUpdate *Clone() const;
	void CloneFrom(const OfficeAttributeUpdate *from);
	
	PyRep		*oldTypeID;
	uint32		newTypeID;
	PyRep		*oldStationID;
	uint32		newStationID;
	PyRep		*oldOfficeFolderID;
	uint32		newOfficeFolderID;
	PyRep		*oldOfficeID;
	uint32		newOfficeID;


};


class Notify_OnItemChange {
public:
	Notify_OnItemChange();
	~Notify_OnItemChange();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnItemChange *Clone() const;
	void CloneFrom(const Notify_OnItemChange *from);
	
	/* object of type util.Row */
	std::string	unused1;
	std::string	unused2;
	std::string	unused3;
	std::string	unused4;
	std::string	unused5;
	std::string	unused6;
	std::string	unused7;
	std::string	unused8;
	std::string	unused9;
	std::string	unused10;
	std::string	unused11;
	uint32		itemID;
	uint32		typeID;
	uint32		ownerID;
	uint32		locationID;
	uint32		flag;
	uint32		contraband;
	uint32		singleton;
	uint32		quantity;
	uint32		groupID;
	uint32		categoryID;
	PyRep		*customInfo;
	uint32		unused12;
	/*  What this could be?  */


};


class Notify_OnOfficeRentalChanged {
public:
	Notify_OnOfficeRentalChanged();
	~Notify_OnOfficeRentalChanged();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnOfficeRentalChanged *Clone() const;
	void CloneFrom(const Notify_OnOfficeRentalChanged *from);
	
	uint32		ownerID;
	uint32		officeID;
	uint32		officeFolderID;


};


class Notify_OnBillReceived {
public:
	Notify_OnBillReceived();
	~Notify_OnBillReceived();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnBillReceived *Clone() const;
	void CloneFrom(const Notify_OnBillReceived *from);
	
	/*  Empty tuple, very funny :S. Then what is it good for?  */


};


class Reply_FetchOffice {
public:
	Reply_FetchOffice();
	~Reply_FetchOffice();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepList **packet);
	PyRepList *Encode();
	PyRepList *FastEncode();
	Reply_FetchOffice *Clone() const;
	void CloneFrom(const Reply_FetchOffice *from);
	
	uint32		officeID;
	PyRepList	params;


};


class Call_InsertApplication {
public:
	Call_InsertApplication();
	~Call_InsertApplication();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_InsertApplication *Clone() const;
	void CloneFrom(const Call_InsertApplication *from);
	
	uint32		corpID;
	std::string	message;


};


class Notify_OnCorporationApplicationChanged {
public:
	Notify_OnCorporationApplicationChanged();
	~Notify_OnCorporationApplicationChanged();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnCorporationApplicationChanged *Clone() const;
	void CloneFrom(const Notify_OnCorporationApplicationChanged *from);
	
	uint32		charID;
	uint32		corpID;
	PyRep		*statusOld;
	PyRep		*statusNew;
	PyRep		*corporationIDOld;
	PyRep		*corporationIDNew;
	PyRep		*rolesOld;
	PyRep		*rolesNew;
	PyRep		*grantableRolesOld;
	PyRep		*grantableRolesNew;
	PyRep		*deletedOld;
	PyRep		*deletedNew;
	PyRep		*applicationTextOld;
	PyRep		*applicationTextNew;
	PyRep		*lastCorpUpdaterIDOld;
	PyRep		*lastCorpUpdaterIDNew;
	PyRep		*applicationDateTimeOld;
	PyRep		*applicationDateTimeNew;
	PyRep		*characterIDOld;
	PyRep		*characterIDNew;


};


class Call_UpdateApplicationOffer {
public:
	Call_UpdateApplicationOffer();
	~Call_UpdateApplicationOffer();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_UpdateApplicationOffer *Clone() const;
	void CloneFrom(const Call_UpdateApplicationOffer *from);
	
	uint32		charID;
	std::string	appText;
	uint32		newStatus;


};


class MemberAttributeUpdate {
public:
	MemberAttributeUpdate();
	~MemberAttributeUpdate();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepDict **packet);
	PyRepDict *Encode();
	PyRepDict *FastEncode();
	MemberAttributeUpdate *Clone() const;
	void CloneFrom(const MemberAttributeUpdate *from);
	
	PyRep		*grantableRolesAtOtherOld;
	PyRep		*grantableRolesAtOtherNew;
	PyRep		*corporationIDOld;
	PyRep		*corporationIDNew;
	PyRep		*baseIDOld;
	PyRep		*baseIDNew;
	PyRep		*rolesOld;
	PyRep		*rolesNew;
	PyRep		*titleOld;
	PyRep		*titleNew;
	PyRep		*accountKeyOld;
	PyRep		*accountKeyNew;
	PyRep		*grantableRolesOld;
	PyRep		*grantableRolesNew;
	PyRep		*grantableRolesAtHQOld;
	PyRep		*grantableRolesAtHQNew;
	PyRep		*startDateTimeOld;
	PyRep		*startDateTimeNew;
	PyRep		*divisionIDOld;
	PyRep		*divisionIDNew;
	PyRep		*titleMaskOld;
	PyRep		*titleMaskNew;
	PyRep		*characterIDOld;
	PyRep		*characterIDNew;
	PyRep		*squadronIDOld;
	PyRep		*squadronIDNew;
	PyRep		*grantableRolesAtBaseOld;
	PyRep		*grantableRolesAtBaseNew;
	/* 
      <IDEntry key="STI145">
        <InlineTuple name="uu8">
          <raw name="STI145Old" />
          <raw name="STI145New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI146">
        <InlineTuple name="uut">
          <raw name="STI146Old" />
          <raw name="STI146New" />
        </InlineTuple>
      </IDEntry>
      <IDEntry key="STI147">
        <InlineTuple name="uuq">
          <raw name="STI147Old" />
          <raw name="STI147New" />
        </InlineTuple>
      </IDEntry>
 */


};


class Notify_OnCorpMemberChange {
public:
	Notify_OnCorpMemberChange();
	~Notify_OnCorpMemberChange();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnCorpMemberChange *Clone() const;
	void CloneFrom(const Notify_OnCorpMemberChange *from);
	
	uint32		charID;
	uint32		oldCorpID;
	uint32		newCorpID;
	uint64		oldDate;
	uint64		newDate;


};


class Notify_IntRaw {
public:
	Notify_IntRaw();
	~Notify_IntRaw();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_IntRaw *Clone() const;
	void CloneFrom(const Notify_IntRaw *from);
	
	uint32		key;
	PyRep		*data;


};


class Call_UpdateApplication {
public:
	Call_UpdateApplication();
	~Call_UpdateApplication();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_UpdateApplication *Clone() const;
	void CloneFrom(const Call_UpdateApplication *from);
	
	uint32		corpID;
	std::string	message;
	uint32		status;
	/*  ?  */
	PyRep		*date;


};



#endif


