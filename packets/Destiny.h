/*  EVEmu: EVE Online Server Emulator
  
  **************************************************************
  This file is automatically generated, DO NOT EDIT IT DIRECTLY.
  **************************************************************
  
  (If you need to customize an object, you must copy that object
  into another source file, and give up the ability to generate it)
  
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY except by those people which sell it, which
  are required to give you total support for your newly bought product;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef _____packets_Destiny_h__
#define _____packets_Destiny_h__

#include <string>
#include <vector>
#include <map>
#include "../common/common.h"
#include "../common/logsys.h"
#include "../common/PyRep.h"


#include "General.h"

class Notify_DoDestinyUpdates {
public:
	Notify_DoDestinyUpdates();
	~Notify_DoDestinyUpdates();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_DoDestinyUpdates *Clone() const;
	void CloneFrom(const Notify_DoDestinyUpdates *from);
	
	/*  0: list of DoDestinyUpdateMain  */
	PyRepList	updates;


};


class DoDestinyUpdateMain {
public:
	DoDestinyUpdateMain();
	~DoDestinyUpdateMain();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestinyUpdateMain *Clone() const;
	void CloneFrom(const DoDestinyUpdateMain *from);
	
	/*  0: list of DoDestinyAction  */
	PyRepList	updates;
	/*  1  */
	bool		waitForBubble;
	/*  2: this is a list of dogma events, like used in OnMultiEvent  */
	PyRepList	events;


};

	/*  same call as above, completely omitting the events arg.  */

class DoDestinyUpdateMain_2 {
public:
	DoDestinyUpdateMain_2();
	~DoDestinyUpdateMain_2();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestinyUpdateMain_2 *Clone() const;
	void CloneFrom(const DoDestinyUpdateMain_2 *from);
	
	/*  0: list of DoDestinyAction  */
	PyRepList	updates;
	/*  1  */
	bool		waitForBubble;


};


class DoDestinyAction {
public:
	DoDestinyAction();
	~DoDestinyAction();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestinyAction *Clone() const;
	void CloneFrom(const DoDestinyAction *from);
	
	/*  stamp  */
	uint32		update_id;
	/*  event  */
	PyRep		*update;


};


class DoDestiny_SlimItem {
public:
	DoDestiny_SlimItem();
	~DoDestiny_SlimItem();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepObject **packet);
	PyRepObject *Encode();
	PyRepObject *FastEncode();
	DoDestiny_SlimItem *Clone() const;
	void CloneFrom(const DoDestiny_SlimItem *from);
	
	/* object of type foo.SlimItem */
	uint32		bounty;
	uint32		ownerID;
	uint32		charID;
	std::vector<uint32>	modules;
	/* 		  <InlineList>
		    <InlineTuple>
			  <int name="integer10" />
			  <int name="integer11" />
		    </InlineTuple>
		    <InlineTuple>
			  <int name="integer12" />
			  <int name="integer13" />
		    </InlineTuple>

		  </InlineList>
 */
	double		securityStatus;
	uint32		itemID;
	uint32		typeID;
	uint32		allianceID;
	uint32		corpID;


};


class DoDestiny_AddBall {
public:
	DoDestiny_AddBall();
	~DoDestiny_AddBall();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_AddBall *Clone() const;
	void CloneFrom(const DoDestiny_AddBall *from);
	
	/*  0: funcName  */
	std::string	update_name;
	/*  1: args  */
	/*  0  */
	/*  0  */
	std::string	destiny_binary;
	/*  1: slims (hard coded to 1 right now)  */
	/*  0  */
	/*  <element name="slim" type="DoDestiny_SlimItem" /> */
	PyRep		*slim;
	/*  2  */
	std::map<uint32, PyRep *>	damages;


};


class DoDestiny_AddBalls {
public:
	DoDestiny_AddBalls();
	~DoDestiny_AddBalls();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_AddBalls *Clone() const;
	void CloneFrom(const DoDestiny_AddBalls *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0  */
	/*  0  */
	PyRepBuffer	*destiny_binary;
	/*  1: slims (list of DoDestiny_SlimItem)  */
	PyRepList	slims;
	/*  2  */
	std::map<uint32, PyRep *>	damages;


};


class DoDestiny_OnSpecialFX13 {
public:
	DoDestiny_OnSpecialFX13();
	~DoDestiny_OnSpecialFX13();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_OnSpecialFX13 *Clone() const;
	void CloneFrom(const DoDestiny_OnSpecialFX13 *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0: shipID  */
	uint32		entityID;
	/*  1: moduleID  */
	uint32		moduleID;
	/*  2: moduleTypeID  */
	uint32		moduleTypeID;
	/*  3: targetID  */
	uint32		targetID;
	/*  4: otherTypeID  */
	uint32		otherTypeID;
	/*  5: area, completely unknown contents, prolly not really an intlist  */
	std::vector<uint32>	area;
	/*  6: guid: see scripts/parklife/fxSequencer.py  */
	std::string	effect_type;
	/*  7: isOffensive: saw 0  */
	uint32		isOffensive;
	/*  8: start: saw 1  */
	uint32		start;
	/*  9: active: saw 0  */
	uint32		active;
	/*  10: duration in milliseconds (optional)  */
	double		duration_ms;
	/*  11: repeat (optional) (really defaults to None, but -1 seems to work too)  */
	uint32		repeat;
	/*  12: startTime (optional)  */
	uint64		startTime;


};


class DoDestiny_OnSpecialFX10 {
public:
	DoDestiny_OnSpecialFX10();
	~DoDestiny_OnSpecialFX10();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_OnSpecialFX10 *Clone() const;
	void CloneFrom(const DoDestiny_OnSpecialFX10 *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0: shipID  */
	uint32		entityID;
	/*  1: moduleID  */
	uint32		moduleID;
	/*  2: moduleTypeID  */
	uint32		moduleTypeID;
	/*  3: targetID  */
	uint32		targetID;
	/*  4: otherTypeID  */
	uint32		otherTypeID;
	/*  5: completely unknown contents, prolly not really an intlist  */
	std::vector<uint32>	area;
	/*  6: see scripts/parklife/fxSequencer.py  */
	std::string	effect_type;
	/*  7: isOffensive: soft boolean  */
	uint32		isOffensive;
	/*  8: start: soft boolean  */
	uint32		start;
	/*  9: active: soft boolean  */
	uint32		active;


};


class DoDestiny_OnSpecialFX_JumpOut {
public:
	DoDestiny_OnSpecialFX_JumpOut();
	~DoDestiny_OnSpecialFX_JumpOut();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_OnSpecialFX_JumpOut *Clone() const;
	void CloneFrom(const DoDestiny_OnSpecialFX_JumpOut *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0  */
	uint32		entityID;
	/*  1  */
	/*  2  */
	/*  3  */
	uint32		usingGateID;
	/*  4  */
	/*  5: completely unknown contents, prolly not really an intlist  */
	std::vector<uint32>	area;
	/*  6: see scripts/parklife/fxSequencer.py  */
	std::string	effect_type;
	/*  7: saw 0  */
	uint32		isOffensive;
	/*  8: saw 1  */
	uint32		start;
	/*  9: saw 0  */
	uint32		active;


};


class DoDestiny_DamageDetails {
public:
	DoDestiny_DamageDetails();
	~DoDestiny_DamageDetails();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepList **packet);
	PyRepList *Encode();
	PyRepList *FastEncode();
	DoDestiny_DamageDetails *Clone() const;
	void CloneFrom(const DoDestiny_DamageDetails *from);
	
	double		shield;
	double		tau;
	uint64		timestamp;
	double		armor;
	double		structure;


};


class DoDestinyDamageState {
public:
	DoDestinyDamageState();
	~DoDestinyDamageState();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestinyDamageState *Clone() const;
	void CloneFrom(const DoDestinyDamageState *from);
	
	/*  this is a ratio from 0-1  */
	double		shield;
	/*  no idea what this is for, I have seen 100000 and 600000  */
	double		tau;
	uint64		timestamp;
	/*  this is a ratio from 0-1  */
	double		armor;
	/*  this is a ratio from 0-1  */
	double		structure;


};


class DoDestiny_OnDamageStateChange {
public:
	DoDestiny_OnDamageStateChange();
	~DoDestiny_OnDamageStateChange();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_OnDamageStateChange *Clone() const;
	void CloneFrom(const DoDestiny_OnDamageStateChange *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0: shipID  */
	uint32		entityID;
	/*  entry of type DoDestinyDamageState  */
	PyRep		*state;


};


class DoDestiny_SetSpeedFraction {
public:
	DoDestiny_SetSpeedFraction();
	~DoDestiny_SetSpeedFraction();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetSpeedFraction *Clone() const;
	void CloneFrom(const DoDestiny_SetSpeedFraction *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0  */
	uint32		entityID;
	/*  1  */
	double		fraction;


};


class DoDestiny_SetNotificationRange {
public:
	DoDestiny_SetNotificationRange();
	~DoDestiny_SetNotificationRange();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetNotificationRange *Clone() const;
	void CloneFrom(const DoDestiny_SetNotificationRange *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0  */
	uint32		entityID;
	/*  1  */
	double		range;


};


class DoDestiny_SetBallPosition {
public:
	DoDestiny_SetBallPosition();
	~DoDestiny_SetBallPosition();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallPosition *Clone() const;
	void CloneFrom(const DoDestiny_SetBallPosition *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	double		x;
	double		y;
	double		z;


};


class DoDestiny_SetBallVelocity {
public:
	DoDestiny_SetBallVelocity();
	~DoDestiny_SetBallVelocity();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallVelocity *Clone() const;
	void CloneFrom(const DoDestiny_SetBallVelocity *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	double		x;
	double		y;
	double		z;


};


class DoDestiny_FollowBall {
public:
	DoDestiny_FollowBall();
	~DoDestiny_FollowBall();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_FollowBall *Clone() const;
	void CloneFrom(const DoDestiny_FollowBall *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0  */
	uint32		entityID;
	uint32		ballID;
	uint32		unknown;
	/*  seen 50  */


};


class DoDestiny_Stop {
public:
	DoDestiny_Stop();
	~DoDestiny_Stop();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_Stop *Clone() const;
	void CloneFrom(const DoDestiny_Stop *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0  */
	uint32		entityID;


};


class DoDestiny_GotoDirection {
public:
	DoDestiny_GotoDirection();
	~DoDestiny_GotoDirection();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_GotoDirection *Clone() const;
	void CloneFrom(const DoDestiny_GotoDirection *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	double		x;
	double		y;
	double		z;


};


class DoDestiny_GotoPoint {
public:
	DoDestiny_GotoPoint();
	~DoDestiny_GotoPoint();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_GotoPoint *Clone() const;
	void CloneFrom(const DoDestiny_GotoPoint *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	double		x;
	double		y;
	double		z;


};


class DoDestiny_SetBallMass {
public:
	DoDestiny_SetBallMass();
	~DoDestiny_SetBallMass();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallMass *Clone() const;
	void CloneFrom(const DoDestiny_SetBallMass *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	double		mass;


};


class DoDestiny_SetBallRadius {
public:
	DoDestiny_SetBallRadius();
	~DoDestiny_SetBallRadius();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallRadius *Clone() const;
	void CloneFrom(const DoDestiny_SetBallRadius *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	double		radius;


};


class DoDestiny_SetBallMassive {
public:
	DoDestiny_SetBallMassive();
	~DoDestiny_SetBallMassive();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallMassive *Clone() const;
	void CloneFrom(const DoDestiny_SetBallMassive *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	/*  integer boolean  */
	uint32		is_massive;


};


class DoDestiny_SetBallFree {
public:
	DoDestiny_SetBallFree();
	~DoDestiny_SetBallFree();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallFree *Clone() const;
	void CloneFrom(const DoDestiny_SetBallFree *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	/*  integer boolean I think  */
	uint32		is_free;


};


class DoDestiny_SetBallGlobal {
public:
	DoDestiny_SetBallGlobal();
	~DoDestiny_SetBallGlobal();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallGlobal *Clone() const;
	void CloneFrom(const DoDestiny_SetBallGlobal *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	/*  integer boolean I think  */
	uint32		is_global;


};


class DoDestiny_SetMaxSpeed {
public:
	DoDestiny_SetMaxSpeed();
	~DoDestiny_SetMaxSpeed();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetMaxSpeed *Clone() const;
	void CloneFrom(const DoDestiny_SetMaxSpeed *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	double		speed;


};


class DoDestiny_WarpTo {
public:
	DoDestiny_WarpTo();
	~DoDestiny_WarpTo();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_WarpTo *Clone() const;
	void CloneFrom(const DoDestiny_WarpTo *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0  */
	uint32		entityID;
	/*  1  */
	double		dest_x;
	/*  2  */
	double		dest_y;
	/*  3  */
	double		dest_z;
	/*  4  */
	uint32		distance;
	/*  5  */
	uint32		u5;


};


class DoDestiny_SetBallTroll {
public:
	DoDestiny_SetBallTroll();
	~DoDestiny_SetBallTroll();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallTroll *Clone() const;
	void CloneFrom(const DoDestiny_SetBallTroll *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	uint32		maybeAnotherEntityID;


};


class DoDestiny_SetBoid {
public:
	DoDestiny_SetBoid();
	~DoDestiny_SetBoid();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBoid *Clone() const;
	void CloneFrom(const DoDestiny_SetBoid *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	uint32		maybeAnotherEntityID;


};


class DoDestiny_Orbit {
public:
	DoDestiny_Orbit();
	~DoDestiny_Orbit();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_Orbit *Clone() const;
	void CloneFrom(const DoDestiny_Orbit *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	uint32		orbitEntityID;
	uint32		distance;


};


class DoDestiny_AddMushroom {
public:
	DoDestiny_AddMushroom();
	~DoDestiny_AddMushroom();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_AddMushroom *Clone() const;
	void CloneFrom(const DoDestiny_AddMushroom *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		parentID;
	/*  might be range  */
	double		unknown2;
	double		unknown3;


};


class DoDestiny_CloakBall {
public:
	DoDestiny_CloakBall();
	~DoDestiny_CloakBall();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_CloakBall *Clone() const;
	void CloneFrom(const DoDestiny_CloakBall *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	bool		cloaked;
	/*  optional: maybe <real name="cloakMode" />  */


};


class OnDockingAccepted {
public:
	OnDockingAccepted();
	~OnDockingAccepted();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	OnDockingAccepted *Clone() const;
	void CloneFrom(const OnDockingAccepted *from);
	
	/*  0  */
	double		start_x;
	double		start_y;
	double		start_z;
	/*  1: dup of previous list?  */
	double		end_x;
	double		end_y;
	double		end_z;
	/*  2  */
	uint32		stationID;


};


class DoDestiny_RemoveBall {
public:
	DoDestiny_RemoveBall();
	~DoDestiny_RemoveBall();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_RemoveBall *Clone() const;
	void CloneFrom(const DoDestiny_RemoveBall *from);
	
	/*  0: method  */
	std::string	update_name;
	/*  1: arguments  */
	uint32		entityID;
	/*  there is an unknown optional int arg which may follow  */


};


class DoDestiny_RemoveBalls {
public:
	DoDestiny_RemoveBalls();
	~DoDestiny_RemoveBalls();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_RemoveBalls *Clone() const;
	void CloneFrom(const DoDestiny_RemoveBalls *from);
	
	/*  0: method  */
	std::string	update_name;
	/*  1: arguments  */
	std::vector<uint32>	balls;


};


class SetState_DamageState {
public:
	SetState_DamageState();
	~SetState_DamageState();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	SetState_DamageState *Clone() const;
	void CloneFrom(const SetState_DamageState *from);
	
	/*  0  */
	/*  0  */
	double		unknown00;
	/*  1  */
	double		unknown01;
	/*  2  */
	uint64		timestamp;
	/*  1  */
	double		unknown1;
	/*  2  */
	double		unknown2;


};


class DoDestiny_SetState {
public:
	DoDestiny_SetState();
	~DoDestiny_SetState();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetState *Clone() const;
	void CloneFrom(const DoDestiny_SetState *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0  */
	/* object of type util.KeyVal */
	uint32		stamp;
	/*  List of tuples, 3 elements: (gangID? int 7072859, int 692524420, None) */
	PyRepList	gangCorps;
	/*  this is the big nasty state buffer  */
	PyRepBuffer	*destiny_state;
	uint32		ego;
	/*  maps from an entity ID (I think) to a SetState_DamageState struct  */
	std::map<uint32, PyRep *>	damageState;
	/*  maps from an entity ID (I think) to a tuple: (entityID, timestamp)  */
	std::map<uint32, PyRep *>	aggressors;
	/*  rowset: droneID, ownerID, controllerID, activityState, typeID, controllerOwnerID  */
	/* <element type="util_Rowset" name="droneState" /> */
	PyRep		*droneState;
	PyRepList	slims;
	/*  DBRow itemID,typeID,ownerID,locationID,flag,contraband,singleton,quantity,groupID,categoryID,customInfo    */
	PyRep		*solItem;
	/*  not really an intlist, only seen it smpty right now  */
	PyRepList	effectStates;
	/*  not really an intlist, each element should be a tuple: (694930434, 7088433)  */
	PyRepList	charGangs;


};


class DoDestiny_OnDroneStateChange {
public:
	DoDestiny_OnDroneStateChange();
	~DoDestiny_OnDroneStateChange();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_OnDroneStateChange *Clone() const;
	void CloneFrom(const DoDestiny_OnDroneStateChange *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0: droneID  */
	uint32		droneID;
	/*  1: ownerID  */
	uint32		ownerID;
	/*  2: controllerID (ship ID)  */
	uint32		controllerID;
	/*  3: activityState  */
	uint32		activityState;
	/*  4: droneTypeID  */
	uint32		droneTypeID;
	/*  2: controllerOwnerID (ship's owner ID)  */
	uint32		controllerOwnerID;


};


class DoDestiny_SetBallInteractive {
public:
	DoDestiny_SetBallInteractive();
	~DoDestiny_SetBallInteractive();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_SetBallInteractive *Clone() const;
	void CloneFrom(const DoDestiny_SetBallInteractive *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	/*  0: entityID  */
	uint32		entityID;
	/*  1: interactive: on/off  */
	uint32		interactive;


};


class DoDestiny_TerminalExplosion {
public:
	DoDestiny_TerminalExplosion();
	~DoDestiny_TerminalExplosion();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	DoDestiny_TerminalExplosion *Clone() const;
	void CloneFrom(const DoDestiny_TerminalExplosion *from);
	
	/*  0  */
	std::string	update_name;
	/*  1  */
	uint32		entityID;
	/*  seen 1206  */
	uint32		unknown;


};



#endif


