/*  EVEmu: EVE Online Server Emulator
  
  **************************************************************
  This file is automatically generated, DO NOT EDIT IT DIRECTLY.
  **************************************************************
  
  (If you need to customize an object, you must copy that object
  into another source file, and give up the ability to generate it)
  
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY except by those people which sell it, which
  are required to give you total support for your newly bought product;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef _____packets_AccountPkts_h__
#define _____packets_AccountPkts_h__

#include <string>
#include <vector>
#include <map>
#include "../common/common.h"
#include "../common/logsys.h"
#include "../common/PyRep.h"


#include "General.h"

class AuthenticationReq {
public:
	AuthenticationReq();
	~AuthenticationReq();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	AuthenticationReq *Clone() const;
	void CloneFrom(const AuthenticationReq *from);
	
	/*  0: clientinfo  */
	std::string	project_version;
	uint32		code_version;
	uint32		build_version;
	std::string	languageID;
	/* <IDEntry key="os.hashid">
	<int name="os_hashid" />
   </IDEntry> */
	uint32		affiliate;
	double		version_number;
	/*  1  */
	std::string	login;
	/*  2  */
	std::string	password;
	/*  potential optional field address...  */


};


class AuthenticationRsp {
public:
	AuthenticationRsp();
	~AuthenticationRsp();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	AuthenticationRsp *Clone() const;
	void CloneFrom(const AuthenticationRsp *from);
	
	/*  0: serverinfo  */
	std::string	project_version;
	uint32		build_version;
	double		version_number;
	/*  1: userID  */
	uint32		accountID;
	/*  2  */
	uint64		role;
	/*  3  */
	PyRepDict	cachables;
	PyRepDict	services;
	/*  4: proxyNodeID  */
	uint32		proxyNodeID;


};


class RspPing {
public:
	RspPing();
	~RspPing();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	RspPing *Clone() const;
	void CloneFrom(const RspPing *from);
	
	/*  0  */
	uint64		timestamp;


};


class RspGetPostAuthenticationMessage {
public:
	RspGetPostAuthenticationMessage();
	~RspGetPostAuthenticationMessage();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	RspGetPostAuthenticationMessage *Clone() const;
	void CloneFrom(const RspGetPostAuthenticationMessage *from);
	
	/*  0  */
	/* object of type util.KeyVal */
	std::string	message;
	uint32		showStatusBar;
	uint32		center;
	uint32		showAddressBar;
	std::string	url;
	uint32		showOptions;
	uint32		showButtons;
	uint32		showModal;


};



#endif


