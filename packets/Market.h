/*  EVEmu: EVE Online Server Emulator
  
  **************************************************************
  This file is automatically generated, DO NOT EDIT IT DIRECTLY.
  **************************************************************
  
  (If you need to customize an object, you must copy that object
  into another source file, and give up the ability to generate it)
  
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY except by those people which sell it, which
  are required to give you total support for your newly bought product;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef _____packets_Market_h__
#define _____packets_Market_h__

#include <string>
#include <vector>
#include <map>
#include "../common/common.h"
#include "../common/logsys.h"
#include "../common/PyRep.h"


	/*  this really dosent belong here  */

class MarketGroup_Entry {
public:
	MarketGroup_Entry();
	~MarketGroup_Entry();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepList **packet);
	PyRepList *Encode();
	PyRepList *FastEncode();
	MarketGroup_Entry *Clone() const;
	void CloneFrom(const MarketGroup_Entry *from);
	
	uint32		marketGroupID;
	PyRep		*parentGroupID;
	/*  may be None  */
	std::string	marketGroupName;
	std::string	description;
	PyRep		*graphicID;
	/*  may be None  */
	uint32		hasTypes;
	std::vector<uint32>	types;


};


class GetPriceHistory_Header {
public:
	GetPriceHistory_Header();
	~GetPriceHistory_Header();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepObject **packet);
	PyRepObject *Encode();
	PyRepObject *FastEncode();
	GetPriceHistory_Header *Clone() const;
	void CloneFrom(const GetPriceHistory_Header *from);
	
	/* object of type blue.DBRowDescriptor */
	std::string	_historyDate;
	uint32		_historyDateV;
	std::string	_lowPrice;
	uint32		_lowPriceV;
	std::string	_highPrice;
	uint32		_highPriceV;
	std::string	_avgPrice;
	uint32		_avgPriceV;
	std::string	_volume;
	uint32		_volumeV;
	std::string	_orders;
	uint32		_ordersV;


};


class GetPriceHistory_Entry {
public:
	GetPriceHistory_Entry();
	~GetPriceHistory_Entry();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepObject **packet);
	PyRepObject *Encode();
	PyRepObject *FastEncode();
	GetPriceHistory_Entry *Clone() const;
	void CloneFrom(const GetPriceHistory_Entry *from);
	
	/* object of type blue.DBRow */
	GetPriceHistory_Header	header;
	uint64		historyDate;
	double		lowPrice;
	double		highPrice;
	double		avgPrice;
	uint64		volume;
	uint32		orders;


};


class Rsp_GetPriceHistory {
public:
	Rsp_GetPriceHistory();
	~Rsp_GetPriceHistory();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Rsp_GetPriceHistory *Clone() const;
	void CloneFrom(const Rsp_GetPriceHistory *from);
	
	GetPriceHistory_Header	header;
	PyRepList	rows;


};


class Call_PlaceCharOrder {
public:
	Call_PlaceCharOrder();
	~Call_PlaceCharOrder();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_PlaceCharOrder *Clone() const;
	void CloneFrom(const Call_PlaceCharOrder *from);
	
	uint32		stationID;
	uint32		typeID;
	double		price;
	uint32		quantity;
	bool		bid;
	uint32		orderRange;
	uint32		itemID;
	uint32		minVolume;
	uint32		duration;
	/*  in days  */
	bool		useCorp;
	bool		located;


};


class Notify_OnOwnOrderChanged {
public:
	Notify_OnOwnOrderChanged();
	~Notify_OnOwnOrderChanged();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Notify_OnOwnOrderChanged *Clone() const;
	void CloneFrom(const Notify_OnOwnOrderChanged *from);
	
	PyRep		*PackedRow;
	/*  Reason: Add or Expiry (prolly a "Change" or something too)  */
	std::string	reason;


};



#endif


